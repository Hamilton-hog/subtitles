1
00:00:00,000 --> 00:00:04,880
and try to follow along with the steps provided.

2
00:00:04,880 --> 00:00:09,240
So after you've done all of this,

3
00:00:09,240 --> 00:00:12,960
you should be able to be anywhere on your computer

4
00:00:12,960 --> 00:00:15,840
and just say Flutter doctor.

5
00:00:15,840 --> 00:00:18,720
Now Flutter doctor is a very important command

6
00:00:18,720 --> 00:00:21,640
because it looks at your Flutter installation

7
00:00:21,640 --> 00:00:25,360
and it kind of makes sure that it's in good health,

8
00:00:25,360 --> 00:00:27,920
as denoted by the word doctor.

9
00:00:28,440 --> 00:00:32,040
So because Flutter in itself is a framework

10
00:00:32,040 --> 00:00:35,440
and it depends on many other bits and pieces

11
00:00:35,440 --> 00:00:37,340
which your computer may need to have

12
00:00:37,340 --> 00:00:40,420
in order for Flutter to actually work optimally,

13
00:00:42,640 --> 00:00:45,420
Flutter doctor will then go through a series of steps

14
00:00:45,420 --> 00:00:48,040
to ensure that first Flutter is updated

15
00:00:48,040 --> 00:00:51,920
and that you for instance have Android tool chain

16
00:00:51,920 --> 00:00:55,480
that you have Xcode installed, Chrome, blah, blah.

17
00:00:55,480 --> 00:01:00,480
So I mean, this result at the moment

18
00:01:00,520 --> 00:01:02,160
looks quite fine on my computer,

19
00:01:02,160 --> 00:01:03,640
but if you're running Flutter doctor

20
00:01:03,640 --> 00:01:04,900
for the first time on your computer,

21
00:01:04,900 --> 00:01:07,400
you may get a few problems.

22
00:01:07,400 --> 00:01:09,560
Some of the problems that you will experience probably

23
00:01:09,560 --> 00:01:12,920
is gonna say Android SDK couldn't be found,

24
00:01:12,920 --> 00:01:15,040
Xcode couldn't be found,

25
00:01:15,040 --> 00:01:18,320
because if you're running Flutter on a Windows machine

26
00:01:18,320 --> 00:01:21,000
or a Linux machine, then you can't have Xcode.

27
00:01:21,000 --> 00:01:24,760
Xcode is like the software provided by Apple.

28
00:01:25,760 --> 00:01:28,560
And only runs unfortunately on Mac OS

29
00:01:28,560 --> 00:01:33,560
and it's used for compiling or creating Mac OS,

30
00:01:36,560 --> 00:01:40,040
iOS and iPad OS pieces of software.

31
00:01:40,040 --> 00:01:43,640
So although you can run Flutter on your Linux

32
00:01:43,640 --> 00:01:47,520
and on your Windows machine without a problem,

33
00:01:47,520 --> 00:01:52,520
you won't be able to produce or test your Flutter code

34
00:01:53,000 --> 00:01:55,440
running on an iPhone, unfortunately,

35
00:01:55,440 --> 00:01:59,320
unless you have access to Xcode.

36
00:02:00,200 --> 00:02:02,760
And the easiest way to get access to that is of course,

37
00:02:02,760 --> 00:02:03,800
to have a Macintosh.

38
00:02:03,800 --> 00:02:07,720
And that's unfortunate because yeah,

39
00:02:07,720 --> 00:02:10,640
it's just not available for other platforms.

40
00:02:12,160 --> 00:02:17,160
So you've run Flutter doctor and it's basically gonna tell you

41
00:02:17,880 --> 00:02:20,880
that, okay, now I'm gonna assume that you're on a Macintosh.

42
00:02:20,880 --> 00:02:23,920
It's gonna tell you that, okay, Xcode, for instance,

43
00:02:23,920 --> 00:02:25,240
you need to install Xcode.

44
00:02:25,240 --> 00:02:28,240
And the way to do that is you need to open App Store

45
00:02:28,240 --> 00:02:31,200
on your computer and just type Xcode here

46
00:02:32,360 --> 00:02:35,360
and go and install Xcode on your computer.

47
00:02:37,640 --> 00:02:40,000
So depending on, I don't know which version

48
00:02:40,000 --> 00:02:41,080
is the latest at the moment,

49
00:02:41,080 --> 00:02:44,760
but if you're trying to develop Flutter app to be able

50
00:02:44,880 --> 00:02:47,880
to run on your iOS phone or the iOS simulator,

51
00:02:47,880 --> 00:02:49,440
then you need to install Xcode.

52
00:02:49,440 --> 00:02:51,200
If you're on a Macintosh, sorry,

53
00:02:51,200 --> 00:02:53,480
if you're on a Linux computer or Windows,

54
00:02:53,480 --> 00:02:54,800
you don't have to do this step.

55
00:02:54,800 --> 00:02:57,160
Actually, you can't do unfortunately this step.

56
00:02:59,720 --> 00:03:01,760
So once you've done that,

57
00:03:01,760 --> 00:03:06,760
you also need to make sure that you've installed

58
00:03:07,840 --> 00:03:10,720
developer tools for Xcode.

59
00:03:10,720 --> 00:03:12,920
So you need to install Xcode.

60
00:03:13,200 --> 00:03:14,880
Developer tools for Xcode.

61
00:03:14,880 --> 00:03:16,480
So let's see how we can do that.

62
00:03:16,480 --> 00:03:18,680
Developer tools, Xcode.

63
00:03:20,560 --> 00:03:22,440
Command line tools, right.

64
00:03:24,560 --> 00:03:28,240
Let's see, install from terminal,

65
00:03:28,240 --> 00:03:31,880
there's a command that you can execute in order to do that.

66
00:03:31,880 --> 00:03:34,200
And that command actually looks like this.

67
00:03:36,120 --> 00:03:40,720
Here, I will zoom into it so you can see better.

68
00:03:41,320 --> 00:03:45,760
It says sudo xcode select install.

69
00:03:45,760 --> 00:03:48,480
So you need to issue that command in your terminal.

70
00:03:48,480 --> 00:03:50,960
So if I do that and it says, what's the password,

71
00:03:50,960 --> 00:03:54,440
I'll enter my password and it says they're already installed.

72
00:03:54,440 --> 00:03:56,600
So if you haven't done that,

73
00:03:56,600 --> 00:03:58,600
please go ahead and execute this command

74
00:03:58,600 --> 00:04:02,760
in order to install command line tools for your Xcode.

75
00:04:04,880 --> 00:04:09,360
Now, the next piece after Xcode that you will need is

76
00:04:11,080 --> 00:04:13,960
let's see if I can actually bring up.

77
00:04:13,960 --> 00:04:15,440
So we've talked about Flutter Doctor,

78
00:04:15,440 --> 00:04:16,480
that was Flutter Doctor.

79
00:04:16,480 --> 00:04:18,640
And we also talked about installing Xcode.

80
00:04:18,640 --> 00:04:20,880
So I'm now bringing that up a little bit late.

81
00:04:21,800 --> 00:04:25,600
But now the next step is to install Android Studio.

82
00:04:27,040 --> 00:04:31,400
So what Android Studio is, is like the equivalent of Xcode,

83
00:04:31,400 --> 00:04:34,720
but for writing Android specific applications.

84
00:04:34,720 --> 00:04:38,160
Now, in order to write Flutter applications,

85
00:04:38,160 --> 00:04:40,760
you don't need Android Studio per se,

86
00:04:40,760 --> 00:04:44,040
but you kind of need the SDK manager.

87
00:04:44,040 --> 00:04:47,640
Now, both iOS and Android,

88
00:04:49,920 --> 00:04:52,720
for programmers, they provide you with something called an SDK,

89
00:04:52,720 --> 00:04:55,080
just like Flutter is an SDK or toolkit.

90
00:04:56,000 --> 00:04:58,440
iOS and Android also provide you with SDK

91
00:04:58,440 --> 00:05:01,040
in order to write native applications.

92
00:05:01,040 --> 00:05:05,360
And since Flutter utilizes these native capabilities

93
00:05:05,360 --> 00:05:07,160
of each platform in order to, for instance,

94
00:05:07,160 --> 00:05:10,400
create an application that's compatible with iOS or Android,

95
00:05:11,640 --> 00:05:16,040
it will utilize the native components, sorry,

96
00:05:16,040 --> 00:05:18,000
or the native pieces of software,

97
00:05:18,000 --> 00:05:21,400
namely called Xcode, sorry,

98
00:05:21,400 --> 00:05:25,200
namely called iOS SDK and Android SDK.

99
00:05:25,200 --> 00:05:27,840
So you need to download Android Studio

100
00:05:27,840 --> 00:05:29,560
so you get access to the SDK manager

101
00:05:29,560 --> 00:05:31,920
so you can install an Android SDK.

102
00:05:31,920 --> 00:05:33,720
Now, Xcode in itself,

103
00:05:33,720 --> 00:05:35,480
when you download the latest version of Xcode,

104
00:05:35,480 --> 00:05:39,000
it comes with the latest version of the iOS SDK,

105
00:05:39,000 --> 00:05:41,280
but Android Studio doesn't do that.

106
00:05:41,280 --> 00:05:42,120
Well, wait a minute.

107
00:05:42,120 --> 00:05:44,000
Yeah, it probably does in the latest versions,

108
00:05:44,000 --> 00:05:45,800
but we can check that out.

109
00:05:45,800 --> 00:05:48,400
So if you go to your browser and just say Android Studio,

110
00:05:49,840 --> 00:05:52,560
and then you open up developerandroid.com.

111
00:05:52,560 --> 00:05:53,600
Let's just go there.

112
00:05:54,920 --> 00:05:58,440
And then you can just click on download Android Studio,

113
00:05:58,440 --> 00:05:59,960
and then there are download options,

114
00:05:59,960 --> 00:06:03,760
and you can see there's available for Windows, Mac, and Linux.

115
00:06:03,760 --> 00:06:08,760
So then please go ahead and download your Android Studio,

116
00:06:09,680 --> 00:06:12,920
and I can see for Macintosh is a package,

117
00:06:12,920 --> 00:06:14,120
so you can install it easily.

118
00:06:14,120 --> 00:06:15,560
You don't have to unzip anything,

119
00:06:15,560 --> 00:06:18,080
and for Windows is also like an executable,

120
00:06:18,080 --> 00:06:21,000
so tar.gz as well for Linux.

121
00:06:21,000 --> 00:06:24,680
So now let's say that you've done that.

122
00:06:24,680 --> 00:06:26,640
Now, after doing that,

123
00:06:26,640 --> 00:06:29,680
then you should be able to bring up Android Studio.

124
00:06:31,600 --> 00:06:32,440
Let's see.

125
00:06:34,560 --> 00:06:36,160
I'll bring it up here.

126
00:06:37,320 --> 00:06:40,200
Now, when you bring up your Android Studio,

127
00:06:40,200 --> 00:06:43,760
it will just pretty much be empty here on the screen,

128
00:06:43,760 --> 00:06:45,240
and you'll get some tips and tricks

129
00:06:45,240 --> 00:06:46,400
how to use Android Studio.

130
00:06:46,400 --> 00:06:48,000
But the important thing for you here

131
00:06:48,000 --> 00:06:53,000
is to be able to install the Android SDK.

132
00:06:54,200 --> 00:06:57,160
So if you go then to tools,

133
00:06:57,160 --> 00:07:00,000
I believe there is an SDK manager right here.

134
00:07:01,000 --> 00:07:05,560
So just ensure that you have an SDK installed.

135
00:07:05,560 --> 00:07:08,600
For me, I have Android 12 installed here.

136
00:07:08,600 --> 00:07:10,800
So ensure that you have one of these SDKs

137
00:07:10,800 --> 00:07:14,360
ready for you to use by Flutter.

138
00:07:15,280 --> 00:07:16,720
And as soon as you've done that,

139
00:07:16,720 --> 00:07:21,720
then when you run then your Flutter doctor command,

140
00:07:22,560 --> 00:07:27,560
then the part about Android SDK is going to be ticked here.

141
00:07:29,960 --> 00:07:31,440
Sorry, the Android Studio.

142
00:07:32,480 --> 00:07:33,320
So that's that.

143
00:07:33,320 --> 00:07:35,120
So we've talked about the Android tool chain,

144
00:07:35,120 --> 00:07:37,400
which is the Android SDK you can see.

145
00:07:37,400 --> 00:07:38,720
We've talked about Xcode.

146
00:07:38,720 --> 00:07:40,120
Chrome is just a web browser.

147
00:07:40,120 --> 00:07:41,400
If you want, you can have that.

148
00:07:41,400 --> 00:07:44,520
If you're developing Flutter applications for the web,

149
00:07:44,520 --> 00:07:46,160
it kinda is necessary.

150
00:07:48,520 --> 00:07:50,000
And then you can run Flutter.

151
00:07:50,960 --> 00:07:53,520
And then this, you're probably,

152
00:07:53,520 --> 00:07:55,560
if you're just getting started with Flutter,

153
00:07:55,560 --> 00:07:58,120
you're not gonna have this VS Code part ticked

154
00:07:58,120 --> 00:08:01,720
because VS Code is a code editor,

155
00:08:01,720 --> 00:08:06,200
an open source code editor provided by Microsoft.

156
00:08:07,280 --> 00:08:09,240
And it is the code editor

157
00:08:09,240 --> 00:08:11,880
that I'm gonna use for the entire course,

158
00:08:11,880 --> 00:08:14,200
for this entire course as we go on.

159
00:08:14,200 --> 00:08:15,160
And to be honest with you,

160
00:08:15,160 --> 00:08:16,520
I've tried Android Studio

161
00:08:16,520 --> 00:08:18,560
and I've tried VS Code for Flutter development

162
00:08:18,560 --> 00:08:21,280
and I can highly recommend that you use VS Code

163
00:08:21,280 --> 00:08:24,040
just for its sheer performance,

164
00:08:24,040 --> 00:08:27,440
it's for its simplicity, extensions,

165
00:08:27,440 --> 00:08:32,440
and its ability just to really focus on a simple editor

166
00:08:32,920 --> 00:08:35,120
without bothering you with lots of bells and whistles.

167
00:08:35,120 --> 00:08:37,320
So it's a preference though.

168
00:08:37,320 --> 00:08:39,960
Some people use Android Studio for Flutter development

169
00:08:39,960 --> 00:08:41,320
and some people use VS Code.

170
00:08:41,320 --> 00:08:44,440
So I don't think one is better than the other.

171
00:08:44,440 --> 00:08:45,920
It's completely a preference.

172
00:08:45,920 --> 00:08:50,920
So that's for Android Studio and the Android SDK.

173
00:08:51,120 --> 00:08:55,080
So now let's go ahead and install Visual Studio Code,

174
00:08:55,080 --> 00:08:57,880
which is the tool that I'm gonna use for this course.

175
00:08:57,880 --> 00:09:00,520
So let's bring up a new window

176
00:09:00,520 --> 00:09:04,480
and I'm gonna say, install Visual Studio Code.

177
00:09:04,480 --> 00:09:07,480
And I'm gonna bring the window up here so you see.

178
00:09:07,480 --> 00:09:11,920
Let's go here and you can download the one that you prefer

179
00:09:11,920 --> 00:09:14,160
for your computer, I've chosen Mac.

180
00:09:14,160 --> 00:09:15,840
And for me specifically,

181
00:09:15,840 --> 00:09:17,720
I have a Macintosh with an Apple Silicon.

182
00:09:17,720 --> 00:09:20,960
So I then choose this one Mac with an Apple Silicon

183
00:09:20,960 --> 00:09:23,240
and then it's gonna download that for you automatically.

184
00:09:23,240 --> 00:09:25,880
So it's just about 200 megabytes, I think,

185
00:09:25,880 --> 00:09:27,880
or actually 100 megabyte only.

186
00:09:27,880 --> 00:09:30,400
After you've done that just on a Macintosh,

187
00:09:30,400 --> 00:09:35,400
you would go and put that on in your applications folder.

188
00:09:37,080 --> 00:09:39,320
So I'm actually gonna delete that,

189
00:09:39,320 --> 00:09:40,680
which I downloaded just now

190
00:09:40,680 --> 00:09:44,000
because I already have VS Code on my system.

191
00:09:46,760 --> 00:09:50,400
So that's for Visual Studio Code.

192
00:09:53,000 --> 00:09:57,560
So let's go ahead now, now that we've done that,

193
00:09:57,560 --> 00:10:02,560
I'm gonna talk a little bit about some extensions

194
00:10:03,960 --> 00:10:06,280
that we're gonna use in Visual Studio Code.

195
00:10:06,280 --> 00:10:09,000
So let me bring up my terminal

196
00:10:09,000 --> 00:10:12,240
and we don't need that.

197
00:10:12,240 --> 00:10:14,280
Let's go and bring up Visual Studio Code.

198
00:10:15,200 --> 00:10:18,520
And then I already actually have

199
00:10:18,520 --> 00:10:20,800
so many Visual Studio Code windows open,

200
00:10:21,720 --> 00:10:23,840
but I can just say new window.

201
00:10:23,840 --> 00:10:26,680
So you see how Visual Studio Code looks like.

202
00:10:27,880 --> 00:10:31,040
And then let's see, don't show again.

203
00:10:31,040 --> 00:10:33,200
Okay, so this is pretty much how Visual Studio Code

204
00:10:33,200 --> 00:10:36,200
looks like, so it's a very simple application to begin with.

205
00:10:37,200 --> 00:10:39,240
Now, what we need to do for this example

206
00:10:39,240 --> 00:10:41,200
is to enable a few extensions.

207
00:10:41,200 --> 00:10:44,320
Now, the first extension that we're gonna enable

208
00:10:44,320 --> 00:10:46,240
is called error lens.

209
00:10:46,240 --> 00:10:48,880
And you need to go here on the left-hand side,

210
00:10:48,880 --> 00:10:51,520
find extensions and just type error,

211
00:10:51,520 --> 00:10:56,520
if I can type error and just say error lens, just like that.

212
00:10:56,520 --> 00:10:59,920
Click on error lens and just press enable or install,

213
00:10:59,920 --> 00:11:00,960
I believe it's called.

214
00:11:00,960 --> 00:11:04,720
So error lens allows you to see errors in line

215
00:11:04,840 --> 00:11:07,560
without you having to click on a specific line

216
00:11:07,560 --> 00:11:09,400
of error, basically.

217
00:11:09,400 --> 00:11:14,160
So it expands the entire error as you're coding,

218
00:11:14,160 --> 00:11:16,040
you will probably have some errors in your code.

219
00:11:16,040 --> 00:11:18,040
That error will be then displayed right there

220
00:11:18,040 --> 00:11:19,920
in front of your face in its entirety.

221
00:11:19,920 --> 00:11:22,400
So you don't have to press a little small button

222
00:11:22,400 --> 00:11:24,800
to be able to see that complete error.

223
00:11:24,800 --> 00:11:27,920
So it's a fantastic extension, to be honest with you.

224
00:11:28,800 --> 00:11:31,000
Now, the other thing that you'll need

225
00:11:31,000 --> 00:11:35,080
is something called bracket pair colorizer.

226
00:11:35,080 --> 00:11:37,160
And that bracket pair colorizer is something

227
00:11:37,160 --> 00:11:41,280
that is already installed in Visual Studio code.

228
00:11:41,280 --> 00:11:44,840
It used to be an extension that you could download,

229
00:11:44,840 --> 00:11:48,080
but it was so popular that Microsoft has added that

230
00:11:48,080 --> 00:11:50,080
internally to Visual Studio code.

231
00:11:50,080 --> 00:11:51,960
So you don't have to do that manually,

232
00:11:51,960 --> 00:11:53,480
sorry, by installing an extension.

233
00:11:56,200 --> 00:11:57,920
Now that we've talked about that,

234
00:11:57,960 --> 00:12:00,840
the next step is to actually install

235
00:12:00,840 --> 00:12:03,240
Flutter and Dart extensions.

236
00:12:03,240 --> 00:12:06,600
So here, just type Flutter.

237
00:12:08,040 --> 00:12:08,880
Let's do that.

238
00:12:08,880 --> 00:12:12,800
And then just click on the install button.

239
00:12:12,800 --> 00:12:13,800
I've already installed that,

240
00:12:13,800 --> 00:12:15,880
so there's a disable button for me here.

241
00:12:16,800 --> 00:12:18,560
The Flutter extension,

242
00:12:18,560 --> 00:12:20,840
and then you'll also need the Dart extension.

243
00:12:20,840 --> 00:12:23,760
So just type Dart and then install that as well.

244
00:12:24,760 --> 00:12:28,760
So after these two installations,

245
00:12:30,320 --> 00:12:35,320
we also need to install another great extension called block.

246
00:12:35,320 --> 00:12:37,120
B-L-O-C.

247
00:12:38,240 --> 00:12:40,600
I'm not gonna go into the details of what block is,

248
00:12:40,600 --> 00:12:44,520
because you will learn about block a lot later in the course,

249
00:12:44,520 --> 00:12:48,440
but it is just a great extension to have.

250
00:12:48,440 --> 00:12:50,360
As we go on, you're gonna learn about it.

251
00:12:50,400 --> 00:12:53,440
So I can't really explain exactly what it is right now,

252
00:12:53,440 --> 00:12:54,720
but just install it,

253
00:12:54,720 --> 00:12:57,280
and I will tell you more about block later

254
00:12:57,280 --> 00:12:58,600
in the course, I promise.

255
00:13:00,040 --> 00:13:05,040
So that was basically installing a block.

256
00:13:06,280 --> 00:13:08,840
Now, when you start up your Visual Studio code,

257
00:13:08,840 --> 00:13:11,520
it probably doesn't look like the way it does for me.

258
00:13:11,520 --> 00:13:14,320
And that is because I have a custom theme

259
00:13:14,320 --> 00:13:18,320
installed on my Visual Studio code called Tokyo Night.

260
00:13:18,520 --> 00:13:23,520
It is a very, very mellow, dark theme, as it's called.

261
00:13:25,120 --> 00:13:27,800
And themes in Visual Studio code can be installed

262
00:13:27,800 --> 00:13:29,760
just like you install an extension.

263
00:13:29,760 --> 00:13:32,320
So if you like my theme,

264
00:13:32,320 --> 00:13:34,680
you're more than welcome to go into extensions

265
00:13:34,680 --> 00:13:39,680
and then search for Tokyo Night and just install it.

266
00:13:40,000 --> 00:13:43,960
So it has different theme colors as well.

267
00:13:43,960 --> 00:13:46,400
This is the one I use, Tokyo Night.

268
00:13:46,400 --> 00:13:49,320
Actually, I use this one, Tokyo Night.

269
00:13:49,320 --> 00:13:54,320
So if you want that theme, please go ahead and install it.

270
00:13:56,800 --> 00:13:58,720
And now that we've talked about that,

271
00:13:58,720 --> 00:14:03,720
we come to the last point that I wanted to discuss basically

272
00:14:04,080 --> 00:14:08,080
before we wrap up this chapter, which is our chapter two.

273
00:14:08,080 --> 00:14:11,440
So now that we talked about a little bit of setup

274
00:14:11,440 --> 00:14:13,680
for setting up your Flutter installation

275
00:14:13,680 --> 00:14:16,040
and setting up your Flutter installation,

276
00:14:16,040 --> 00:14:17,480
and setting up your text editor,

277
00:14:17,480 --> 00:14:20,080
which in this case is Visual Studio code.

278
00:14:21,000 --> 00:14:23,000
In the next chapter, which is chapter three,

279
00:14:23,000 --> 00:14:26,360
we're gonna talk about Dart programming.

280
00:14:26,360 --> 00:14:29,400
So before we actually jump into writing Flutter applications,

281
00:14:29,400 --> 00:14:34,120
we're gonna talk about how to write code in Dart,

282
00:14:34,120 --> 00:14:36,920
or at least understand like the basics of Dart.

283
00:14:36,920 --> 00:14:40,320
So without further ado, let's close up this chapter

284
00:14:40,320 --> 00:14:43,040
and I'll see you in the next one.

285
00:14:43,040 --> 00:14:45,560
Hello everyone, and welcome to the third chapter

286
00:14:45,560 --> 00:14:46,720
of our Flutter course.

287
00:14:47,640 --> 00:14:49,760
In this chapter, I thought maybe we could focus

288
00:14:49,760 --> 00:14:52,160
a little bit on, actually not a little bit,

289
00:14:52,160 --> 00:14:54,520
but quite a lot on Dart.

290
00:14:54,520 --> 00:14:56,400
As you know from the previous chapter,

291
00:14:56,400 --> 00:14:59,200
we know now that Dart is the programming language

292
00:14:59,200 --> 00:15:03,000
that powers Flutter.

293
00:15:03,000 --> 00:15:07,000
So it would be a good idea for us at least

294
00:15:07,000 --> 00:15:09,440
to get a little bit of introduction to Dart,

295
00:15:09,440 --> 00:15:12,840
how it works, a little bit of its internals,

296
00:15:12,840 --> 00:15:15,400
different data types, functions, methods, classes,

297
00:15:16,240 --> 00:15:19,080
but this chapter as well, just like the entire course,

298
00:15:19,080 --> 00:15:20,880
I'm kind of assuming that you haven't done

299
00:15:20,880 --> 00:15:22,920
any programming at all before.

300
00:15:22,920 --> 00:15:26,520
So I'm gonna take things very slowly,

301
00:15:26,520 --> 00:15:29,720
take the concepts one at a time, introduce them to you.

302
00:15:30,760 --> 00:15:33,840
So, and I will give you some references to read more

303
00:15:33,840 --> 00:15:38,840
about the topics as we won't have really that much

304
00:15:39,160 --> 00:15:43,120
of a time in this course to go into detail about everything.

305
00:15:43,120 --> 00:15:48,120
So the goal of this chapter is to basically get you started

306
00:15:48,840 --> 00:15:53,840
with programming Dart and writing your apps

307
00:15:54,600 --> 00:15:56,160
then later for Flutter.

308
00:15:58,360 --> 00:16:03,360
In order to do that, we need to have a project set up.

309
00:16:05,200 --> 00:16:07,680
And by project, I mean, you need to have some kind

310
00:16:07,680 --> 00:16:11,600
of a playground set up so that you can start writing

311
00:16:11,600 --> 00:16:14,440
Dart code and then you can try it on, for instance,

312
00:16:14,440 --> 00:16:18,400
a telephone or a simulator or what have you.

313
00:16:18,400 --> 00:16:22,800
Now, a lot of people would rather go to Dart pad

314
00:16:22,800 --> 00:16:24,560
as we saw in the previous chapter

315
00:16:24,560 --> 00:16:27,760
and start writing their code in Dart pad.

316
00:16:28,680 --> 00:16:29,800
That's one way of doing it.

317
00:16:29,800 --> 00:16:34,800
But since in this course, we're gonna write an application,

318
00:16:36,480 --> 00:16:38,720
release it for iOS and Android,

319
00:16:39,680 --> 00:16:44,320
it is safe to say that we can literally start actually

320
00:16:44,320 --> 00:16:48,640
creating our real project here and now

321
00:16:48,640 --> 00:16:51,160
so that we can then later build upon it

322
00:16:51,160 --> 00:16:53,640
rather than writing all our code in Dart pad

323
00:16:54,680 --> 00:16:58,560
because you can then by doing, by writing your code

324
00:16:58,560 --> 00:17:01,080
in an actual Flutter project, you can get used

325
00:17:01,080 --> 00:17:05,240
to how we work with Flutter as a whole.

326
00:17:05,240 --> 00:17:07,920
So I think this is a little bit of a time invested

327
00:17:07,920 --> 00:17:11,160
into later chapters as well, where we're gonna work

328
00:17:11,160 --> 00:17:13,240
and continue working on the same project.

329
00:17:13,240 --> 00:17:15,680
So we have to just set it up once.

330
00:17:15,680 --> 00:17:20,520
But at the same time, there is a little bit of a value

331
00:17:20,520 --> 00:17:25,120
in not blending in too much of our test code,

332
00:17:25,120 --> 00:17:26,760
like what we're doing in this chapter

333
00:17:26,760 --> 00:17:31,000
with what we're gonna do later in the actual application,

334
00:17:31,000 --> 00:17:31,840
if you know what I mean.

335
00:17:31,840 --> 00:17:35,720
So I think it would be better now for us to set up

336
00:17:35,720 --> 00:17:40,040
just a test application and then keep working on it.

337
00:17:40,040 --> 00:17:41,840
And then later on, when we start doing

338
00:17:41,840 --> 00:17:42,920
the actual application,

339
00:17:42,920 --> 00:17:44,720
then we create a separate project for that.

340
00:17:44,720 --> 00:17:49,720
So now let's then do that together.

341
00:17:51,600 --> 00:17:54,920
So I'm gonna bring my face down here

342
00:17:54,920 --> 00:17:57,240
so you see the entire screen.

343
00:17:58,960 --> 00:18:02,240
I'm then going to create a new terminal window

344
00:18:02,240 --> 00:18:04,800
and bring it up here on the screen so you can see it.

345
00:18:04,800 --> 00:18:05,880
And I'm gonna increase the font

346
00:18:05,880 --> 00:18:08,720
so it's a little bit easier to spot when I'm typing.

347
00:18:10,680 --> 00:18:13,960
So let's go to a folder where you try to,

348
00:18:13,960 --> 00:18:17,400
or where you keep your projects.

349
00:18:17,400 --> 00:18:20,440
For me, I go to dev projects

350
00:18:20,440 --> 00:18:22,960
and I have a folder there called Flutter.

351
00:18:22,960 --> 00:18:27,960
So I try to put all my Flutter projects in here.

352
00:18:29,480 --> 00:18:33,320
Then in order to create a new Flutter project,

353
00:18:33,320 --> 00:18:37,680
what you have to do is to issue the Flutter create command.

354
00:18:37,680 --> 00:18:40,960
And this create command is already shipped inside Flutter.

355
00:18:40,960 --> 00:18:43,560
So if you say which Flutter,

356
00:18:43,560 --> 00:18:46,280
this is gonna go and find the actual Flutter binary.

357
00:18:46,280 --> 00:18:47,840
If you remember from the previous chapters

358
00:18:47,840 --> 00:18:49,680
where we installed Flutter.

359
00:18:51,040 --> 00:18:52,440
It's gonna find the Flutter binary

360
00:18:52,440 --> 00:18:55,160
and then call the create command on it.

361
00:18:55,160 --> 00:18:58,080
So if you say Flutter create,

362
00:18:58,080 --> 00:19:00,720
it expects you to kind of like provide it

363
00:19:00,720 --> 00:19:03,280
with some sort of a name of a project.

364
00:19:04,240 --> 00:19:06,600
So let's just say, learning Dart.

365
00:19:11,200 --> 00:19:14,000
So that's the binary, that's the command

366
00:19:14,000 --> 00:19:16,120
and that is the name of the project.

367
00:19:16,120 --> 00:19:21,120
So this is the easiest way to create a new Flutter project

368
00:19:21,360 --> 00:19:22,440
in my opinion at least.

369
00:19:22,440 --> 00:19:24,320
So let's execute that command.

370
00:19:27,920 --> 00:19:29,160
It's gonna do its thing.

371
00:19:30,280 --> 00:19:32,440
And what I'm gonna do then is to,

372
00:19:32,440 --> 00:19:36,840
I've created a new folder called learning Dart.

373
00:19:36,840 --> 00:19:40,280
So let's go and I'm gonna say, CD learning Dart.

374
00:19:41,480 --> 00:19:45,280
And then I'm going to issue a command called code dot.

375
00:19:45,280 --> 00:19:49,400
And I can actually bring this a little bit to the right

376
00:19:49,400 --> 00:19:52,400
so you can, and also do it like this

377
00:19:52,400 --> 00:19:54,000
so you can see what I'm typing.

378
00:19:55,720 --> 00:19:58,800
As you can see, I've written code dot.

379
00:19:58,800 --> 00:20:01,800
And what code does is that it brings up Visual Studio code.

380
00:20:01,800 --> 00:20:04,480
So it's just like a command that you can issue

381
00:20:04,480 --> 00:20:06,320
in order to bring up Visual Studio code.

382
00:20:06,320 --> 00:20:11,320
And if I just bring up Visual Studio code

383
00:20:11,760 --> 00:20:14,840
the way it is right now, and for instance, you can see it,

384
00:20:14,840 --> 00:20:16,040
you can't see it right now

385
00:20:16,040 --> 00:20:19,600
but it's because I have a separate screen here.

386
00:20:19,600 --> 00:20:22,840
I'll bring up Visual Studio code as you can see here by hand.

387
00:20:24,040 --> 00:20:28,120
There is a good extension or there is an ability

388
00:20:28,120 --> 00:20:33,120
for Visual Studio code to install this code shortcut

389
00:20:33,160 --> 00:20:34,640
for you in terminal in your path.

390
00:20:34,640 --> 00:20:39,640
So if you say which code, it just says user local bin code.

391
00:20:40,080 --> 00:20:42,840
So it's just an executable that allows you then

392
00:20:42,840 --> 00:20:45,640
to open up Visual Studio code with a path.

393
00:20:45,640 --> 00:20:48,120
Like, so you can say open up Visual Studio code

394
00:20:48,120 --> 00:20:49,640
in this folder.

395
00:20:49,640 --> 00:20:54,160
So you can just say code dot, so.

396
00:20:55,160 --> 00:20:57,000
And you can do that in Visual Studio code.

397
00:20:57,000 --> 00:20:59,040
You can allow that to be installed

398
00:20:59,040 --> 00:21:03,680
by doing command shift P on Macintosh or control shift P,

399
00:21:03,680 --> 00:21:07,960
I believe in windows and Linux.

400
00:21:07,960 --> 00:21:10,800
And there's this little command here that says shell command

401
00:21:10,800 --> 00:21:12,640
install code command in path.

402
00:21:12,640 --> 00:21:15,480
So if you execute that once, then it's already set up for you.

403
00:21:15,480 --> 00:21:17,200
You don't have to do that anymore.

404
00:21:17,200 --> 00:21:21,760
So if you'd like to be able to say code dots in terminal

405
00:21:21,760 --> 00:21:25,640
and open the current folder within Visual Studio code

406
00:21:25,640 --> 00:21:28,120
without you having to open Visual Studio code manually

407
00:21:28,120 --> 00:21:31,480
and then doing file open, then I suggest

408
00:21:31,480 --> 00:21:34,480
that you do command shift P or control shift P

409
00:21:34,480 --> 00:21:37,080
in Visual Studio code, depending on which operating system

410
00:21:37,080 --> 00:21:38,960
you're using and then choosing shell command

411
00:21:38,960 --> 00:21:42,440
install code command in path.

412
00:21:42,440 --> 00:21:45,040
So I've already done that, so I can just say code dot

413
00:21:46,240 --> 00:21:48,160
and I'll bring this up here.

414
00:21:49,200 --> 00:21:52,760
So as you can see, this is the basics of a simple

415
00:21:55,880 --> 00:21:59,120
Flutter project that you create with Flutter Create.

416
00:21:59,120 --> 00:22:02,560
Now, Visual Studio code has a built-in terminal,

417
00:22:02,560 --> 00:22:05,320
so I don't have to have this terminal window open anymore.

418
00:22:05,320 --> 00:22:07,720
So I'm just going to close it.

419
00:22:07,720 --> 00:22:09,480
And I'm going to make this full screen,

420
00:22:09,480 --> 00:22:12,280
increase the size a little bit so you can see better.

421
00:22:12,280 --> 00:22:17,040
And perhaps I could even remove this Flutter logo on top right

422
00:22:17,040 --> 00:22:20,280
so you can see the content a little bit better as well.

423
00:22:21,120 --> 00:22:26,120
So that's the creation of our simple Flutter project.

424
00:22:26,120 --> 00:22:29,560
Now, in order for this Flutter project to run

425
00:22:29,560 --> 00:22:32,360
and you be able to run this application

426
00:22:32,360 --> 00:22:35,560
and keep testing your project,

427
00:22:35,560 --> 00:22:37,000
you would have to select a target.

428
00:22:37,000 --> 00:22:39,440
And you do that with command shift P

429
00:22:39,440 --> 00:22:42,320
and then choosing Flutter select device.

430
00:22:42,320 --> 00:22:46,200
So you can just say Flutter select device, enter.

431
00:22:46,200 --> 00:22:48,400
Command shift P is on Macintosh and control shift P

432
00:22:49,400 --> 00:22:51,440
I believe is in Linux and Windows.

433
00:22:51,440 --> 00:22:54,640
So do that, command shift P is a very important command.

434
00:22:54,640 --> 00:22:56,760
You're going to use it quite a lot in this course.

435
00:22:56,760 --> 00:22:58,120
So just learn that please.

436
00:22:59,760 --> 00:23:01,120
Then I'm going to say select device

437
00:23:01,120 --> 00:23:04,680
and I'm going to choose, since I'm on a Macintosh

438
00:23:04,680 --> 00:23:07,600
and as you saw earlier, we have Xcode already installed.

439
00:23:07,600 --> 00:23:11,440
Xcode comes also with the entire iOS SDK

440
00:23:11,440 --> 00:23:13,400
and also with the simulator.

441
00:23:13,400 --> 00:23:17,400
I can choose to run our application on iOS simulator

442
00:23:18,400 --> 00:23:22,160
or I can choose to run it on an actual phone.

443
00:23:22,160 --> 00:23:26,520
Now for this, I believe,

444
00:23:26,520 --> 00:23:29,640
I don't know if we've talked already about SCRCPY

445
00:23:29,640 --> 00:23:30,480
to be honest with you.

446
00:23:30,480 --> 00:23:32,800
I'm just going to search in my notes

447
00:23:34,320 --> 00:23:35,920
to see if you've talked about that.

448
00:23:35,920 --> 00:23:40,760
And if you just give me one second, please just check here.

449
00:23:40,760 --> 00:23:43,120
I believe we're going to set it up in chapter six.

450
00:23:43,120 --> 00:23:45,880
So we haven't set up SCRCPY yet.

451
00:23:45,880 --> 00:23:48,280
So for that purpose, I'm just going to say

452
00:23:49,160 --> 00:23:51,560
select device and I'm just going to say start iOS simulator.

453
00:23:51,560 --> 00:23:53,240
So that is going to, as you can see,

454
00:23:53,240 --> 00:23:55,080
start up iOS simulator.

455
00:23:55,080 --> 00:23:57,640
And that for now is like the best way

456
00:23:57,640 --> 00:23:59,560
for us to test our application.

457
00:23:59,560 --> 00:24:03,000
So while this is connecting,

458
00:24:03,000 --> 00:24:05,960
I can show you a little bit around as well.

459
00:24:05,960 --> 00:24:08,160
We have, as you can see, lots of files here

460
00:24:08,160 --> 00:24:09,120
already created for us.

461
00:24:09,120 --> 00:24:11,600
We're going to go through some of these.

462
00:24:11,600 --> 00:24:12,920
But one of the most important files

463
00:24:12,920 --> 00:24:14,840
that you're going to need to get used to

464
00:24:14,840 --> 00:24:17,640
is this lib slash main.dart.

465
00:24:17,640 --> 00:24:21,160
And this is where the majority of the code is written.

466
00:24:21,160 --> 00:24:25,440
So this is its contents at the moment.

467
00:24:26,800 --> 00:24:28,840
Let's see what it's doing with the simulator.

468
00:24:28,840 --> 00:24:30,720
I'm just going to have a look here.

469
00:24:34,000 --> 00:24:36,160
It's taking a little bit longer than expected.

470
00:24:36,160 --> 00:24:38,640
So what I'm going to do is I'm just going to

471
00:24:38,640 --> 00:24:40,440
kill the iOS simulator manually.

472
00:24:40,440 --> 00:24:42,960
This usually doesn't happen, but that's okay.

473
00:24:42,960 --> 00:24:44,640
If it does happen, then you know how to deal with it.

474
00:24:44,640 --> 00:24:45,920
Just close the simulator.

475
00:24:46,920 --> 00:24:50,320
And then I'm just going to go to Command-Shift-P,

476
00:24:50,320 --> 00:24:54,320
select device, and then start iOS simulator fresh.

477
00:24:54,320 --> 00:24:56,160
So it's starting right now.

478
00:24:58,360 --> 00:25:00,400
Okay, so that's our simulator.

479
00:25:00,400 --> 00:25:02,440
And I'm actually going to decrease the size of this

480
00:25:02,440 --> 00:25:07,440
a little bit since I realized that it is a very large font.

481
00:25:07,480 --> 00:25:10,360
So this is our main.dart file.

482
00:25:10,360 --> 00:25:14,800
This is like where the Flutter command line command

483
00:25:15,160 --> 00:25:18,440
has created, it is the file that has been created for us.

484
00:25:18,440 --> 00:25:20,200
So we don't have to play around with it too much,

485
00:25:20,200 --> 00:25:22,800
to be honest with you, at the moment.

486
00:25:22,800 --> 00:25:24,520
For the purpose of this chapter,

487
00:25:24,520 --> 00:25:28,200
we're just going to have a look at basically kind of like

488
00:25:28,200 --> 00:25:32,440
exploiting this code so that we can inject our code into it

489
00:25:32,440 --> 00:25:33,880
so we can learn Dart a little bit.

490
00:25:33,880 --> 00:25:35,840
So you don't have to understand all of this code

491
00:25:35,840 --> 00:25:36,800
the way it is right now.

492
00:25:36,800 --> 00:25:38,600
There's lots of comments and et cetera.

493
00:25:40,600 --> 00:25:42,560
So that's that part.

494
00:25:42,560 --> 00:25:44,640
So now that we're here and then you can see

495
00:25:45,480 --> 00:25:46,920
we have a little simulator here.

496
00:25:46,920 --> 00:25:49,880
And in order to run this application on this simulator,

497
00:25:49,880 --> 00:25:53,320
since you've already done the Flutter select command,

498
00:25:53,320 --> 00:25:57,000
you just go to run and you say run without debugging for now.

499
00:25:57,000 --> 00:26:00,640
So since the simulator is already selected,

500
00:26:00,640 --> 00:26:02,960
then it understands that it needs to compile this project

501
00:26:02,960 --> 00:26:04,960
for my simulator.

502
00:26:04,960 --> 00:26:09,960
So, and we're just going to give it some time

503
00:26:09,960 --> 00:26:11,440
depending on your machine and like,

504
00:26:11,440 --> 00:26:13,520
what do you have for specifications on your machine?

505
00:26:13,520 --> 00:26:17,080
This command could take anywhere between a couple of seconds

506
00:26:17,080 --> 00:26:20,120
to maybe 30 seconds or even more.

507
00:26:20,120 --> 00:26:21,720
And I'm not sure how long it's going to take

508
00:26:21,720 --> 00:26:23,880
for a fresh Flutter project, to be honest with you,

509
00:26:23,880 --> 00:26:25,440
to start running on the simulator,

510
00:26:25,440 --> 00:26:28,640
but it took about 21 seconds or 22 seconds.

511
00:26:31,360 --> 00:26:33,640
I will bring up the project now.

512
00:26:33,640 --> 00:26:35,600
And this is like the basic Flutter project.

513
00:26:35,600 --> 00:26:37,440
I'm not going to go into details about how it works,

514
00:26:37,440 --> 00:26:40,320
but you can press the plus button if you want to.

515
00:26:40,320 --> 00:26:41,160
But what I'm going to do,

516
00:26:41,160 --> 00:26:42,840
I'm just going to close this widget inspector

517
00:26:42,840 --> 00:26:45,640
that was opened automatically.

518
00:26:45,640 --> 00:26:48,800
And I'm just going to bring this a little bit down

519
00:26:48,800 --> 00:26:51,920
so that we can see the debug console, okay?

520
00:26:51,920 --> 00:26:55,920
So that's for setting up our project.

521
00:26:55,920 --> 00:26:57,200
So that part is done.

522
00:26:57,200 --> 00:27:00,120
Now, the first thing that we need to talk about

523
00:27:00,120 --> 00:27:05,120
when we start talking about Dart is the concept of keywords.

524
00:27:06,840 --> 00:27:09,080
Now, since I'm assuming that you haven't done

525
00:27:09,080 --> 00:27:12,000
any programming language in any other place before,

526
00:27:13,360 --> 00:27:15,560
you need to understand what keywords are.

527
00:27:16,720 --> 00:27:19,080
They're very important in understanding

528
00:27:19,080 --> 00:27:20,440
any programming language, basically.

529
00:27:20,440 --> 00:27:23,440
And keywords are concisely explained.

530
00:27:26,400 --> 00:27:31,400
They're words that are reserved for the programming language

531
00:27:33,000 --> 00:27:37,520
that you cannot use for anything else

532
00:27:37,520 --> 00:27:40,040
than what the programming language intends those words

533
00:27:40,040 --> 00:27:41,360
to be used as.

534
00:27:41,480 --> 00:27:44,480
I know that sounds a little bit difficult,

535
00:27:44,480 --> 00:27:48,120
but I mean, there's no real good analogy

536
00:27:48,120 --> 00:27:49,720
in like if you're coming from Figma,

537
00:27:49,720 --> 00:27:51,240
if you're coming from a design world,

538
00:27:51,240 --> 00:27:54,720
what a keyword could be because in a design world,

539
00:27:54,720 --> 00:27:59,520
you're not really talking in terms of code with your product

540
00:27:59,520 --> 00:28:04,520
or with your software where you're designing your stuff.

541
00:28:05,160 --> 00:28:07,720
But when you come to programming language,

542
00:28:07,720 --> 00:28:08,920
as you know, it's a language.

543
00:28:08,920 --> 00:28:12,960
So words mean stuff in a programming language.

544
00:28:12,960 --> 00:28:16,480
So a keyword is, as its name indicates,

545
00:28:16,480 --> 00:28:19,080
is a word that has a special meaning

546
00:28:19,080 --> 00:28:21,760
in that particular language.

547
00:28:21,760 --> 00:28:25,200
And I'll provide a link here for you that you can check out,

548
00:28:25,200 --> 00:28:30,200
but I'm gonna open it up and bring it to the screen here,

549
00:28:31,480 --> 00:28:33,960
increase the size a little bit so we can see better.

550
00:28:35,640 --> 00:28:37,040
Have a look at my screen here.

551
00:28:37,360 --> 00:28:39,720
And you can see this is part of the documentation

552
00:28:39,720 --> 00:28:41,240
for Dart programming language

553
00:28:41,240 --> 00:28:43,560
that explains what keywords are in Dart.

554
00:28:43,560 --> 00:28:44,800
And you can see there are some words

555
00:28:44,800 --> 00:28:47,840
that have special meaning like show, import,

556
00:28:47,840 --> 00:28:50,360
extends, async, await, break.

557
00:28:50,360 --> 00:28:52,520
So you can say that the language,

558
00:28:52,520 --> 00:28:56,360
the Dart language is made out of these keywords.

559
00:28:56,360 --> 00:28:57,240
That is pretty much it.

560
00:28:57,240 --> 00:28:59,400
It's just like series of keywords,

561
00:28:59,400 --> 00:29:01,600
like the things that you tell the language that,

562
00:29:01,600 --> 00:29:03,080
hey, I wanna do something.

563
00:29:03,080 --> 00:29:04,320
And then it says, okay, what do you wanna do?

564
00:29:04,320 --> 00:29:06,440
Then you say, okay, I wanna do this or this or this.

565
00:29:06,440 --> 00:29:10,280
So special words for the programming language

566
00:29:10,280 --> 00:29:12,920
so that it understands what you mean, basically.

567
00:29:15,240 --> 00:29:17,040
So that's for keywords.

568
00:29:18,080 --> 00:29:20,840
For now, we don't have to really go into so much more details

569
00:29:20,840 --> 00:29:22,240
about what a keyword is, but for now,

570
00:29:22,240 --> 00:29:25,160
just understand that a keyword is a special word

571
00:29:25,160 --> 00:29:28,400
in the programming language's brain,

572
00:29:28,400 --> 00:29:29,800
kind of so that you can talk to it.

573
00:29:29,800 --> 00:29:31,920
It's your interface with the programming language

574
00:29:31,920 --> 00:29:34,240
to make it understand what you wanna do, okay?

575
00:29:35,240 --> 00:29:37,120
And please check out the link that I provided here

576
00:29:37,120 --> 00:29:38,760
to understand more about keywords.

577
00:29:42,160 --> 00:29:44,040
Okay, so we've talked about keywords.

578
00:29:44,040 --> 00:29:45,480
I'm just gonna check it in my notes

579
00:29:45,480 --> 00:29:48,600
so that we know we've talked about it.

580
00:29:51,280 --> 00:29:54,480
Now, the next concept that we need to talk about

581
00:29:54,480 --> 00:29:56,800
are data types.

582
00:30:00,720 --> 00:30:03,000
If you, for instance, come from a design background,

583
00:30:03,000 --> 00:30:06,080
then you have different tools to work with.

584
00:30:06,080 --> 00:30:09,200
For instance, you may have, in your design system,

585
00:30:09,200 --> 00:30:11,800
whatever you're using, if you're using product from Adobe

586
00:30:11,800 --> 00:30:14,680
or if you're using, for instance, Figma or whatever,

587
00:30:14,680 --> 00:30:16,760
Visio or whatever tool you're using,

588
00:30:16,760 --> 00:30:19,440
then there's a set of components that you can work with.

589
00:30:19,440 --> 00:30:21,600
For instance, you can drag in a text field

590
00:30:21,600 --> 00:30:24,840
or you can drag in an image field, sorry, an image,

591
00:30:24,840 --> 00:30:29,840
or you can, for instance, assign a color to a text.

592
00:30:30,240 --> 00:30:35,240
So these are all things that you can do with that software.

593
00:30:36,200 --> 00:30:38,920
Now, a data type in a programming language,

594
00:30:38,920 --> 00:30:43,920
like Dart, is the type of a thing, for instance.

595
00:30:44,080 --> 00:30:47,480
You would say, I have some data in my mind.

596
00:30:47,480 --> 00:30:48,320
Okay, what is it?

597
00:30:48,320 --> 00:30:51,080
It's the first name of my friend.

598
00:30:51,080 --> 00:30:55,080
Okay, his name is Jack or whatever.

599
00:30:55,760 --> 00:30:58,440
And then you would say, okay, what type is Jack?

600
00:30:58,440 --> 00:30:59,280
Is it a number?

601
00:30:59,280 --> 00:31:03,440
No, is it like, is it a list of things?

602
00:31:03,440 --> 00:31:06,880
Well, yeah, it's a list of characters, yeah.

603
00:31:07,920 --> 00:31:10,880
Okay, then that is this data type.

604
00:31:12,000 --> 00:31:15,680
Or you could say, I'm thinking about my age.

605
00:31:15,680 --> 00:31:19,160
My age is, let's say I'm 37.

606
00:31:19,160 --> 00:31:20,800
Okay, what is 37?

607
00:31:20,800 --> 00:31:21,960
Is it a list of things?

608
00:31:21,960 --> 00:31:23,440
Well, yeah, kind of.

609
00:31:23,960 --> 00:31:27,560
It's a list of numbers, a list of digits,

610
00:31:27,560 --> 00:31:30,200
but it's also in itself a number.

611
00:31:30,200 --> 00:31:35,160
So then there has been this convention

612
00:31:35,160 --> 00:31:36,960
in different programming languages,

613
00:31:36,960 --> 00:31:38,880
and every programming language pretty much

614
00:31:38,880 --> 00:31:41,560
that you can use these days has this concept of data types.

615
00:31:41,560 --> 00:31:43,720
Data type is, as its name indicates,

616
00:31:43,720 --> 00:31:48,720
a specific name assigned to a series,

617
00:31:48,720 --> 00:31:53,720
to a series, a specific name assigned to a data

618
00:31:55,760 --> 00:31:59,760
that is bound to be of a specific type as well.

619
00:31:59,760 --> 00:32:01,600
So for instance, in Dart,

620
00:32:01,600 --> 00:32:04,600
you have data types called integers,

621
00:32:04,600 --> 00:32:07,400
or you have strings, or you have arrays and sets,

622
00:32:07,400 --> 00:32:08,600
which we'll talk about soon,

623
00:32:08,600 --> 00:32:11,200
but a data type just for now, no,

624
00:32:11,200 --> 00:32:14,120
it's just a stamp on a piece of data

625
00:32:14,120 --> 00:32:16,360
to say that you're of this specific type.

626
00:32:17,360 --> 00:32:21,280
So you could think of a data type as a nationality.

627
00:32:21,280 --> 00:32:23,520
You could say like every person coming from Sweden

628
00:32:23,520 --> 00:32:26,080
is Swedish, boom, that's his data type.

629
00:32:26,080 --> 00:32:28,800
So it's just a categorization of data

630
00:32:28,800 --> 00:32:30,720
based on their appearance

631
00:32:30,720 --> 00:32:33,280
or based on what they actually hold.

632
00:32:33,280 --> 00:32:35,640
So for instance, you can say,

633
00:32:35,640 --> 00:32:37,880
here's a university full of engineers,

634
00:32:37,880 --> 00:32:41,280
and these are software engineers,

635
00:32:41,280 --> 00:32:42,440
these are mechanical engineers,

636
00:32:42,440 --> 00:32:44,600
so the software engineer is a data type

637
00:32:44,600 --> 00:32:46,960
or is a person type or category type.

638
00:32:46,960 --> 00:32:51,280
So putting stamps on things based on the categorization

639
00:32:51,280 --> 00:32:52,880
is kind of what data type does.

640
00:32:52,880 --> 00:32:56,920
And in short, I mean, you just have to know

641
00:32:56,920 --> 00:32:58,520
that it's just a categorization of things

642
00:32:58,520 --> 00:33:00,560
based on what they hold.

643
00:33:00,560 --> 00:33:04,960
So, and there's a website that you can read

644
00:33:04,960 --> 00:33:08,400
about Dart data types, and it's right here.

645
00:33:08,400 --> 00:33:12,600
I don't know if I've provided it here on the link below,

646
00:33:12,640 --> 00:33:15,080
as you can see Dart Core Library HTML, so.

647
00:33:16,720 --> 00:33:20,440
And here you can read more about Dart data types,

648
00:33:21,560 --> 00:33:23,440
but we're not gonna go into so much detail

649
00:33:23,440 --> 00:33:24,560
about all of these right now.

650
00:33:24,560 --> 00:33:27,280
Just know that data type in Dart is,

651
00:33:27,280 --> 00:33:30,520
or any programming language basically that has data types

652
00:33:30,520 --> 00:33:32,840
is a categorization of data

653
00:33:32,840 --> 00:33:35,040
based on their appearance or contents.

654
00:33:37,560 --> 00:33:40,400
Now, let's talk a little about

655
00:33:40,400 --> 00:33:42,360
something called constants in Dart.

656
00:33:43,600 --> 00:33:47,800
A constant, usually in programming languages

657
00:33:47,800 --> 00:33:52,800
are values whose value cannot be changed.

658
00:33:53,920 --> 00:33:57,560
That's a little bit meta, but let's say for instance,

659
00:33:57,560 --> 00:34:02,560
the value of 10 is a number.

660
00:34:04,920 --> 00:34:06,440
It cannot be changed.

661
00:34:06,440 --> 00:34:08,920
10 is 10, and it will always be 10.

662
00:34:09,560 --> 00:34:13,800
Or your name, that is a constant.

663
00:34:13,800 --> 00:34:15,280
Although you can go and change it,

664
00:34:15,280 --> 00:34:17,560
but as long as that is your name, it is a constant.

665
00:34:17,560 --> 00:34:22,560
So, another example of a, I mean,

666
00:34:22,840 --> 00:34:24,960
there are so many values that can be constants,

667
00:34:24,960 --> 00:34:27,920
which will actually be quite abstract for me

668
00:34:27,920 --> 00:34:31,920
to explain right now, but just know that a constant

669
00:34:31,920 --> 00:34:35,800
is a value whose internal data cannot change

670
00:34:35,800 --> 00:34:40,400
during where you're writing your program,

671
00:34:40,400 --> 00:34:43,320
and also during when you're running your program.

672
00:34:43,320 --> 00:34:47,680
So, that is kind of what a constant is.

673
00:34:49,280 --> 00:34:53,320
But there is also this notion of a compile time constant

674
00:34:53,320 --> 00:34:54,720
and a runtime constant.

675
00:34:54,720 --> 00:34:57,760
And I mean, you don't have to know about

676
00:34:59,200 --> 00:35:01,560
like those different types of constants right now,

677
00:35:01,560 --> 00:35:04,520
just because like in Dart, a constant is a constant,

678
00:35:04,520 --> 00:35:08,520
whether it's runtime or compile time is a constant,

679
00:35:08,520 --> 00:35:10,240
it's just a constant, as you'll see soon.

680
00:35:10,240 --> 00:35:14,720
But I still believe that it's important to understand

681
00:35:14,720 --> 00:35:17,200
the difference between compile time and runtime.

682
00:35:19,000 --> 00:35:20,800
When you're talking about programming,

683
00:35:20,800 --> 00:35:22,440
when you're becoming a software developer,

684
00:35:22,440 --> 00:35:23,560
and I hope by the end of this course,

685
00:35:23,560 --> 00:35:25,040
you'll actually become a software developer

686
00:35:25,040 --> 00:35:28,240
if you're not already, that would be really amazing.

687
00:35:29,200 --> 00:35:33,600
But the notion of a compile time

688
00:35:34,240 --> 00:35:36,240
and runtime is very important to understand.

689
00:35:36,240 --> 00:35:40,640
And developers like to make a distinction

690
00:35:40,640 --> 00:35:43,480
between whether something has happened during compile time

691
00:35:43,480 --> 00:35:45,040
or something has happened during runtime.

692
00:35:45,040 --> 00:35:50,000
And compile time is, or before I explain compile time,

693
00:35:50,000 --> 00:35:51,360
maybe I should explain compile.

694
00:35:51,360 --> 00:35:53,480
Compile is where you take the program

695
00:35:53,480 --> 00:35:57,560
that you're writing here, and you tell the computer

696
00:35:57,560 --> 00:36:01,320
that I want you to package this up

697
00:36:01,320 --> 00:36:06,160
so that I can run it later on X and Y machine.

698
00:36:06,160 --> 00:36:10,000
So that process of packaging things up, simply said,

699
00:36:10,000 --> 00:36:13,880
is in very simple terms, is called compiling

700
00:36:13,880 --> 00:36:15,360
or a compilation, okay?

701
00:36:15,360 --> 00:36:20,360
So from where you start writing your program with a hand

702
00:36:20,400 --> 00:36:22,600
with your fingers until where you package it,

703
00:36:22,600 --> 00:36:25,720
you're pretty much just compiling it, okay?

704
00:36:25,720 --> 00:36:29,240
But when you run it, like we're running it at the moment

705
00:36:29,240 --> 00:36:34,240
on iOS simulator, that session from where you start

706
00:36:35,840 --> 00:36:38,680
outputting your program into this device

707
00:36:38,680 --> 00:36:42,440
and for it to run your program from that moment on,

708
00:36:42,440 --> 00:36:47,440
then the distinction separates into runtime.

709
00:36:47,440 --> 00:36:50,640
So you have then compile time and runtime,

710
00:36:50,640 --> 00:36:53,280
and a constant is a value that is the same

711
00:36:53,280 --> 00:36:55,320
during compile time and runtime.

712
00:36:55,320 --> 00:36:56,960
So its value doesn't change.

713
00:36:56,960 --> 00:37:00,280
So the value of 10 is 10 while you're writing your program

714
00:37:00,280 --> 00:37:04,920
and also stays the value of 10 while the program is running.

715
00:37:06,160 --> 00:37:11,160
So that is a very simple explanation of a constant.

716
00:37:12,280 --> 00:37:17,280
So now let's put constants and data types in practice.

717
00:37:20,000 --> 00:37:23,320
Now, in this project that was created for you

718
00:37:23,360 --> 00:37:28,360
by Flutter Create, in this line of code,

719
00:37:28,640 --> 00:37:30,760
as you can see, it says void main.

720
00:37:30,760 --> 00:37:32,400
We're not gonna talk about exactly what that is,

721
00:37:32,400 --> 00:37:34,520
but just press Enter at the end of it

722
00:37:34,520 --> 00:37:37,520
and just write final,

723
00:37:41,160 --> 00:37:42,760
and I'm gonna tell you what final is.

724
00:37:42,760 --> 00:37:47,760
So, and just saying name is equal to foo, okay?

725
00:37:48,600 --> 00:37:52,400
This is, there's lots going on in here

726
00:37:52,400 --> 00:37:56,400
and I'm gonna tell you what is actually happening here.

727
00:37:58,360 --> 00:38:01,080
But before we actually go through all these details,

728
00:38:01,080 --> 00:38:04,840
let's add something here called a constant.

729
00:38:04,840 --> 00:38:09,840
So I'm just gonna say const age is 27, or yeah, 27.

730
00:38:10,160 --> 00:38:12,560
As you can see, this is how you write code in Dart.

731
00:38:12,560 --> 00:38:15,560
You start by a keyword, usually,

732
00:38:15,560 --> 00:38:17,000
or a variable name or something

733
00:38:17,000 --> 00:38:18,760
as we're gonna talk about it.

734
00:38:18,760 --> 00:38:20,960
But const is a keyword, okay?

735
00:38:21,960 --> 00:38:26,280
And it tells Dart that what is following here is a name.

736
00:38:26,280 --> 00:38:29,160
Right after const, I'm gonna write some name.

737
00:38:29,160 --> 00:38:32,680
And in that name, then I'm gonna basically say,

738
00:38:32,680 --> 00:38:36,680
okay, I'm adding the value of 27 to this age.

739
00:38:38,160 --> 00:38:41,840
I'm sorry about this, my dog also barking a little bit.

740
00:38:41,840 --> 00:38:45,520
So what is happening here is that you're telling Dart

741
00:38:45,520 --> 00:38:50,520
that I'm putting the value of 27 into a constant called age.

742
00:38:51,760 --> 00:38:53,600
And you can refer to this age later.

743
00:38:53,600 --> 00:38:58,600
For instance, you can say then const age twice the age.

744
00:39:02,280 --> 00:39:05,480
You can say it's equal to age multiplied by two.

745
00:39:05,480 --> 00:39:09,000
And this is also a constant because at compile time,

746
00:39:09,000 --> 00:39:10,880
where Dart is basically trying to understand

747
00:39:10,880 --> 00:39:13,200
what you've written, it says, okay, you said 27,

748
00:39:13,200 --> 00:39:15,680
and then you're saying 27 is a constant.

749
00:39:15,680 --> 00:39:17,120
So its value is never gonna change.

750
00:39:17,120 --> 00:39:19,840
And if you tell me 27 multiplied by two,

751
00:39:19,840 --> 00:39:23,720
that also is a constant because both this side

752
00:39:23,720 --> 00:39:26,680
and this side are compile time constants.

753
00:39:28,360 --> 00:39:31,120
So that's what we mean by a constant.

754
00:39:31,120 --> 00:39:33,920
It's a value that is specified during compile time

755
00:39:33,920 --> 00:39:35,520
and it cannot change.

756
00:39:35,520 --> 00:39:40,120
So also it's important to notice that you're learning Dart

757
00:39:40,120 --> 00:39:45,120
and here is, sorry, I have to just tick some items

758
00:39:45,880 --> 00:39:47,800
in my notes to make sure that I've explained

759
00:39:47,800 --> 00:39:48,800
all of those to you.

760
00:39:50,600 --> 00:39:53,960
You can see here that every line of code in Dart

761
00:39:53,960 --> 00:39:56,080
needs to end with a semicolon.

762
00:39:56,080 --> 00:39:57,800
And that tells Dart that, yeah,

763
00:39:57,800 --> 00:39:59,760
you're starting a new line of code.

764
00:39:59,760 --> 00:40:02,400
Of course you can put two lines of code like this,

765
00:40:02,400 --> 00:40:04,640
but if you just press save,

766
00:40:04,640 --> 00:40:07,000
there is a program automatically running in the background

767
00:40:07,000 --> 00:40:10,240
which is called Dart FMT, which is the Dart formatter,

768
00:40:10,240 --> 00:40:12,360
which is gonna format your code and pre-ify it.

769
00:40:12,360 --> 00:40:15,360
So if I put a lot of spaces in here and just press save,

770
00:40:16,200 --> 00:40:19,400
you can see upon doing command S on Mac

771
00:40:19,400 --> 00:40:21,600
or control S on Linux and Windows,

772
00:40:21,600 --> 00:40:24,200
upon saving Dart formatter is gonna kick in

773
00:40:24,200 --> 00:40:25,760
and format the code for you.

774
00:40:25,760 --> 00:40:28,240
So just a little hint.

775
00:40:31,080 --> 00:40:33,480
Okay, those are constants.

776
00:40:33,480 --> 00:40:35,280
So we've talked about that.

777
00:40:35,280 --> 00:40:37,440
Now let's talk about variables a little bit.

778
00:40:38,640 --> 00:40:43,640
A variable is usually anything that contains

779
00:40:45,400 --> 00:40:48,640
a value that is not a constant.

780
00:40:48,640 --> 00:40:51,400
I mean, I think that's the simplest way

781
00:40:51,400 --> 00:40:53,560
of explaining what a variable is.

782
00:40:53,560 --> 00:40:56,960
A variable as a name indicates, it can vary.

783
00:40:56,960 --> 00:40:59,720
And that means that the data that it holds,

784
00:40:59,720 --> 00:41:02,000
it doesn't need to be constantly the same.

785
00:41:02,000 --> 00:41:04,720
It means that from where you start the program,

786
00:41:04,720 --> 00:41:07,800
you may actually assign a value to this variable

787
00:41:07,800 --> 00:41:09,960
and you may also change that variable

788
00:41:09,960 --> 00:41:11,960
depending on what type of variable it is.

789
00:41:12,960 --> 00:41:17,960
So there's also this notion of a final variable in Dart,

790
00:41:22,560 --> 00:41:23,600
which we'll talk about soon.

791
00:41:23,600 --> 00:41:26,360
So before we do that, let's go through this main function

792
00:41:26,360 --> 00:41:31,360
here and you could just say var name is foo.

793
00:41:33,560 --> 00:41:37,600
And here, what I've done is that I've created a variable

794
00:41:37,600 --> 00:41:42,600
indicated by the var keyword whose value is foo,

795
00:41:43,640 --> 00:41:45,600
or let's just say Alex,

796
00:41:47,560 --> 00:41:49,400
and set my column to end the line.

797
00:41:49,400 --> 00:41:51,360
Now, if I wanna change this value,

798
00:41:51,360 --> 00:41:56,360
all I could say here is to say name is equal to Anthony,

799
00:41:56,560 --> 00:41:57,400
or whatever.

800
00:41:58,800 --> 00:42:03,320
Now, this is basically us assigning a new value

801
00:42:03,320 --> 00:42:05,240
to this variable, saying Anthony.

802
00:42:07,600 --> 00:42:12,600
As I said, there is also the notion in Dart

803
00:42:13,520 --> 00:42:16,360
for a keyword called final.

804
00:42:16,360 --> 00:42:19,720
So you could just say final name equal to Alex.

805
00:42:19,720 --> 00:42:21,600
And it's a little bit strange

806
00:42:21,600 --> 00:42:24,640
because final is also a variable

807
00:42:24,640 --> 00:42:26,800
whose value cannot be changed.

808
00:42:26,800 --> 00:42:31,680
So you may be like, okay, what kind of a variable is that?

809
00:42:31,680 --> 00:42:33,760
How is that not a constant?

810
00:42:33,760 --> 00:42:35,320
Now, there's a little limitation

811
00:42:35,320 --> 00:42:40,240
because you may try to like say const name Alex.

812
00:42:41,240 --> 00:42:45,240
But this, as you will see later in the course,

813
00:42:48,160 --> 00:42:50,360
final gives you the flexibility

814
00:42:50,360 --> 00:42:54,120
to assign a value to your variable

815
00:42:54,120 --> 00:42:58,160
a little bit later maybe in the process of creating it,

816
00:42:58,160 --> 00:43:00,600
but it still indicates to Dart

817
00:43:00,600 --> 00:43:04,320
that the value of this variable is not gonna change

818
00:43:04,320 --> 00:43:06,760
after it has been assigned to.

819
00:43:06,760 --> 00:43:08,440
It's a little bit, yeah,

820
00:43:08,440 --> 00:43:11,480
it's just a little bit confusing maybe at the moment.

821
00:43:11,480 --> 00:43:16,080
So let's just say a variable is like a constant,

822
00:43:16,080 --> 00:43:18,120
but its value can be changed.

823
00:43:18,120 --> 00:43:19,720
Let's just leave it at that, okay?

824
00:43:19,720 --> 00:43:22,240
So that's it.

825
00:43:25,120 --> 00:43:30,120
Okay, now that we talked a little bit about variables,

826
00:43:30,320 --> 00:43:31,520
let's talk about functions.

827
00:43:31,520 --> 00:43:35,800
So I didn't specify exactly what this is

828
00:43:35,800 --> 00:43:38,920
just because we hadn't really come to functions,

829
00:43:38,920 --> 00:43:43,120
but a function is a body of code,

830
00:43:43,120 --> 00:43:45,960
is a grouping of a series of lines of code,

831
00:43:45,960 --> 00:43:49,520
one to N number, N lines of codes

832
00:43:49,520 --> 00:43:54,520
that is logically grouped.

833
00:43:55,120 --> 00:43:58,160
And it has a few properties.

834
00:43:58,160 --> 00:44:01,840
One is its return value here indicated by void.

835
00:44:03,120 --> 00:44:06,480
The other part of its information is its name

836
00:44:07,360 --> 00:44:11,040
followed by a pair of parenthesis,

837
00:44:11,040 --> 00:44:13,320
an open parenthesis and a closed parenthesis

838
00:44:14,200 --> 00:44:16,200
in which you will write something

839
00:44:16,200 --> 00:44:20,440
called the function arguments or parameters.

840
00:44:22,720 --> 00:44:27,720
It's pretty much just like imagine like a box

841
00:44:28,040 --> 00:44:29,720
where you input things in it.

842
00:44:29,720 --> 00:44:33,200
It does some processing and then it outputs that stuff,

843
00:44:33,200 --> 00:44:35,200
whatever it wants to output.

844
00:44:35,200 --> 00:44:38,400
So what we could do here is to create

845
00:44:38,400 --> 00:44:41,520
a very simple function for ourselves.

846
00:44:43,240 --> 00:44:46,840
As you saw before, or as I mentioned before,

847
00:44:47,760 --> 00:44:50,360
what you write for a function in the beginning

848
00:44:50,360 --> 00:44:51,560
is this data type.

849
00:44:51,560 --> 00:44:54,120
I mean, what data comes out of this function.

850
00:44:55,000 --> 00:45:00,000
And here, let's say we wanna add someone's first name

851
00:45:01,480 --> 00:45:04,080
and their last name with a space between it.

852
00:45:04,080 --> 00:45:08,560
So if I say foo as the first name and bar as the last name,

853
00:45:08,560 --> 00:45:11,080
then the full name should be foo bar

854
00:45:12,120 --> 00:45:13,840
and with a space in between.

855
00:45:13,840 --> 00:45:18,640
So as I said, then you need to specify the data type first,

856
00:45:18,640 --> 00:45:19,760
what you're gonna return.

857
00:45:19,760 --> 00:45:21,920
And if you looked at the documentation

858
00:45:21,920 --> 00:45:22,840
that I provided earlier,

859
00:45:22,840 --> 00:45:25,360
there's a data type called string,

860
00:45:25,360 --> 00:45:27,440
which is a series of characters.

861
00:45:27,440 --> 00:45:30,040
Basically it can be a name, a family name,

862
00:45:30,040 --> 00:45:32,760
the dress of your house or whatever.

863
00:45:32,760 --> 00:45:34,320
And that data type is string.

864
00:45:34,320 --> 00:45:36,960
Okay, so we say we're outputting string.

865
00:45:36,960 --> 00:45:40,760
And then you say, okay, what should this function be called?

866
00:45:40,760 --> 00:45:42,200
There's a convention in Dart

867
00:45:42,200 --> 00:45:46,160
that your functions should follow camel case

868
00:45:47,680 --> 00:45:48,920
naming convention, basically.

869
00:45:48,920 --> 00:45:52,480
Camel cases, if you, for instance, say in English,

870
00:45:52,480 --> 00:45:54,720
my function should be called get full name.

871
00:45:55,600 --> 00:45:56,440
That's my function name,

872
00:45:56,440 --> 00:45:59,840
but you cannot have spaces in your function names in Dart

873
00:45:59,840 --> 00:46:02,600
or pretty much every program language that I know about.

874
00:46:03,520 --> 00:46:06,040
Then remove all the spaces.

875
00:46:06,040 --> 00:46:09,000
And then except for the first word,

876
00:46:09,000 --> 00:46:14,000
change all the other words first letter to uppercase.

877
00:46:14,200 --> 00:46:16,080
So it was like this before,

878
00:46:16,080 --> 00:46:19,080
you could actually change them to uppercase first

879
00:46:19,080 --> 00:46:21,120
and then remove the spacing.

880
00:46:21,120 --> 00:46:24,360
So this is how you should write your function names.

881
00:46:24,360 --> 00:46:26,760
This is called camel case.

882
00:46:26,760 --> 00:46:28,080
Get full name, okay.

883
00:46:28,080 --> 00:46:30,840
And we said that we also have to open parenthesis.

884
00:46:32,320 --> 00:46:37,320
Now, let's just say then here,

885
00:46:37,960 --> 00:46:41,920
we need to specify some kind of function.

886
00:46:41,920 --> 00:46:44,400
We need to specify somehow

887
00:46:44,400 --> 00:46:47,520
that we're gonna accept the first name and the last name.

888
00:46:47,520 --> 00:46:52,320
Well, what kind of a data type does a first name have?

889
00:46:52,320 --> 00:46:54,280
Well, it's kind of like a string.

890
00:46:54,280 --> 00:46:55,120
It's a name.

891
00:46:55,120 --> 00:46:56,320
It's a series of characters.

892
00:46:56,320 --> 00:46:58,720
So let's just type string here.

893
00:46:58,720 --> 00:47:00,560
And then we wanna take a first name

894
00:47:00,560 --> 00:47:02,080
and we know about camel case now.

895
00:47:02,080 --> 00:47:06,040
So let's just say first name is uppercase

896
00:47:06,040 --> 00:47:07,840
and remove the spacing.

897
00:47:07,840 --> 00:47:10,160
So first name.

898
00:47:10,160 --> 00:47:11,800
Hey, that's the parameter.

899
00:47:12,680 --> 00:47:13,520
And then you wanna go to the next parameter.

900
00:47:13,520 --> 00:47:14,360
So just say comma.

901
00:47:16,720 --> 00:47:19,840
And then you wanna say string last name.

902
00:47:21,080 --> 00:47:23,360
You take the first name and the last name.

903
00:47:23,360 --> 00:47:25,880
Now, we also said that after the parenthesis,

904
00:47:25,880 --> 00:47:27,320
after you have accepted your parameters,

905
00:47:27,320 --> 00:47:30,760
you wanna go and create like your curly brackets here.

906
00:47:30,760 --> 00:47:33,480
I don't know actually if I mentioned that before,

907
00:47:33,480 --> 00:47:38,480
but every function is either its body or its logic.

908
00:47:38,560 --> 00:47:43,560
It's either followed by equal graded unsigned,

909
00:47:45,000 --> 00:47:46,600
which we're gonna talk about later

910
00:47:46,600 --> 00:47:50,200
or is by curly brackets.

911
00:47:50,200 --> 00:47:52,160
So we're just gonna use curly brackets.

912
00:47:53,480 --> 00:47:56,000
Now, what you wanna do here,

913
00:47:56,000 --> 00:47:57,240
you wanna take the first name

914
00:47:57,240 --> 00:47:59,480
and add a space to the first name

915
00:47:59,480 --> 00:48:01,080
and then follow that by the last name.

916
00:48:01,080 --> 00:48:03,760
So you need to tell Dart

917
00:48:03,760 --> 00:48:05,600
that that is the data you wanna return.

918
00:48:05,600 --> 00:48:10,600
And thankfully, there is a keyword called return

919
00:48:11,880 --> 00:48:12,720
that tells Dart

920
00:48:12,720 --> 00:48:14,440
that you wanna return some value from a function.

921
00:48:14,440 --> 00:48:16,640
So then what you're gonna do,

922
00:48:16,640 --> 00:48:19,240
you're gonna say, I wanna return what?

923
00:48:19,240 --> 00:48:23,760
The first name and I wanna add a space.

924
00:48:23,760 --> 00:48:28,760
Single quotes, the space, us, last name, right?

925
00:48:28,800 --> 00:48:32,840
So, I mean, this is a very simple implementation

926
00:48:32,840 --> 00:48:33,680
of get full name.

927
00:48:33,680 --> 00:48:38,120
So, however, there's actually a better way

928
00:48:38,120 --> 00:48:39,480
of doing this in Dart

929
00:48:39,480 --> 00:48:41,360
and I'll explain it to you right now.

930
00:48:41,360 --> 00:48:44,040
And that is by formatting your strings.

931
00:48:44,040 --> 00:48:49,040
So let's say that you want to basically tell Dart

932
00:48:50,560 --> 00:48:53,560
kind of like how your result looks like

933
00:48:53,560 --> 00:48:56,000
and you wanna ask Dart to insert the first name

934
00:48:56,040 --> 00:48:58,760
and last name into that result for you.

935
00:48:59,800 --> 00:49:01,360
And that's how you'll do it like this.

936
00:49:01,360 --> 00:49:03,760
You say, okay, I wanna return a string.

937
00:49:03,760 --> 00:49:06,480
You know, we could buy the single quotation marks here.

938
00:49:06,480 --> 00:49:08,040
And you can also do a string in Dart

939
00:49:08,040 --> 00:49:09,120
with double quotation marks,

940
00:49:09,120 --> 00:49:11,440
but I'm gonna explain that a little bit later.

941
00:49:12,920 --> 00:49:16,480
So let's say that you want to return

942
00:49:16,480 --> 00:49:17,720
the first name in here.

943
00:49:17,720 --> 00:49:19,200
But if you say first name,

944
00:49:21,040 --> 00:49:23,920
what's gonna happen here is that it's actually gonna return

945
00:49:24,400 --> 00:49:26,800
what's gonna happen here is that it's actually gonna take

946
00:49:26,800 --> 00:49:30,360
this first name as you've written in the string.

947
00:49:30,360 --> 00:49:32,560
So when you get this return value,

948
00:49:32,560 --> 00:49:35,040
it's actually gonna say first name,

949
00:49:35,040 --> 00:49:37,440
not the value that you pass to this.

950
00:49:37,440 --> 00:49:41,280
I know it may be a little bit difficult to understand

951
00:49:41,280 --> 00:49:43,080
when I say the value that you pass to this.

952
00:49:43,080 --> 00:49:44,240
What does it even mean?

953
00:49:45,240 --> 00:49:48,520
So let's put this actually to test first, okay?

954
00:49:48,520 --> 00:49:52,800
Go now into this build function,

955
00:49:52,800 --> 00:49:54,640
as you can see here on line 16.

956
00:49:54,640 --> 00:49:56,360
Now it may not be on line 16 for you,

957
00:49:56,360 --> 00:49:58,200
but for me it is at the moment on line 16.

958
00:49:58,200 --> 00:50:02,480
Just find this class my app stateless widget

959
00:50:02,480 --> 00:50:06,640
and find this widget build stuff that's written there.

960
00:50:06,640 --> 00:50:09,920
Create a new line here, okay?

961
00:50:09,920 --> 00:50:14,920
And just say full name or sorry, say print.

962
00:50:16,560 --> 00:50:20,040
As I'm writing it here, print.

963
00:50:20,040 --> 00:50:24,360
And then just say, what do we call our function?

964
00:50:24,360 --> 00:50:25,420
Get full name.

965
00:50:26,600 --> 00:50:28,120
See here?

966
00:50:28,120 --> 00:50:29,480
And it says, okay, what's the first name?

967
00:50:29,480 --> 00:50:34,560
I'll say quotation marks foo and the last name is bar

968
00:50:34,560 --> 00:50:37,360
and ended with a semicolon.

969
00:50:37,360 --> 00:50:39,960
So, and ignore this call for now.

970
00:50:39,960 --> 00:50:42,960
Sorry, this warning avoid print calls in production code.

971
00:50:42,960 --> 00:50:46,200
So, okay.

972
00:50:46,200 --> 00:50:48,880
So now we're calling that function.

973
00:50:49,800 --> 00:50:54,800
It's, I mean, it's called calling, it's called invoking.

974
00:50:54,800 --> 00:50:55,840
It may have other names,

975
00:50:55,840 --> 00:50:58,360
but usually programmers call this calling,

976
00:50:58,360 --> 00:50:59,960
call the function.

977
00:50:59,960 --> 00:51:02,040
And these are the parameters

978
00:51:02,040 --> 00:51:04,960
that you're passing to this function, okay?

979
00:51:04,960 --> 00:51:09,960
So, I mean, there are two words used for

980
00:51:11,240 --> 00:51:14,280
in the programming world to explain these parameters,

981
00:51:14,280 --> 00:51:15,520
like with name.

982
00:51:15,520 --> 00:51:18,040
And that is called a parameter or an argument.

983
00:51:18,040 --> 00:51:20,880
I mean, they're used interchangeably.

984
00:51:20,880 --> 00:51:24,200
The meaning of them is kind of like getting convoluted

985
00:51:24,200 --> 00:51:26,520
to the point that no one knows which one is which,

986
00:51:26,520 --> 00:51:28,960
but you could just use parameter or argument

987
00:51:28,960 --> 00:51:30,440
and everybody would understand what you're saying.

988
00:51:30,440 --> 00:51:32,240
So, but there's a little bit of a difference,

989
00:51:32,240 --> 00:51:34,480
which I'm not gonna go into the detail of,

990
00:51:34,480 --> 00:51:36,800
but if someone just says call this function

991
00:51:36,800 --> 00:51:38,480
with parameters or arguments,

992
00:51:38,480 --> 00:51:40,800
you know at least what you're doing, okay?

993
00:51:40,800 --> 00:51:41,640
Foobar.

994
00:51:42,560 --> 00:51:44,520
Now we're printing its value.

995
00:51:44,520 --> 00:51:47,000
All you have to do in order to execute this code

996
00:51:47,000 --> 00:51:52,000
is press command S and you will see the result outputted here.

997
00:51:52,320 --> 00:51:54,760
Now, what we did here,

998
00:51:58,160 --> 00:52:03,160
what we did here was a very key feature in Flutter

999
00:52:03,960 --> 00:52:06,640
called hot reload.

1000
00:52:06,640 --> 00:52:09,280
As you saw, I didn't execute my code again.

1001
00:52:09,280 --> 00:52:11,600
I didn't press like the run button again.

1002
00:52:11,600 --> 00:52:13,200
I just said save.

1003
00:52:13,200 --> 00:52:18,200
Now, saving in Flutter triggers an action called hot reload.

1004
00:52:18,240 --> 00:52:21,680
Hot reload in Flutter, it's a whole topic of its own,

1005
00:52:22,960 --> 00:52:25,760
which I'm not gonna go so much into detail of,

1006
00:52:25,760 --> 00:52:30,600
but what hot reload does really is it looks for changes

1007
00:52:34,040 --> 00:52:37,120
in your code hierarchy without complicating it too much.

1008
00:52:37,120 --> 00:52:41,200
I'm just trying to phrase my sentence right

1009
00:52:41,200 --> 00:52:46,200
so that it's not too complicated for this chapter.

1010
00:52:46,240 --> 00:52:48,480
It looks for changes that you made to the code

1011
00:52:48,480 --> 00:52:52,840
and executes only those changes, okay?

1012
00:52:53,880 --> 00:52:55,920
And in the process of executing those changes,

1013
00:52:55,920 --> 00:53:00,320
it might execute everything else that is in its path.

1014
00:53:00,320 --> 00:53:03,400
And by doing a save,

1015
00:53:03,400 --> 00:53:05,800
this function gets called somehow magically,

1016
00:53:05,800 --> 00:53:08,760
which I'm not gonna go into right now,

1017
00:53:08,760 --> 00:53:12,200
which in turn then calls or invokes our function

1018
00:53:12,200 --> 00:53:13,320
called get full name,

1019
00:53:13,320 --> 00:53:16,680
and its value will then be passed

1020
00:53:16,680 --> 00:53:20,200
into another function called print, okay?

1021
00:53:21,800 --> 00:53:23,520
I hope that that makes sense.

1022
00:53:25,240 --> 00:53:26,280
And as you can see,

1023
00:53:26,280 --> 00:53:28,000
the result isn't really what we expected.

1024
00:53:28,000 --> 00:53:29,960
It just says first name.

1025
00:53:29,960 --> 00:53:33,800
And that is because here we said return first name.

1026
00:53:33,800 --> 00:53:34,640
And as you can see,

1027
00:53:34,640 --> 00:53:37,240
if you put first name like this inside your string,

1028
00:53:37,280 --> 00:53:38,800
it becomes its own string.

1029
00:53:38,800 --> 00:53:41,760
It has nothing to do with this anymore.

1030
00:53:41,760 --> 00:53:44,440
If you remove these quotation marks, however,

1031
00:53:45,360 --> 00:53:48,680
then it says, oh, first name is this parameter.

1032
00:53:48,680 --> 00:53:50,560
You see, it actually, it highlights it.

1033
00:53:50,560 --> 00:53:53,360
So then if I press Command S on Mac

1034
00:53:53,360 --> 00:53:55,400
or Control S on Linux on Windows,

1035
00:53:55,400 --> 00:53:59,160
you will see full being printed to the screen, okay?

1036
00:54:00,040 --> 00:54:05,040
You can also say last name here and it will say bar, right?

1037
00:54:05,240 --> 00:54:08,440
And also notice that when I'm changing these things,

1038
00:54:08,440 --> 00:54:10,880
it's not executing immediately automatically

1039
00:54:10,880 --> 00:54:11,920
on pressing Command S.

1040
00:54:11,920 --> 00:54:13,640
So just keep that in mind, please.

1041
00:54:17,720 --> 00:54:20,080
So that's for a function.

1042
00:54:20,080 --> 00:54:24,120
But before we move on explaining the basics of a function,

1043
00:54:24,120 --> 00:54:29,120
I wanna also explain a little bit about string formatting.

1044
00:54:31,760 --> 00:54:33,960
And that is we said that we're gonna put first name

1045
00:54:33,960 --> 00:54:36,080
and a last name because this is what we did

1046
00:54:36,080 --> 00:54:38,800
in the beginning, first name plus space plus last name.

1047
00:54:38,800 --> 00:54:40,720
And this wasn't so pretty because it's like

1048
00:54:40,720 --> 00:54:43,440
doing string concatenation in a very old fashioned manner.

1049
00:54:43,440 --> 00:54:46,600
In a very old fashioned manner, yeah.

1050
00:54:46,600 --> 00:54:49,320
I think I said it right the first time.

1051
00:54:49,320 --> 00:54:54,000
But what you wanna do here is to use

1052
00:54:54,000 --> 00:54:56,760
Dart's built-in formatting capabilities.

1053
00:54:56,760 --> 00:54:58,480
And you do that by first saying that, okay,

1054
00:54:58,480 --> 00:55:00,920
I wanna return some sort of a string.

1055
00:55:00,920 --> 00:55:05,560
And I wanna have first name, space, last name.

1056
00:55:05,560 --> 00:55:09,840
But as you saw this earlier, if I Command S or Control S,

1057
00:55:09,840 --> 00:55:13,800
it just returns those strings exactly as I've written them,

1058
00:55:13,800 --> 00:55:15,560
not the parameters.

1059
00:55:15,560 --> 00:55:18,720
What you can do is just to put a dollar before them.

1060
00:55:18,720 --> 00:55:20,480
And you can see their coloring now changes

1061
00:55:20,480 --> 00:55:21,840
depending on a theme that you're using

1062
00:55:21,840 --> 00:55:24,240
or depending on the text editor that you're using.

1063
00:55:24,240 --> 00:55:26,800
If you're using Android Studio,

1064
00:55:26,800 --> 00:55:28,600
it may not color it the same way.

1065
00:55:28,600 --> 00:55:30,040
Or if you're using Visual Studio Code

1066
00:55:30,040 --> 00:55:32,840
with a different theme on a different maybe platform,

1067
00:55:32,840 --> 00:55:34,240
it may not even change the color.

1068
00:55:34,240 --> 00:55:36,880
But for me, at least you can see that the colors change.

1069
00:55:36,880 --> 00:55:41,640
So as to indicate that now I'm not actually returning

1070
00:55:41,640 --> 00:55:44,600
the string exactly as you wrote,

1071
00:55:44,600 --> 00:55:48,360
except returning the parameters that are here.

1072
00:55:49,360 --> 00:55:50,840
So Command S.

1073
00:55:50,840 --> 00:55:54,680
And now you can see that the result is full bar.

1074
00:55:56,040 --> 00:55:57,800
Okay.

1075
00:55:57,800 --> 00:56:02,800
So that is the basics of functions in Dart.

1076
00:56:03,760 --> 00:56:06,280
Before we move on from functions,

1077
00:56:06,280 --> 00:56:08,360
I also wanna explain quickly that

1078
00:56:09,800 --> 00:56:12,880
a function doesn't necessarily have to return anything.

1079
00:56:12,880 --> 00:56:16,840
And that means that you may have a function here

1080
00:56:16,840 --> 00:56:20,560
that wants to just print some data to the screen

1081
00:56:20,560 --> 00:56:22,680
or to here to the debug console.

1082
00:56:22,680 --> 00:56:25,560
And you could just call it print my name

1083
00:56:26,520 --> 00:56:30,120
and parenthesis and curly brackets.

1084
00:56:30,120 --> 00:56:32,960
And as you can see here,

1085
00:56:32,960 --> 00:56:34,760
I can just write the name of the function

1086
00:56:34,760 --> 00:56:38,240
without any data type to be returned.

1087
00:56:38,240 --> 00:56:39,840
But it's a little bit of a convention

1088
00:56:39,840 --> 00:56:43,840
that you actually tell Dart that this is a void function.

1089
00:56:43,840 --> 00:56:46,320
Meaning void is a keyword,

1090
00:56:46,320 --> 00:56:47,840
as we talked about it earlier

1091
00:56:47,840 --> 00:56:50,600
in the beginning of this chapter.

1092
00:56:51,600 --> 00:56:54,240
Void is a keyword telling Dart

1093
00:56:54,240 --> 00:56:56,840
that this is a function that doesn't return anything.

1094
00:56:56,840 --> 00:56:58,360
And as you can see,

1095
00:56:58,360 --> 00:57:00,360
Dart is completely fine with this function

1096
00:57:00,360 --> 00:57:01,680
being completely empty.

1097
00:57:01,680 --> 00:57:03,080
Meaning that, well, yeah,

1098
00:57:03,080 --> 00:57:05,120
you said you are not returning anything.

1099
00:57:05,120 --> 00:57:07,280
You're probably just gonna do some stuff in here.

1100
00:57:07,280 --> 00:57:09,760
So I'm not gonna bother you with some errors saying that,

1101
00:57:09,760 --> 00:57:11,280
oh, you forgot to do something.

1102
00:57:12,200 --> 00:57:14,800
But as soon as you change the return value

1103
00:57:14,800 --> 00:57:16,920
or the return data type of your function

1104
00:57:16,920 --> 00:57:18,440
to, for instance, string,

1105
00:57:19,400 --> 00:57:22,920
then you'll get an error saying that,

1106
00:57:22,920 --> 00:57:25,120
oh, yeah, the body might complete normally

1107
00:57:25,120 --> 00:57:27,240
causing null to be returned, blah, blah.

1108
00:57:27,240 --> 00:57:28,640
You don't have to know exactly what that means.

1109
00:57:28,640 --> 00:57:31,000
But essentially what that means

1110
00:57:31,000 --> 00:57:34,440
is you're telling Dart that you're returning a string,

1111
00:57:34,440 --> 00:57:36,160
but you're not returning anything.

1112
00:57:36,160 --> 00:57:41,160
It's literally looking for the return keyword saying that,

1113
00:57:41,240 --> 00:57:42,520
oh, you missed it.

1114
00:57:42,520 --> 00:57:45,120
So you could silence that error

1115
00:57:45,120 --> 00:57:49,400
by saying return an empty string, a semi-call.

1116
00:57:51,800 --> 00:57:56,800
So I think this pretty much explains the basics

1117
00:57:56,880 --> 00:58:01,480
of functions, to be honest with you.

1118
00:58:02,920 --> 00:58:04,720
There's lots more to learn about functions.

1119
00:58:04,720 --> 00:58:05,560
And as I said,

1120
00:58:05,560 --> 00:58:10,080
functions can also be written using this syntax.

1121
00:58:10,080 --> 00:58:13,000
And this syntax is used

1122
00:58:13,000 --> 00:58:15,120
when your function is very simple

1123
00:58:15,120 --> 00:58:18,480
or in that it doesn't need to break

1124
00:58:18,480 --> 00:58:22,520
into different lines of code by a semi-colon.

1125
00:58:22,520 --> 00:58:26,400
So a function who has a very simple logic,

1126
00:58:26,400 --> 00:58:30,920
you can just skip writing these square brackets,

1127
00:58:30,920 --> 00:58:33,480
no, curly brackets, sorry.

1128
00:58:33,480 --> 00:58:37,360
And you can just say, you see, I will remove this,

1129
00:58:38,360 --> 00:58:42,480
put equal sign, greater than sign,

1130
00:58:42,480 --> 00:58:45,360
remove the closing curly bracket,

1131
00:58:45,360 --> 00:58:48,680
and then you can remove the return statement, and that's it.

1132
00:58:49,720 --> 00:58:53,520
That is a short hand, it's a function shorthand in Dart.

1133
00:58:53,520 --> 00:58:58,200
And you could use it simply to simplify kind of your code.

1134
00:58:58,200 --> 00:58:59,320
Some people may like it,

1135
00:58:59,320 --> 00:59:02,680
some people kind of may be against it,

1136
00:59:02,680 --> 00:59:07,440
just because it kind of splits your code

1137
00:59:07,440 --> 00:59:08,760
into two different styles.

1138
00:59:08,760 --> 00:59:11,200
Some functions are with curly brackets,

1139
00:59:11,200 --> 00:59:13,880
some functions are with this pointer thingy.

1140
00:59:13,880 --> 00:59:18,720
And kind of depends on you and your team, to be honest.

1141
00:59:20,080 --> 00:59:23,360
I know usually from my experience,

1142
00:59:23,360 --> 00:59:26,720
usually we software developers like to follow a convention.

1143
00:59:26,720 --> 00:59:31,720
So in one project, the developers may decide,

1144
00:59:32,480 --> 00:59:34,120
okay, we're just gonna go with this convention.

1145
00:59:34,120 --> 00:59:39,120
And since using curly brackets engulfs the ability

1146
00:59:40,760 --> 00:59:45,520
to have both complicated and simple return statements

1147
00:59:45,520 --> 00:59:49,720
in a function, it's actually preferred as a convention

1148
00:59:49,720 --> 00:59:52,480
than using this syntax simply because this syntax

1149
00:59:52,480 --> 00:59:54,280
doesn't allow you to split your code

1150
00:59:54,280 --> 00:59:55,800
into separate lines of code.

1151
00:59:55,800 --> 00:59:58,080
It has to all be in one statement.

1152
00:59:58,080 --> 01:00:00,160
So if that makes any sense.

