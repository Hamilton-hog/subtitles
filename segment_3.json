{"text": " So, I think that's it for functions. Now we've talked about functions, arguments, return values. We talked about variables, constants, data types, and keywords in Dart. These are such important parts of learning how to program with Dart and Flutter that I think you need to spend some time and experiment with them. Do some experimentations on your own. Don't take just the first name and last name. Just take, for instance, someone's address, someone's age, play around a little bit with different data types like integers, different numbers. Have a look at the link that I provided earlier, which was here. I'll bring it up again so you can see that. Have a look at this link and have a look at the different examples of different data types. Because in the upcoming chapters and in the rest of this course, we're going to play around with a lot of different types of data types. I think it's important that you have a look a little bit at the documentation as well. Let's leave this chapter at this point, and then in the next chapter, we're going to talk a lot more about more advanced Dart programming language features. Thank you for joining me for this chapter and see you in the next one. Hello, everyone, and welcome to chapter four of this Flutter course. In the previous chapter, chapter three, we talked about keywords, data types, constants, variables, and some basics of functions. In this chapter, we are going to, as you can see on the captions here, we're going to focus on control statements and collections. Now, I'm assuming you're following these chapters chronologically so that you're going one by one. I'm assuming then that you have your Dart project set up and that you've got some sort of a simulator or emulator running. Without further ado, let's have a look at... I'm actually going to bring up the captions here, and then I'm going to put my face at the bottom there and bring up our project that we created in the previous chapter up here. This is running at the moment. If I do a command S or a control S on Linux and Windows, then as you can see here, there is a run button. Then it's just going to do a hot reload, which in turn calls this build function, which we don't yet know really how it works because I haven't really explained it. But what we did, we just called a print function here and then our get full name function. What I'm going to do here is let's remove this code from the build, and let's remove everything that we wrote here as well. Keep the main function, as you can see here, and then keep your stateless widget, which we're going to talk about later. Instead, go and create a new function that is called void test. And then in the build function, just say test. Just like that. The purpose is that in this function, we're going to write most of the code in this chapter. We are going to basically test some code. That's the purpose of this function. Let's talk about if and else. If and else are control statements in most programming languages that allow you to branch your code based on a condition. So if we, for instance, in here create a final variable whose value cannot be changed, if you remember from the previous chapter, whose value cannot be changed after it's been assigned to, let's say final name is foo, and end it with a semicolon. Now, an if statement basically allows you to check the value or a condition to be of a certain value or to be true or false, and then it allows you to execute some code, and then you can also append an else statement to it, which gets executed if the code or if that condition is not met. I'm going to show you how that is written. The syntax for an if statement is just if, and if is a keyword. So you would say if, and then you would open and close parentheses, and then you would put curly brackets like this. That's the syntax of if. And in the parentheses, you would put your condition. So I would say in this case if name, and I would like to, for instance, check if name is foo. Now, we haven't come to operators yet. We're going to talk about operators actually soon. But this is, as you can see here, we're saying final name equal to foo. This is kind of like an assignment operation, and that is an operator. In Dart, it's called an operator. So there is also, and since this is an assignment, we don't want to actually assign anything to name. We want to check if it's of a certain value, and that is with this conditional operator. Equal, equal. And then you would just say, okay, if it's foo, then, for instance, print. Yes, this is foo. And then a semicolon to end it. However, if this condition is not met, you may want to execute another piece of code, and then you can just do else. Like that. Then you would just say, no, this is not foo. And a semicolon. So I'm just going to do command S, and you can see the value or the string, yes, this is foo printed to the screen, or to the terminal here, or to the debug console. You can have multiple statements in here. So you can have more print statements in here. You can just do anything you want basically in here. And the same goes for else. Now, there is a possibility to write if statements kind of without the curly brackets, but you don't see them that often, and I recommend that you actually always try to, as a convention, do with the curly brackets if you can. However, it is possible that inside a code base that you will work on with your colleagues, it is decided that it's okay to have if statements without curly brackets where they are very simple and one-liners, basically. So let me show you an example of that. You could just say, if name is foo, and you would just say print, yes, this is foo. And this is completely accepted as well, because it's a one-liner. But if you then say, okay, I want to have another line, print hello world, you can see it goes to the next line, meaning that this line right here will be executed no matter your condition up there. So this is completely detached from your if statement up here. I just realized that it is quite important for me to be able to show line numbers. And by default, your editor probably has line numbers enabled. I usually disable line numbers when I'm working myself, basically. But when talking about code with other people, it's quite useful to have line numbers, because I can then tell you, oh, look at line nine or look at line 10. Okay. So that's the basic of if and else. Now, you can also have if right after else. So an example of that is, for instance, to say if name is foo, and then you do some code, all right? You say print, yes, it is foo. Not food. After the curly bracket, then you would say else. And then you can then say another if, else if. All right? And then after if comes the parenthesis and a curly bracket, if you remember from the if before. It is the exact same syntax as it is here. So there's pretty much no difference. You can see if and then if. And then you put your condition in here. You would just say if name. And then you may just want to say is not. And that's another operator. It's basically is a not operator. So it's checking to make sure that this name is not of the value that you provide to the right-hand side. And then you can say bar. And print. This value is not bar. Else. And then you can wrap it up, and you can say print. I don't know what this is. Now, I'm so glad I actually accidentally ran into this issue. As you can see now, the editor is kind of going crazy, and Dart's not understanding and Dart's not understanding what this statement is. And as we talked about it previously, strings in Dart are preferred to have to be kind of like created with single codes. However, if your string in itself contains a single code, for instance, in this case, the word don't contains a single code, then Dart kind of gets confused. Like, okay, does the string end here? You can see up until this point, it's green. So it's thinking, oh, the string ends here, but what is all of this then? That follows. If you have that problem, there are two ways of fixing that. Either you escape your single code, and that is a software kind of development lingo. Escape. If you hear that, it pretty much just means that you are kind of wrapping it in a way that Dart understands that you don't mean it literally. You don't mean that I want to end my string here, except that this needs to be escaped and put in the string as its own value. Basically, it's kind of difficult to explain, but I think you know what I mean. So that's one way of doing it. It's a little bit dirty. So in case you run into this issue, it's best to actually wrap your entire string in double quotes. And this way, then Dart understands that whatever comes in here is okay. Like a single code is completely okay. Unless you actually want to have a double quotes in your string that is enclosed with double quotes again. So you'll see if I put a double quote here, then Dart goes crazy. So you can escape it with a backslash like that. So if you have single quotes and double quotes in your string, then you will have to kind of pick a convention. Either you enclose the entire string in single quotes and escape your single quotes inside that string and let the double quotes live, or you enclose your entire string in double quotes and then you will escape your double quotes in the string. I hope that makes sense. So that is if and else in a nutshell. But before I move on, I kind of want to explain an important concept here in that when Dart executes this code, it kind of goes by line by line. So it starts with line seven, the execution of this test function. Then it comes here and it says, okay, name is foo, all right. And it's actually saying that we prefer const. So let me change that to const. And it says, okay, if name is foo, all right, then it comes over here. But let's just change that to foo with triple o. Actually, yeah, no, let's not do that. Let's keep it as foo. So it says if name is foo. Then it says, yeah, that's true. And then it goes here. However, as you can see, the line number 11 also says if name is not bar, then it should execute this as well. And you can see that foo is not bar. So this condition is also true. However, this will never be executed. And that is because when Dart goes inside these curly brackets, then it says, okay, I did what I had to do. I did my print statement. The rest I ignore. So an if statement is kind of like, it puts a stop. When it falls into one of these if statements, it kind of says, okay, I did my job in this entire if else block, then I will execute the code after that. So if I clear the console here and press command S, you can see it only says yes, it is foo. It doesn't come here. However, if you change this condition so that the Dart compiler or basically the execution of the program doesn't fall into line number 10, it will eventually fall to line number 12. So you can see it says this value is not bar. So when you're writing your if statement and else statements, just be careful with that. Just know that it's kind of like as soon as the code jumps into one of those branches, it doesn't go to the rest of the branches and checks them basically. All right. Okay. That was for if and else. Now let me check that in my notes that we've talked about that. What we need to do now is to talk about operators. Operators, there are three different types of operators. There are prefix operators, infix operators, and suffix operators. And I will explain them to you how they work. I think to explain operators probably is best that we talk about numbers. So let's go in this test function and delete in this test function and delete everything that we've written here. And let me just say final age is 20. All right. So now we created a variable whose value cannot be changed after it's been assigned to because we create as a final a variable whose value is 20. All right. Now if you want to calculate half of this value, how would you do that? Well, there is an operator for that and that is a division operator. So you would just say, for instance, final half of age. As you can see, we're using camel case as I explained in the previous chapter. An easy way to do camel case is to say half of age is writing in English, change the first letter of like this here. Change the first letter of all the words except for the first word to uppercase and then remove all the spaces. That's camel case. So half of age is age. And then there is a great operator in Dart called a division operator. And then you would say two. All right. And then you could just say print half of age. So command S. And that says 10. All right. So that's the division operator. And then you will have, let's say, final double the age. And then we will say age multiplied by two. It's kind of like a star. That is an operator. And you can see these both operators, this one, the division and the multiplication, multiplication, it's a bit difficult to say, operators are infix operators. And an infix operator is an operator that has two parameters, one to its right and one to its left. I don't know how you can actually, yeah, one to each side. I don't know if my video is mirrored. So if my right hand is actually right hand on your side as well. So I don't know. Yes, it is probably. So these are infix operators when they have two values, one to each side. However, they're also prefix operators. And an example of that is, for instance, if I said final, age minus one. Actually, we change this to var. I'll explain soon why. And if we said minus, minus age, now, this is an example of a prefix operator. And a prefix operator is an operator that it comes before whatever it has to do its work on. And in this case, this minus, minus operator, what it does is that it takes the value that comes after it, it decreases that value by one, and then it returns its result back to the left-hand side. So in this case, the interpreter comes here and says, okay, you want to calculate something. Okay. It's equal to, oh, a prefix operator that takes a variable here. And it says, okay, what is age? It's 20. Minus one is 19. Puts it in here. And it also puts that 19 in an age. So I think so, at least. So if we say print age and print age minus one, now both should kind of be 19. And you can see it says twice. You see two, 19. So that kind of means it's twice. So Flutter has this great ability not to duplicate, basically, log statements or print statements. So we have, I mean, there are some really great operators in Dart. And that is the plus operator. And then you have the minus division multiplication. And then you have the logical operators to check if a value from the left is equal to the value to the right. So these are the basics of the operators in Dart. So you don't have to know so much more about these for now. I would say you can get really far with these. And a lot of these operators actually work not only on numbers, but also on strings. And for instance, this is one of the cool features of Dart, which I absolutely love. I think it was just such a great idea for them to implement this. If you're not coming from a software development background, you may not know this. But if you're coming, for instance, from a design background, also, you would notice that sometimes when you're creating designs or any screen and you want to show that design to someone, like a product owner, you want to actually populate the text inside your design with some lorem ipsum. And lorem ipsum basically has a huge history of where it comes from. But it's usually some sort of a dummy text that you want to place inside your design so that you can display and show it to someone. And a lot of developers, like in many languages, when they want to display some text and they don't know what to say, like, we're just testing stuff. I just want to display some text. They go and grab lorem ipsum and then put it in their code. But Dart has gone to the next step and said, OK, we don't need that. So what you can do, you can say, for instance, name is foo. That's a string name. But you can say name times 20 is name times 20. You can literally say multiply a string by 20. And what that does is that it says foo 20 times. So if I say print name times 20, you can see it says foo 20 times. So it's a great feature. You can say foo, bar, baz, and then just say times 100. And yeah, it just, that's it, copies it for you 100 times in names time 100, for instance. So that is a, that is shortly said, that is the basics of operators in Dart. OK, I'm going to delete that code. I'm going to mark in my notes that we've talked about that. Now, I'm just going to quickly also mention that we can also create custom operators, to be honest with you. And I don't think it is completely all right right now to talk about custom operators. I think it's kind of like a topic to talk about later. So I actually just moved it in my notes that we don't need to talk about it right now because we have to know a little bit about classes and objects so that we can, after we've created our own class, then we can create custom operators as well. So I don't think it's completely appropriate to talk about right now. But just know that in the future, you can also create your own operators and then like, or you can also override like different operators and how they work with different objects. So it is really fun. But that's that. Let's just leave operators to that for now. Now, the next topic that I wanted to talk about is lists. And lists in Dart is a series of things that are similar to each other and they are placed inside a list, as you would have, for instance, on a piece of paper and you could write your shopping list or like a Christmas shopping list or whatever, and it's numbered. So these are called lists in Dart. So for instance, if you say foo, and then bar, and then baz. As you can see, Dart doesn't like this syntax at the moment. It says, okay, what are these? Like, what is this comma here? The way to tell Dart that this is a list of things that are like in place one, two, three is by placing them inside square brackets and then a semicolon, of course. Now, as I've talked about it before, just now, actually, lists have indexes in that they all have their own placement inside the list. All these objects, as we call them, they have their placements inside the list. And you may think that object number one is foo and then object number two is bar and number three is baz. And that's correct. But indexes in, I mean, all the programming languages that I've worked with, C++, C, Rust, Dart, Swift, JavaScript, they pretty much all start at the index of zero. And that is so important to understand because like the placement of this object called foo inside this list is not one. Its index is zero. And that is why lists are called zero-based and their indexes are called zero-based indexes. So you've got to be careful with that. And we're going to talk about indexes soon, actually. So let's just say final names is that. Now, if I want to extract foo from here, I'm just going to say final foo is names at the index of zero, right? And I'm just going to print it. I'm just going to say print foo. And you'll see foo printed here. Now, if I say I want to get baz, then I'm going to say print, sorry, index of three. And you'll see, oh, sorry, index of three. And you'll see, oh, sorry, index of two, because it's the third item. But since indexes are zero-based, then it's index of two. I made the mistake myself. So command S and you'll get baz. And I actually want to go back to this three and then command S. So you can see what happened here. You'll see you'll get something called a range error, which is an exception, an exception in Dart and many other programming languages is when things go wrong so that the language doesn't really know anymore what you mean. And in this case, you can see this through an exception at the language level or at the library's level where it says, there are no four items in this array or in this list, because the index of three indicates four items. Item number one in the list has the index of zero, and then items. Item number two has the index of one. Item number three has the index of two. And item number four has the index of three. And there are only three objects in this array or in this list. So index zero, one, two. So that's it. And index of number three is non-existent. And that is why we're getting this invalid value, not in inclusive range zero to two. So that's how you access items inside a list. And this is how you actually create a list, okay? So you say list of items, which is full bar baz. So you can also, there are some convenient properties on lists that you can, for instance, say, final length. So if you want to know how many items are in this list, you can also say names, dot, and then you would say length. And we're going to talk a little bit about dot now as well, because I think it's so important to understand what dot is. Dot in Dart and in many other programming languages is a way to drill in to something to extract something else from it. And in this case, names is a list. And all lists in Dart have something called properties. Length is a property of the list data type in Dart. And that means every list in Dart has a property called length that is automatically calculated for you. You don't have to do anything. As you enter values in this list, this length is going to then return the right value to you. So I'm just going to talk about that a little bit more. So I'm just going to say print names length. It's going to say, you'll see here, let me scroll a little bit, it'll say three, three items in this array. I'm going to change the names list to var so that we can actually change its contents and mutate it. I just want to add a new name to this names. And I will just say add. It's a function, as you can see, because it has parentheses right after it. And I will say my name. And then semicolon to end the statement. Now, if I say print names length right after this statement, you guessed it. Oh, I can see, actually, you may not see all the print statements because this text is right there. So let me resize my Visual Studio code a little bit so you can see things a little bit better. Sorry about that. So now we have names length here. And you can see the second time around it said four. So when you say dot after the name of a variable, and that means it can be a constant, a variable, or a final variable, after you put dot after its name, you're accessing different properties or different functions inside that thing. So it's kind of like an accessor. It allows you to drill down inside an object and grab things out of it, or maybe make that object do something for you. So I think that's good enough, to be honest with you, about lists. I don't want to go too much into details and scare people about all the different things you can do with lists. But there is great documentation on Dart's own website. All you have to do is just to Google or duck, duck, go, or whatever you want to use, bing your way through and just search for dart arrays documentation, or just dart arrays, and then you will find lots of information about it. Or sorry, dart lists, because in dart they're actually called lists. In some other programming languages they are called arrays, but those names can be used interchangeably, to be honest with you. Lists and arrays are kind of like almost the same thing. So all right, that was lists in dart. I'm going to take it in my notes so that we know we've talked about it. The next topic that I want to talk about in this video are things called sets. All right, and as you can see in the caption I've written here is a list of unique things. Whereas lists were lists of homogeneous things, sets are lists of unique things. So I think the best way actually to explain sets is just to jump right into it. So the syntax for set is with a curly bracket. Actually, I think it is. Yeah, I think so. So let's say final names, and I'm just going to say curly bracket foo, and then end that. Okay, just like that. Now if I type names here, you will see that the suggestion provided here, or the information provided by Visual Studio Code says names is a set of string. We talked about this in the previous chapter, that when I say final names, or final something, name, for instance, is foo, I'm kind of telling Dart to create a variable whose reference name is name, and its value is foo, and Dart automatically understand that the data type of this value is string, because its data is string. So you don't have to say final string is string. Although you could do that, but let's change this to const as well. You don't have to actually say this is a string, because Dart understands it automatically. So you just remove the data type if that's what you want to do, which is what I actually prefer to do instead of being too verbose, unless you have a really good reason to provide the data type. Anyways, let's go back to sets. So we were here. And in the same way that we created a string, and then Dart automatically understood the data type, by putting curly brackets here, or curly braces here, and putting some data inside that, Dart automatically understand, okay, this is a set of some stuff in here, and this stuff for now just looks like a string. So if I say foo bar as, Dart says, okay, this is fine. But if I go in here and I say foo again, you can see I automatically get an error message saying two elements in a constant set literal cannot be equal, because it understands that this foo has already repeated there. Okay. So let's remove foo from here, and let's do an experiment. Let's change these names to var so that we can actually change its contents. Then go to the next line and say names, if I can spell, and say add, and then say foo again. And then say names, add var, and then set add vas, or sorry, names, add vas. And then we'll say print names. Okay. And I'm going to clear the logs with this button right here, and then I'm going to press command S. And you can see that the set is still foo bar vas. Nothing changed really there. That is one of the greatest properties of lists, of sets in Dart, and in pretty much every other programming language that supports sets, and that's sets ensure always that their data is not duplicated. And this is, I mean, there's lots of magic happening in the background that I haven't really talked about. I mean, for instance, the question that you may ask, how does Dart know foo is the same as foo? Does it compare them? Yes, it kind of does, actually. It's internally doing a comparison between these things, but we never told it how that comparison should work. And that is because, if you remember from operators, when we talked about it, the string, now we haven't talked about classes. Well, I'm just going to say strings in Dart already know how they should be compared with other strings. So, they kind of have this logic of hash codes and comparison operators that they know exactly like, okay, given this string, am I the same as that? Sorry, given what I am and this new thing that you're providing me, I'm foo and you're saying foo, am I the same as foo? And then it says yes or no. So, that is what sets are doing internally, but we don't actually see that. So, just know for now that sets in Dart allow you to create unique list of things, okay? And then you may also be a little bit tempted to go and say, okay, I have things here. Let's say const things is equal to foo and then you say one. And this will also work. And that is because Dart has the concept of object as well. You can see, you'll see things and it'll say, oh, now it's a set of object. We haven't talked about objects yet. And if I look at my notes, I can see that we're going to talk about objects in chapter six and we're right now in chapter four. So, we haven't really gotten to that point to talk about objects. And I don't want to really scare you about objects and what they actually are, but just know that there is a hierarchy of data types. So, you have object and then you have data types that kind of derive their functionality from objects. So, here sits object and then here sits string, integer, double, et cetera. And then you have sets and blah, blah, blah. Now, when you were here, when you were first here and you said, I have foo, bar, baz, all strings, then Dart was like, okay, this is a set of strings. But then you said, oh, I have a string and I have an integer, which is a number. Now, Dart was like, oops, I have, I can't, I mean, I don't really, I can't say this is a list of strings and integers. That's not possible in Dart. So, it says I'm going to take the common denominator type that sits above them as their parent to specify what these things are. Okay. And that is kind of like the same thing that we do in real life in that if I give you, for instance, two candies, like a Twix bar, then you would say, this is a Twix bar. That's one thing. If I give you 10 Twix bars, then you will say a lot of Twix bars or 10 Twix bars. If I just give you a bunch of Twix bars, you'll be like, oh, that's a bunch of Twix bars. But if I go and like blend like lots of Twix bars, Mars bars, whatever, all the sweets into a bag and I give you that bag, what do you call it? You don't say, oh, this is a bag of Twix and Snickers and this is and Mars bar. No, you would probably just say candy. It's a bag of candies. And that's what Dart is doing here. Saying, oh, you threw a lot of stuff in here. I can't comprehend it. This is a set of objects. So we do that in real life. And that's what Dart is doing here. So just when you see object, just know that, oh, Dart doesn't really know what this is anymore. Or it kind of knows what it is. It's just a bunch of stuff. So that's what object in this case means. So that was a weird comparison, maybe. But I hope you get what I mean. And if you see me looking here, it's just because I'm looking at my notes to ensure that I've explained the things that I've set out to explain. So talked a little bit about hash codes and sets. We don't have to go into details about that. So now let's go and talk a little bit about maps. Now let's go and talk a little bit about maps. And maps are one of my favorite data structures in any programming language that supports them. Pretty much almost all modern programming languages support maps. So a map is a data structure. As you can see here, maps are used to hold key value pairs of information. And what that means is, let's say that you want to explain a person using their different properties. Then you would say age, their gender, their hair color, their height, whatever, name, all of that. So these are kind of like your keys. So you would explain the properties of that person using those keys. And all those keys have their values. So if you say height, then you would say like 180. And if you say weight, then you would say like 70 kilograms. So these are key values. The keys are the properties of that person and the values are the values of those properties. And the way to create a map is very similar. So it's very similar to a set with curly brackets. You say person, and then you say equal to. Actually, this is just a name. You don't have to say person, but yeah. Or you can just say const. So person, and then you open curly brackets, and then you would do your keys here. And I would say the key of age, for instance, I'll say 20. And then you say colon. Is it colon? Yeah, it's a colon. And then you end the whole set with a semicolon. So I just created a basically here, I created a map whose keys are string and values are integers. Now let's see if Dart understands that. You see, it's a map of string as keys and int as values. But now, as you saw before, the analogy of candies, now if I say, okay, I have another key, and it says name, and I say, oh, the name is foo. Now Dart's going to be like, ooh, what is this person? Oh, it's a map of string as keys and object as the value. Because it just looks at the common denominator of the string, which is foo, and 20, which is an integer. It says, oh, I don't know. I can't create a map whose keys are string and its values are both string and integer. So I'm just going to go to their parent and be like, oh, the parent of both string and integer is object. So your values are of type object. So a bunch of candies, basically. Okay. That's how you create a map in Dart. And the other property of a map is, for instance, you would say, if you go and create an age again here, you see it says two keys and a constant map literal cannot be equal. So it's doing some checks here, making sure that the keys are actually unique. So keys inside a map need to be unique. All right? However, if you go and change this and say var person, and then you later go and say person name is equal to foo, just like that, and then you print the entire person. So I'm just going to say print before and print after. Okay? And you can see here, it said first time age key is 20, it has a value of 20, and the name key has a value of foo with a capital F. Then the second time around on the print statement on line 15, then when we print the person, it has the key of age with a value of 20, because we didn't modify that, and a key of name as it was before with the value of foo with like six, I think, capital O's. So this is how you would modify a map. You would specify the key, and then you would say equal to, which is an operator, and then you would say the new value. All right? However, if you added a new key here, for instance, last name, and you say Baz, and that will just kind of like get appended to the map. So age the same, name the same, now you have a new key whose value is Baz. All right? And that is kind of like the basics of maps. So there are lots of things you can do with maps, and I really encourage you, just like everything else that I talked about in this chapter, that you go and read some of the documentations, because if you're following along with this course and your goal is to become a software engineer, and if you're, for instance, a project manager or a designer, UXer, whoever you are, I think you need to understand that software engineers do not know all the answers. You have to go and read documentations. You have to practice, practice, practice, and put time into it. Countless, countless hours you need to put into learning. So I mean, this course, I think, is going to be so many hours long. The way I can, I mean, I can see the planning for all the chapters that I've put here. There are so many chapters. I think the entirety of this course is going to go over 20 hours. So you can imagine that I can't go into details about every single thing. Otherwise, it is just, this course is probably going to be like 200, 300 hours. It's unbelievable. So we can't do that. So what I expect you to do now is just to open your browser and just type dart maps documentation, something like that, dart maps. So, and you also need to know that now that you're starting to Google things, you need to be aware of the word dart and that dart is an existing, very popular name for just darts, darts. Okay. So sometimes depending on what you're Googling, if a topic related to the classic darts that you throw is more popular than the topic of the programming language, which kind of sounds the same, it may pop up first. So in this case, if you say dart map, you may actually end up in some sort of weird website that explains to you how you can throw darts at a map. I don't know. I'm just trying to bring it up because I actually ended up in that situation that I searched for something related to dart. I actually ended up in a weird website talking about darts as like a sport. So know that as well, please. All right. Now we've talked about maps. So I'm going to take that in my notes. Now what's coming in the next chapter, we are going to talk about a very important concept in darts and many other programming languages such as Rust and Swift, and that is null safety or dart calls it the sound null safety. It is a very important thing to know about in darts and it will greatly and it will greatly help you in the future as you write your Flutter applications. In this course, I'm going to use a lot of null. I'm going to make a lot of null references, talk about null quite a lot throughout the course. So it is very important that we go through that as soon as possible, and we're definitely not going to leave that out. So that's going to be for chapter five. So keep an eye out for chapter five that is to follow. So I hope that you enjoyed this chapter, chapter number four, where we talked about dart control statements and collections, and I'll see you in the next chapter. Hello everyone, and welcome to chapter number five of this Flutter course. In this chapter, we're going to talk about null safety. In the previous chapter, chapter number four, we talked about dart control statements and collections. And before we go on to talk about enumerations and objects and classes, I feel it is very important to talk about null safety, which is a concept that is available in most modern languages such as Rust and Swift. So it is important to get this out of the way before we continue. Maybe not even get it out of the way, but actually learn what it means and try to utilize it so that we can write better code. So I thought to just bring up the concept of null values and why they're important to handle. Well, you've seen so far that we have data types. A data type can be, for instance, a string, can be an integer, and then you can put values in them. However, in programming languages, you are also allowed to have the concept of the absence of a value. So on one hand, you have values. So you, for instance, have a string value equal to foo bar or your name or whatever it is. And then on the other hand, you can have the absence of that value. So you can see that, okay, I have a container, I have a variable that can contain the values of type string, or I have a variable that can contain any object. However, at the moment, I don't have that value. So you will just tell Dart that this variable that I have right now can either contain a valid value of type object or of type string or integer, or it can sometimes also during its lifetime contain nothing. And this nothingness is the concept that is known as null. So it's null in Dart is a keyword. It means that it's a word that you can just write in your text editor as you're writing your code. And you say that a variable's value is equal to null. And this tells Dart that, well, okay, this variable at the moment doesn't contain any values. So null is not really a value, but it's actually the absence of a value. You should think of it that way. So let's have a look at this. There's a little bit of a documentation here. On Dart's website, Dart dev null safety. So I'm just going to click on it. You're not going to see my screen at the moment. I'm just bringing it up in a browser, a browser window. I'm going to bring it on the screen and increase the size a little bit and also change the sizing on the the window as well. So you can see the contents in its entirety. So as you can see in Dart, it's called sound null safety. And there's documentation about what this actually means. We're going to look at what null safety actually means in Dart. And I'm going to give you a lot of examples of what that actually practically means. And there's documentation here in Dart's website simply because Dart, in its older versions, not in its current versions, in its older versions, it didn't support null safety. So there was a lot of code written manually by programmers in order to, for instance, check whether a value is absent in a variable. And then there is, as you can see here, it says migrating an existing package or app. So there is documentation written by the Dart team in order to help developers understand how they can move their old code to the new code that supports null safety. However, if you're following along with this course, it's like you're basically just following chronologically from chapter one to all the other chapters. I don't know how many chapters we're going to have, but if you're following along with this course, you don't have to think about migrating because the code that we're writing in this entire course is going to be null safe, meaning that we're going to take advantage of Dart's null safety operators and meaning that we are not going to manually check for values being null and then doing some branches of code, whether they're null or not. So what I mean is that if you read the documentation for sound null safety, you don't have to worry about the migration parts. Just read the rest. Okay. So with that out the way, I'm just going to make sure that I tick that in my notes here. That's why I'm looking in this direction because I have all my notes here. Let's close this window and bring up our Visual Studio Code window that we had from earlier. I'm going to put it here, and I'm just going to ensure that it is of the correct height as well. So you're going to see the window in it height as well. So you're going to see the window in its entirety. Okay. So now that we talked about what null values are and that there are the absence of a value, let's have a look at making any type nullable. And if you follow along with the course up to this point, you should have some sort of a simulator or an emulator running, and then you should have done command shift P or control shift P depending on your operating system, command shift P in Mac and control shift P in Linux and Windows in order to bring up this menu. And then you can just type Flutter, select device, and then you just select the device that you want to run the code on. So I'm kind of assuming that you've already done that and that your code is running. And this is something that we talked about in earlier chapters. So we're not going to go through that again. So I have an iPhone simulator, which you cannot see on the screen, but I have it running in a separate screen just because we don't have enough real estate. I can bring it up to this window, but it will just take a lot of space. So I'm going to bring it up to another monitor so you don't see it. So this code at the moment is running live. So if I press command S, then it's going to run and just print the output for us. Okay. Now let's talk about making any type nullable. And there is a way to do that. Let's have a look here. We talked about that null is a keyword, and that's why you can see it is highlighted here in a different color. So if you, for instance, say final name is foo, as you can see, it says, okay, I accept this as name is foo. But you can't just say name like it's a null because then it doesn't understand. Is it an object? Is it a string? Is it an integer? And if you type here name, then you see it's just dynamic. It doesn't understand the type. And we'll talk about dynamic a little bit later. But what you can do is to actually specify that, okay, I want a string data type that it can contain normal names or strings as we call it, like series of characters, or it can sometimes be null. And in that case, you have to actually specify the data type as not just string, not just this, because you'll see, you'll get an error. And we'll actually get a suggestion. It says, try changing the type of the variable or casting the right-hand type to string. But we're not going to do that. That wasn't such a, it wasn't such a useful suggestion because what you want here is to actually make Dart understand that this variable right here, or this constant right here can sometimes contain the value of null. And the way to do that is you put the suffix after your data type as a question mark. So this is the syntax, which is actually using some other languages as well. It's used in Swift as well. So this tells Dart that, well, here, if we make it actually a variable, as you can see, or sorry, like this. So you say, I have a variable. It's a string, but sometimes it may, the string value may be absent. And then you'll just say, okay, now name is foo. And you can say now name is null. So this is kind of like resetting out names. So if I just say, okay, print name. And then after foo, I say print name. Okay. So let's just clear the console and just run this application. You can see the first time it says it's null. And then the second time around it says it is foo. So this is how you tell Dart that you want to have nullable data type. And you can do this with pretty much all data types. So you can just say, okay, I have an integer of age, and that's 20. But you can see you cannot now assign the value of null to integer because it's not nullable. But as soon as you make it nullable, then that is accepted. And of course, you can do different operations using, for instance, in the previous chapter, I believe, we talked about control statements if and else. So you can say, for instance, if age is 20, and then you can execute some code, or you can say if age is null, execute some code. So they work as you would expect. So there is no difference really. And I mean, if you think about that nullability is just like a suffix to a data type, you can also say, okay, pretty much any data type can be nullable. And that's great. Like, for instance, if you have a list of string of names, you can say, okay, I have foo and bar here. This is a list of strings. I talked about lists in chapter four. Now, you can see here that list of strings, there are two data types here, the list itself, and the contents that it holds. So if you want to make the list in itself nullable, then you would put the question mark after. This means this list of strings in itself can be absent. So you say names null, and that's accepted. However, since you're telling Dart that, okay, the names value here can in its entirety be null, but its values are not supposed to be null. So if you then go in here and just put null in here, then you see that you got an error. And that's because Dart is saying that, okay, you just promised me that the list in itself, it can be absent, but as soon as it is not absent, meaning that as soon as it is present there with some values, its values cannot be null. And that means that this type should be telling me here that it is null. So if you want to make an optional or nullable list of optional strings, then you would put the question mark after the data type of string as well. So this is now, I mean, the way you should read this is, I have a list of strings, and I call that list names. Names can sometimes be null, meaning that it can be absent. And if it is not absent, it can contain objects of type string that themselves can sometimes be absent, meaning that, okay, for instance, if you say foo bar null, that's accepted, but you can also say names is null. See what I mean? So both the container, which is called names, and the values that it contains can be optional. And the word optional is very important for you to learn. It's kind of like an industry accepted way of talking about nulls and nullable values. So this is optional, all right? Okay. Now we talked about that, nullable values and optional values, all right? Basically, you can use those words interchangeably. So if you're talking with a colleague programmer, you would say, oh, how would you describe this? Okay, this is an optional list of optional strings. Or you could also say nullable list of nullable strings. But optional is also a word that is typically used to talk about nullable values, all right? Okay. We talked about making any type nullable. So", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.24, "text": " So, I think that's it for functions.", "tokens": [50364, 407, 11, 286, 519, 300, 311, 309, 337, 6828, 13, 50726], "temperature": 0.0, "avg_logprob": -0.16565467149783403, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.0072884936816990376}, {"id": 1, "seek": 0, "start": 7.24, "end": 12.84, "text": " Now we've talked about functions, arguments, return values.", "tokens": [50726, 823, 321, 600, 2825, 466, 6828, 11, 12869, 11, 2736, 4190, 13, 51006], "temperature": 0.0, "avg_logprob": -0.16565467149783403, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.0072884936816990376}, {"id": 2, "seek": 0, "start": 12.84, "end": 20.64, "text": " We talked about variables, constants, data types, and keywords in Dart.", "tokens": [51006, 492, 2825, 466, 9102, 11, 35870, 11, 1412, 3467, 11, 293, 21009, 294, 30271, 13, 51396], "temperature": 0.0, "avg_logprob": -0.16565467149783403, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.0072884936816990376}, {"id": 3, "seek": 0, "start": 20.64, "end": 26.32, "text": " These are such important parts of learning how to program with Dart and Flutter that", "tokens": [51396, 1981, 366, 1270, 1021, 3166, 295, 2539, 577, 281, 1461, 365, 30271, 293, 3235, 9947, 300, 51680], "temperature": 0.0, "avg_logprob": -0.16565467149783403, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.0072884936816990376}, {"id": 4, "seek": 0, "start": 26.32, "end": 28.84, "text": " I think you need to spend some time and experiment with them.", "tokens": [51680, 286, 519, 291, 643, 281, 3496, 512, 565, 293, 5120, 365, 552, 13, 51806], "temperature": 0.0, "avg_logprob": -0.16565467149783403, "compression_ratio": 1.5217391304347827, "no_speech_prob": 0.0072884936816990376}, {"id": 5, "seek": 2884, "start": 28.919999999999998, "end": 30.36, "text": " Do some experimentations on your own.", "tokens": [50368, 1144, 512, 5120, 763, 322, 428, 1065, 13, 50440], "temperature": 0.0, "avg_logprob": -0.13524501106955789, "compression_ratio": 1.7833333333333334, "no_speech_prob": 0.021763036027550697}, {"id": 6, "seek": 2884, "start": 32.36, "end": 33.96, "text": " Don't take just the first name and last name.", "tokens": [50540, 1468, 380, 747, 445, 264, 700, 1315, 293, 1036, 1315, 13, 50620], "temperature": 0.0, "avg_logprob": -0.13524501106955789, "compression_ratio": 1.7833333333333334, "no_speech_prob": 0.021763036027550697}, {"id": 7, "seek": 2884, "start": 33.96, "end": 37.0, "text": " Just take, for instance, someone's address, someone's age,", "tokens": [50620, 1449, 747, 11, 337, 5197, 11, 1580, 311, 2985, 11, 1580, 311, 3205, 11, 50772], "temperature": 0.0, "avg_logprob": -0.13524501106955789, "compression_ratio": 1.7833333333333334, "no_speech_prob": 0.021763036027550697}, {"id": 8, "seek": 2884, "start": 38.12, "end": 41.96, "text": " play around a little bit with different data types like integers, different numbers.", "tokens": [50828, 862, 926, 257, 707, 857, 365, 819, 1412, 3467, 411, 41674, 11, 819, 3547, 13, 51020], "temperature": 0.0, "avg_logprob": -0.13524501106955789, "compression_ratio": 1.7833333333333334, "no_speech_prob": 0.021763036027550697}, {"id": 9, "seek": 2884, "start": 41.96, "end": 45.879999999999995, "text": " Have a look at the link that I provided earlier, which was here.", "tokens": [51020, 3560, 257, 574, 412, 264, 2113, 300, 286, 5649, 3071, 11, 597, 390, 510, 13, 51216], "temperature": 0.0, "avg_logprob": -0.13524501106955789, "compression_ratio": 1.7833333333333334, "no_speech_prob": 0.021763036027550697}, {"id": 10, "seek": 2884, "start": 45.879999999999995, "end": 47.56, "text": " I'll bring it up again so you can see that.", "tokens": [51216, 286, 603, 1565, 309, 493, 797, 370, 291, 393, 536, 300, 13, 51300], "temperature": 0.0, "avg_logprob": -0.13524501106955789, "compression_ratio": 1.7833333333333334, "no_speech_prob": 0.021763036027550697}, {"id": 11, "seek": 2884, "start": 48.519999999999996, "end": 53.24, "text": " Have a look at this link and have a look at the different examples of different data types.", "tokens": [51348, 3560, 257, 574, 412, 341, 2113, 293, 362, 257, 574, 412, 264, 819, 5110, 295, 819, 1412, 3467, 13, 51584], "temperature": 0.0, "avg_logprob": -0.13524501106955789, "compression_ratio": 1.7833333333333334, "no_speech_prob": 0.021763036027550697}, {"id": 12, "seek": 5324, "start": 53.32, "end": 60.120000000000005, "text": " Because in the upcoming chapters and in the rest of this course,", "tokens": [50368, 1436, 294, 264, 11500, 20013, 293, 294, 264, 1472, 295, 341, 1164, 11, 50708], "temperature": 0.0, "avg_logprob": -0.09809725180916164, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.02353401482105255}, {"id": 13, "seek": 5324, "start": 60.120000000000005, "end": 63.480000000000004, "text": " we're going to play around with a lot of different types of data types.", "tokens": [50708, 321, 434, 516, 281, 862, 926, 365, 257, 688, 295, 819, 3467, 295, 1412, 3467, 13, 50876], "temperature": 0.0, "avg_logprob": -0.09809725180916164, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.02353401482105255}, {"id": 14, "seek": 5324, "start": 64.52, "end": 68.68, "text": " I think it's important that you have a look a little bit at the documentation as well.", "tokens": [50928, 286, 519, 309, 311, 1021, 300, 291, 362, 257, 574, 257, 707, 857, 412, 264, 14333, 382, 731, 13, 51136], "temperature": 0.0, "avg_logprob": -0.09809725180916164, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.02353401482105255}, {"id": 15, "seek": 5324, "start": 70.84, "end": 75.48, "text": " Let's leave this chapter at this point, and then in the next chapter,", "tokens": [51244, 961, 311, 1856, 341, 7187, 412, 341, 935, 11, 293, 550, 294, 264, 958, 7187, 11, 51476], "temperature": 0.0, "avg_logprob": -0.09809725180916164, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.02353401482105255}, {"id": 16, "seek": 5324, "start": 75.48, "end": 82.04, "text": " we're going to talk a lot more about more advanced Dart programming language features.", "tokens": [51476, 321, 434, 516, 281, 751, 257, 688, 544, 466, 544, 7339, 30271, 9410, 2856, 4122, 13, 51804], "temperature": 0.0, "avg_logprob": -0.09809725180916164, "compression_ratio": 1.6814159292035398, "no_speech_prob": 0.02353401482105255}, {"id": 17, "seek": 8204, "start": 82.92, "end": 85.88000000000001, "text": " Thank you for joining me for this chapter and see you in the next one.", "tokens": [50408, 1044, 291, 337, 5549, 385, 337, 341, 7187, 293, 536, 291, 294, 264, 958, 472, 13, 50556], "temperature": 0.0, "avg_logprob": -0.08909426689147949, "compression_ratio": 1.7167381974248928, "no_speech_prob": 0.00010143296822207049}, {"id": 18, "seek": 8204, "start": 87.0, "end": 90.84, "text": " Hello, everyone, and welcome to chapter four of this Flutter course.", "tokens": [50612, 2425, 11, 1518, 11, 293, 2928, 281, 7187, 1451, 295, 341, 3235, 9947, 1164, 13, 50804], "temperature": 0.0, "avg_logprob": -0.08909426689147949, "compression_ratio": 1.7167381974248928, "no_speech_prob": 0.00010143296822207049}, {"id": 19, "seek": 8204, "start": 91.88000000000001, "end": 96.68, "text": " In the previous chapter, chapter three, we talked about keywords, data types, constants,", "tokens": [50856, 682, 264, 3894, 7187, 11, 7187, 1045, 11, 321, 2825, 466, 21009, 11, 1412, 3467, 11, 35870, 11, 51096], "temperature": 0.0, "avg_logprob": -0.08909426689147949, "compression_ratio": 1.7167381974248928, "no_speech_prob": 0.00010143296822207049}, {"id": 20, "seek": 8204, "start": 96.68, "end": 98.68, "text": " variables, and some basics of functions.", "tokens": [51096, 9102, 11, 293, 512, 14688, 295, 6828, 13, 51196], "temperature": 0.0, "avg_logprob": -0.08909426689147949, "compression_ratio": 1.7167381974248928, "no_speech_prob": 0.00010143296822207049}, {"id": 21, "seek": 8204, "start": 99.88000000000001, "end": 104.84, "text": " In this chapter, we are going to, as you can see on the captions here,", "tokens": [51256, 682, 341, 7187, 11, 321, 366, 516, 281, 11, 382, 291, 393, 536, 322, 264, 44832, 510, 11, 51504], "temperature": 0.0, "avg_logprob": -0.08909426689147949, "compression_ratio": 1.7167381974248928, "no_speech_prob": 0.00010143296822207049}, {"id": 22, "seek": 8204, "start": 104.84, "end": 108.84, "text": " we're going to focus on control statements and collections.", "tokens": [51504, 321, 434, 516, 281, 1879, 322, 1969, 12363, 293, 16641, 13, 51704], "temperature": 0.0, "avg_logprob": -0.08909426689147949, "compression_ratio": 1.7167381974248928, "no_speech_prob": 0.00010143296822207049}, {"id": 23, "seek": 10884, "start": 109.8, "end": 117.16, "text": " Now, I'm assuming you're following these chapters chronologically so that you're going", "tokens": [50412, 823, 11, 286, 478, 11926, 291, 434, 3480, 613, 20013, 19393, 17157, 370, 300, 291, 434, 516, 50780], "temperature": 0.0, "avg_logprob": -0.15292278925577799, "compression_ratio": 1.680952380952381, "no_speech_prob": 0.0018088300712406635}, {"id": 24, "seek": 10884, "start": 117.80000000000001, "end": 123.80000000000001, "text": " one by one. I'm assuming then that you have your Dart project set up and that you've got", "tokens": [50812, 472, 538, 472, 13, 286, 478, 11926, 550, 300, 291, 362, 428, 30271, 1716, 992, 493, 293, 300, 291, 600, 658, 51112], "temperature": 0.0, "avg_logprob": -0.15292278925577799, "compression_ratio": 1.680952380952381, "no_speech_prob": 0.0018088300712406635}, {"id": 25, "seek": 10884, "start": 123.80000000000001, "end": 131.24, "text": " some sort of a simulator or emulator running. Without further ado, let's have a look at...", "tokens": [51112, 512, 1333, 295, 257, 32974, 420, 846, 16381, 2614, 13, 9129, 3052, 22450, 11, 718, 311, 362, 257, 574, 412, 485, 51484], "temperature": 0.0, "avg_logprob": -0.15292278925577799, "compression_ratio": 1.680952380952381, "no_speech_prob": 0.0018088300712406635}, {"id": 26, "seek": 10884, "start": 131.8, "end": 137.32, "text": " I'm actually going to bring up the captions here, and then I'm going to put my face at", "tokens": [51512, 286, 478, 767, 516, 281, 1565, 493, 264, 44832, 510, 11, 293, 550, 286, 478, 516, 281, 829, 452, 1851, 412, 51788], "temperature": 0.0, "avg_logprob": -0.15292278925577799, "compression_ratio": 1.680952380952381, "no_speech_prob": 0.0018088300712406635}, {"id": 27, "seek": 13732, "start": 137.48, "end": 145.16, "text": " the bottom there and bring up our project that we created in the previous chapter up here.", "tokens": [50372, 264, 2767, 456, 293, 1565, 493, 527, 1716, 300, 321, 2942, 294, 264, 3894, 7187, 493, 510, 13, 50756], "temperature": 0.0, "avg_logprob": -0.12221078311695772, "compression_ratio": 1.5870445344129556, "no_speech_prob": 0.00011882420949405059}, {"id": 28, "seek": 13732, "start": 146.12, "end": 150.84, "text": " This is running at the moment. If I do a command S or a control S on Linux and Windows,", "tokens": [50804, 639, 307, 2614, 412, 264, 1623, 13, 759, 286, 360, 257, 5622, 318, 420, 257, 1969, 318, 322, 18734, 293, 8591, 11, 51040], "temperature": 0.0, "avg_logprob": -0.12221078311695772, "compression_ratio": 1.5870445344129556, "no_speech_prob": 0.00011882420949405059}, {"id": 29, "seek": 13732, "start": 151.56, "end": 154.04, "text": " then as you can see here, there is a run button.", "tokens": [51076, 550, 382, 291, 393, 536, 510, 11, 456, 307, 257, 1190, 2960, 13, 51200], "temperature": 0.0, "avg_logprob": -0.12221078311695772, "compression_ratio": 1.5870445344129556, "no_speech_prob": 0.00011882420949405059}, {"id": 30, "seek": 13732, "start": 155.24, "end": 160.28, "text": " Then it's just going to do a hot reload, which in turn calls this build function,", "tokens": [51260, 1396, 309, 311, 445, 516, 281, 360, 257, 2368, 25628, 11, 597, 294, 1261, 5498, 341, 1322, 2445, 11, 51512], "temperature": 0.0, "avg_logprob": -0.12221078311695772, "compression_ratio": 1.5870445344129556, "no_speech_prob": 0.00011882420949405059}, {"id": 31, "seek": 13732, "start": 160.28, "end": 163.95999999999998, "text": " which we don't yet know really how it works because I haven't really explained it.", "tokens": [51512, 597, 321, 500, 380, 1939, 458, 534, 577, 309, 1985, 570, 286, 2378, 380, 534, 8825, 309, 13, 51696], "temperature": 0.0, "avg_logprob": -0.12221078311695772, "compression_ratio": 1.5870445344129556, "no_speech_prob": 0.00011882420949405059}, {"id": 32, "seek": 16396, "start": 163.96, "end": 170.52, "text": " But what we did, we just called a print function here and then our get full name function.", "tokens": [50364, 583, 437, 321, 630, 11, 321, 445, 1219, 257, 4482, 2445, 510, 293, 550, 527, 483, 1577, 1315, 2445, 13, 50692], "temperature": 0.0, "avg_logprob": -0.09321043538112267, "compression_ratio": 1.705128205128205, "no_speech_prob": 0.0005547121400013566}, {"id": 33, "seek": 16396, "start": 173.0, "end": 176.52, "text": " What I'm going to do here is let's remove this code from the build,", "tokens": [50816, 708, 286, 478, 516, 281, 360, 510, 307, 718, 311, 4159, 341, 3089, 490, 264, 1322, 11, 50992], "temperature": 0.0, "avg_logprob": -0.09321043538112267, "compression_ratio": 1.705128205128205, "no_speech_prob": 0.0005547121400013566}, {"id": 34, "seek": 16396, "start": 177.24, "end": 181.32, "text": " and let's remove everything that we wrote here as well. Keep the main function,", "tokens": [51028, 293, 718, 311, 4159, 1203, 300, 321, 4114, 510, 382, 731, 13, 5527, 264, 2135, 2445, 11, 51232], "temperature": 0.0, "avg_logprob": -0.09321043538112267, "compression_ratio": 1.705128205128205, "no_speech_prob": 0.0005547121400013566}, {"id": 35, "seek": 16396, "start": 181.32, "end": 186.12, "text": " as you can see here, and then keep your stateless widget, which we're going to talk about later.", "tokens": [51232, 382, 291, 393, 536, 510, 11, 293, 550, 1066, 428, 2219, 4272, 34047, 11, 597, 321, 434, 516, 281, 751, 466, 1780, 13, 51472], "temperature": 0.0, "avg_logprob": -0.09321043538112267, "compression_ratio": 1.705128205128205, "no_speech_prob": 0.0005547121400013566}, {"id": 36, "seek": 16396, "start": 187.4, "end": 191.8, "text": " Instead, go and create a new function that is called void test.", "tokens": [51536, 7156, 11, 352, 293, 1884, 257, 777, 2445, 300, 307, 1219, 22009, 1500, 13, 51756], "temperature": 0.0, "avg_logprob": -0.09321043538112267, "compression_ratio": 1.705128205128205, "no_speech_prob": 0.0005547121400013566}, {"id": 37, "seek": 19396, "start": 194.76000000000002, "end": 200.12, "text": " And then in the build function, just say test. Just like that.", "tokens": [50404, 400, 550, 294, 264, 1322, 2445, 11, 445, 584, 1500, 13, 1449, 411, 300, 13, 50672], "temperature": 0.0, "avg_logprob": -0.09447722964816624, "compression_ratio": 1.6871794871794872, "no_speech_prob": 4.2971641960320994e-05}, {"id": 38, "seek": 19396, "start": 201.88, "end": 206.92000000000002, "text": " The purpose is that in this function, we're going to write most of the code in this chapter.", "tokens": [50760, 440, 4334, 307, 300, 294, 341, 2445, 11, 321, 434, 516, 281, 2464, 881, 295, 264, 3089, 294, 341, 7187, 13, 51012], "temperature": 0.0, "avg_logprob": -0.09447722964816624, "compression_ratio": 1.6871794871794872, "no_speech_prob": 4.2971641960320994e-05}, {"id": 39, "seek": 19396, "start": 206.92000000000002, "end": 209.96, "text": " We are going to basically test some code. That's the purpose of this function.", "tokens": [51012, 492, 366, 516, 281, 1936, 1500, 512, 3089, 13, 663, 311, 264, 4334, 295, 341, 2445, 13, 51164], "temperature": 0.0, "avg_logprob": -0.09447722964816624, "compression_ratio": 1.6871794871794872, "no_speech_prob": 4.2971641960320994e-05}, {"id": 40, "seek": 19396, "start": 212.28, "end": 220.52, "text": " Let's talk about if and else. If and else are control statements in most programming languages", "tokens": [51280, 961, 311, 751, 466, 498, 293, 1646, 13, 759, 293, 1646, 366, 1969, 12363, 294, 881, 9410, 8650, 51692], "temperature": 0.0, "avg_logprob": -0.09447722964816624, "compression_ratio": 1.6871794871794872, "no_speech_prob": 4.2971641960320994e-05}, {"id": 41, "seek": 22052, "start": 220.52, "end": 227.0, "text": " that allow you to branch your code based on a condition. So if we, for instance,", "tokens": [50364, 300, 2089, 291, 281, 9819, 428, 3089, 2361, 322, 257, 4188, 13, 407, 498, 321, 11, 337, 5197, 11, 50688], "temperature": 0.0, "avg_logprob": -0.11917039085836971, "compression_ratio": 1.6553398058252426, "no_speech_prob": 0.0005444428534246981}, {"id": 42, "seek": 22052, "start": 227.0, "end": 233.64000000000001, "text": " in here create a final variable whose value cannot be changed, if you remember from the", "tokens": [50688, 294, 510, 1884, 257, 2572, 7006, 6104, 2158, 2644, 312, 3105, 11, 498, 291, 1604, 490, 264, 51020], "temperature": 0.0, "avg_logprob": -0.11917039085836971, "compression_ratio": 1.6553398058252426, "no_speech_prob": 0.0005444428534246981}, {"id": 43, "seek": 22052, "start": 233.64000000000001, "end": 236.36, "text": " previous chapter, whose value cannot be changed after it's been assigned to,", "tokens": [51020, 3894, 7187, 11, 6104, 2158, 2644, 312, 3105, 934, 309, 311, 668, 13279, 281, 11, 51156], "temperature": 0.0, "avg_logprob": -0.11917039085836971, "compression_ratio": 1.6553398058252426, "no_speech_prob": 0.0005444428534246981}, {"id": 44, "seek": 22052, "start": 237.08, "end": 247.72, "text": " let's say final name is foo, and end it with a semicolon. Now, an if statement basically allows", "tokens": [51192, 718, 311, 584, 2572, 1315, 307, 726, 78, 11, 293, 917, 309, 365, 257, 27515, 38780, 13, 823, 11, 364, 498, 5629, 1936, 4045, 51724], "temperature": 0.0, "avg_logprob": -0.11917039085836971, "compression_ratio": 1.6553398058252426, "no_speech_prob": 0.0005444428534246981}, {"id": 45, "seek": 24772, "start": 247.72, "end": 257.88, "text": " you to check the value or a condition to be of a certain value or to be true or false, and then it", "tokens": [50364, 291, 281, 1520, 264, 2158, 420, 257, 4188, 281, 312, 295, 257, 1629, 2158, 420, 281, 312, 2074, 420, 7908, 11, 293, 550, 309, 50872], "temperature": 0.0, "avg_logprob": -0.08805369703393233, "compression_ratio": 1.6742857142857144, "no_speech_prob": 0.003282506950199604}, {"id": 46, "seek": 24772, "start": 257.88, "end": 264.84, "text": " allows you to execute some code, and then you can also append an else statement to it, which gets", "tokens": [50872, 4045, 291, 281, 14483, 512, 3089, 11, 293, 550, 291, 393, 611, 34116, 364, 1646, 5629, 281, 309, 11, 597, 2170, 51220], "temperature": 0.0, "avg_logprob": -0.08805369703393233, "compression_ratio": 1.6742857142857144, "no_speech_prob": 0.003282506950199604}, {"id": 47, "seek": 24772, "start": 264.84, "end": 269.96, "text": " executed if the code or if that condition is not met. I'm going to show you how that is written.", "tokens": [51220, 17577, 498, 264, 3089, 420, 498, 300, 4188, 307, 406, 1131, 13, 286, 478, 516, 281, 855, 291, 577, 300, 307, 3720, 13, 51476], "temperature": 0.0, "avg_logprob": -0.08805369703393233, "compression_ratio": 1.6742857142857144, "no_speech_prob": 0.003282506950199604}, {"id": 48, "seek": 26996, "start": 270.84, "end": 278.44, "text": " The syntax for an if statement is just if, and if is a keyword. So you would say if,", "tokens": [50408, 440, 28431, 337, 364, 498, 5629, 307, 445, 498, 11, 293, 498, 307, 257, 20428, 13, 407, 291, 576, 584, 498, 11, 50788], "temperature": 0.0, "avg_logprob": -0.10891143397281045, "compression_ratio": 1.8010204081632653, "no_speech_prob": 0.07563439756631851}, {"id": 49, "seek": 26996, "start": 278.44, "end": 284.44, "text": " and then you would open and close parentheses, and then you would put curly brackets like this.", "tokens": [50788, 293, 550, 291, 576, 1269, 293, 1998, 34153, 11, 293, 550, 291, 576, 829, 32066, 26179, 411, 341, 13, 51088], "temperature": 0.0, "avg_logprob": -0.10891143397281045, "compression_ratio": 1.8010204081632653, "no_speech_prob": 0.07563439756631851}, {"id": 50, "seek": 26996, "start": 284.44, "end": 288.03999999999996, "text": " That's the syntax of if. And in the parentheses, you would put your condition.", "tokens": [51088, 663, 311, 264, 28431, 295, 498, 13, 400, 294, 264, 34153, 11, 291, 576, 829, 428, 4188, 13, 51268], "temperature": 0.0, "avg_logprob": -0.10891143397281045, "compression_ratio": 1.8010204081632653, "no_speech_prob": 0.07563439756631851}, {"id": 51, "seek": 26996, "start": 288.67999999999995, "end": 295.64, "text": " So I would say in this case if name, and I would like to, for instance, check if name is foo.", "tokens": [51300, 407, 286, 576, 584, 294, 341, 1389, 498, 1315, 11, 293, 286, 576, 411, 281, 11, 337, 5197, 11, 1520, 498, 1315, 307, 726, 78, 13, 51648], "temperature": 0.0, "avg_logprob": -0.10891143397281045, "compression_ratio": 1.8010204081632653, "no_speech_prob": 0.07563439756631851}, {"id": 52, "seek": 29564, "start": 296.59999999999997, "end": 303.08, "text": " Now, we haven't come to operators yet. We're going to talk about operators actually soon.", "tokens": [50412, 823, 11, 321, 2378, 380, 808, 281, 19077, 1939, 13, 492, 434, 516, 281, 751, 466, 19077, 767, 2321, 13, 50736], "temperature": 0.0, "avg_logprob": -0.11917624810729364, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.0018461846048012376}, {"id": 53, "seek": 29564, "start": 304.28, "end": 311.24, "text": " But this is, as you can see here, we're saying final name equal to foo. This is kind of like", "tokens": [50796, 583, 341, 307, 11, 382, 291, 393, 536, 510, 11, 321, 434, 1566, 2572, 1315, 2681, 281, 726, 78, 13, 639, 307, 733, 295, 411, 51144], "temperature": 0.0, "avg_logprob": -0.11917624810729364, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.0018461846048012376}, {"id": 54, "seek": 29564, "start": 312.03999999999996, "end": 319.88, "text": " an assignment operation, and that is an operator. In Dart, it's called an operator. So there is", "tokens": [51184, 364, 15187, 6916, 11, 293, 300, 307, 364, 12973, 13, 682, 30271, 11, 309, 311, 1219, 364, 12973, 13, 407, 456, 307, 51576], "temperature": 0.0, "avg_logprob": -0.11917624810729364, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.0018461846048012376}, {"id": 55, "seek": 29564, "start": 319.88, "end": 323.96, "text": " also, and since this is an assignment, we don't want to actually assign anything to name. We want", "tokens": [51576, 611, 11, 293, 1670, 341, 307, 364, 15187, 11, 321, 500, 380, 528, 281, 767, 6269, 1340, 281, 1315, 13, 492, 528, 51780], "temperature": 0.0, "avg_logprob": -0.11917624810729364, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.0018461846048012376}, {"id": 56, "seek": 32396, "start": 324.28, "end": 330.59999999999997, "text": " to check if it's of a certain value, and that is with this conditional operator. Equal, equal.", "tokens": [50380, 281, 1520, 498, 309, 311, 295, 257, 1629, 2158, 11, 293, 300, 307, 365, 341, 27708, 12973, 13, 15624, 304, 11, 2681, 13, 50696], "temperature": 0.0, "avg_logprob": -0.11103096008300781, "compression_ratio": 1.6291079812206573, "no_speech_prob": 0.0006988677778281271}, {"id": 57, "seek": 32396, "start": 332.03999999999996, "end": 337.08, "text": " And then you would just say, okay, if it's foo, then, for instance, print.", "tokens": [50768, 400, 550, 291, 576, 445, 584, 11, 1392, 11, 498, 309, 311, 726, 78, 11, 550, 11, 337, 5197, 11, 4482, 13, 51020], "temperature": 0.0, "avg_logprob": -0.11103096008300781, "compression_ratio": 1.6291079812206573, "no_speech_prob": 0.0006988677778281271}, {"id": 58, "seek": 32396, "start": 339.56, "end": 346.28, "text": " Yes, this is foo. And then a semicolon to end it. However, if this condition is not met,", "tokens": [51144, 1079, 11, 341, 307, 726, 78, 13, 400, 550, 257, 27515, 38780, 281, 917, 309, 13, 2908, 11, 498, 341, 4188, 307, 406, 1131, 11, 51480], "temperature": 0.0, "avg_logprob": -0.11103096008300781, "compression_ratio": 1.6291079812206573, "no_speech_prob": 0.0006988677778281271}, {"id": 59, "seek": 32396, "start": 346.28, "end": 352.67999999999995, "text": " you may want to execute another piece of code, and then you can just do else. Like that.", "tokens": [51480, 291, 815, 528, 281, 14483, 1071, 2522, 295, 3089, 11, 293, 550, 291, 393, 445, 360, 1646, 13, 1743, 300, 13, 51800], "temperature": 0.0, "avg_logprob": -0.11103096008300781, "compression_ratio": 1.6291079812206573, "no_speech_prob": 0.0006988677778281271}, {"id": 60, "seek": 35396, "start": 353.96, "end": 361.15999999999997, "text": " Then you would just say, no, this is not foo. And a semicolon. So I'm just going to do command S,", "tokens": [50364, 1396, 291, 576, 445, 584, 11, 572, 11, 341, 307, 406, 726, 78, 13, 400, 257, 27515, 38780, 13, 407, 286, 478, 445, 516, 281, 360, 5622, 318, 11, 50724], "temperature": 0.0, "avg_logprob": -0.13588345404898766, "compression_ratio": 1.7619047619047619, "no_speech_prob": 0.00011920648830709979}, {"id": 61, "seek": 35396, "start": 362.2, "end": 366.44, "text": " and you can see the value or the string, yes, this is foo printed to the screen,", "tokens": [50776, 293, 291, 393, 536, 264, 2158, 420, 264, 6798, 11, 2086, 11, 341, 307, 726, 78, 13567, 281, 264, 2568, 11, 50988], "temperature": 0.0, "avg_logprob": -0.13588345404898766, "compression_ratio": 1.7619047619047619, "no_speech_prob": 0.00011920648830709979}, {"id": 62, "seek": 35396, "start": 366.44, "end": 372.91999999999996, "text": " or to the terminal here, or to the debug console. You can have multiple statements in here. So you", "tokens": [50988, 420, 281, 264, 14709, 510, 11, 420, 281, 264, 24083, 11076, 13, 509, 393, 362, 3866, 12363, 294, 510, 13, 407, 291, 51312], "temperature": 0.0, "avg_logprob": -0.13588345404898766, "compression_ratio": 1.7619047619047619, "no_speech_prob": 0.00011920648830709979}, {"id": 63, "seek": 35396, "start": 372.91999999999996, "end": 377.71999999999997, "text": " can have more print statements in here. You can just do anything you want basically in here.", "tokens": [51312, 393, 362, 544, 4482, 12363, 294, 510, 13, 509, 393, 445, 360, 1340, 291, 528, 1936, 294, 510, 13, 51552], "temperature": 0.0, "avg_logprob": -0.13588345404898766, "compression_ratio": 1.7619047619047619, "no_speech_prob": 0.00011920648830709979}, {"id": 64, "seek": 37772, "start": 378.36, "end": 385.72, "text": " And the same goes for else. Now, there is a possibility to write if statements kind of", "tokens": [50396, 400, 264, 912, 1709, 337, 1646, 13, 823, 11, 456, 307, 257, 7959, 281, 2464, 498, 12363, 733, 295, 50764], "temperature": 0.0, "avg_logprob": -0.0761723315462153, "compression_ratio": 1.6652173913043478, "no_speech_prob": 0.020713461562991142}, {"id": 65, "seek": 37772, "start": 385.72, "end": 391.08000000000004, "text": " without the curly brackets, but you don't see them that often, and I recommend that you actually", "tokens": [50764, 1553, 264, 32066, 26179, 11, 457, 291, 500, 380, 536, 552, 300, 2049, 11, 293, 286, 2748, 300, 291, 767, 51032], "temperature": 0.0, "avg_logprob": -0.0761723315462153, "compression_ratio": 1.6652173913043478, "no_speech_prob": 0.020713461562991142}, {"id": 66, "seek": 37772, "start": 391.08000000000004, "end": 396.92, "text": " always try to, as a convention, do with the curly brackets if you can. However, it is possible that", "tokens": [51032, 1009, 853, 281, 11, 382, 257, 10286, 11, 360, 365, 264, 32066, 26179, 498, 291, 393, 13, 2908, 11, 309, 307, 1944, 300, 51324], "temperature": 0.0, "avg_logprob": -0.0761723315462153, "compression_ratio": 1.6652173913043478, "no_speech_prob": 0.020713461562991142}, {"id": 67, "seek": 37772, "start": 396.92, "end": 403.16, "text": " inside a code base that you will work on with your colleagues, it is decided that it's okay to have", "tokens": [51324, 1854, 257, 3089, 3096, 300, 291, 486, 589, 322, 365, 428, 7734, 11, 309, 307, 3047, 300, 309, 311, 1392, 281, 362, 51636], "temperature": 0.0, "avg_logprob": -0.0761723315462153, "compression_ratio": 1.6652173913043478, "no_speech_prob": 0.020713461562991142}, {"id": 68, "seek": 40316, "start": 404.12, "end": 409.48, "text": " if statements without curly brackets where they are very simple and one-liners, basically.", "tokens": [50412, 498, 12363, 1553, 32066, 26179, 689, 436, 366, 588, 2199, 293, 472, 12, 5045, 433, 11, 1936, 13, 50680], "temperature": 0.0, "avg_logprob": -0.13175058856452862, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.008547840639948845}, {"id": 69, "seek": 40316, "start": 410.52000000000004, "end": 415.32000000000005, "text": " So let me show you an example of that. You could just say, if name is foo,", "tokens": [50732, 407, 718, 385, 855, 291, 364, 1365, 295, 300, 13, 509, 727, 445, 584, 11, 498, 1315, 307, 726, 78, 11, 50972], "temperature": 0.0, "avg_logprob": -0.13175058856452862, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.008547840639948845}, {"id": 70, "seek": 40316, "start": 417.8, "end": 424.20000000000005, "text": " and you would just say print, yes, this is foo. And this is completely accepted as well,", "tokens": [51096, 293, 291, 576, 445, 584, 4482, 11, 2086, 11, 341, 307, 726, 78, 13, 400, 341, 307, 2584, 9035, 382, 731, 11, 51416], "temperature": 0.0, "avg_logprob": -0.13175058856452862, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.008547840639948845}, {"id": 71, "seek": 40316, "start": 424.20000000000005, "end": 431.72, "text": " because it's a one-liner. But if you then say, okay, I want to have another line, print hello world,", "tokens": [51416, 570, 309, 311, 257, 472, 12, 36849, 13, 583, 498, 291, 550, 584, 11, 1392, 11, 286, 528, 281, 362, 1071, 1622, 11, 4482, 7751, 1002, 11, 51792], "temperature": 0.0, "avg_logprob": -0.13175058856452862, "compression_ratio": 1.5777777777777777, "no_speech_prob": 0.008547840639948845}, {"id": 72, "seek": 43316, "start": 433.32000000000005, "end": 441.08000000000004, "text": " you can see it goes to the next line, meaning that this line right here will be executed no matter", "tokens": [50372, 291, 393, 536, 309, 1709, 281, 264, 958, 1622, 11, 3620, 300, 341, 1622, 558, 510, 486, 312, 17577, 572, 1871, 50760], "temperature": 0.0, "avg_logprob": -0.0843347381143009, "compression_ratio": 1.664179104477612, "no_speech_prob": 6.713162292726338e-05}, {"id": 73, "seek": 43316, "start": 441.08000000000004, "end": 445.48, "text": " your condition up there. So this is completely detached from your if statement up here.", "tokens": [50760, 428, 4188, 493, 456, 13, 407, 341, 307, 2584, 42050, 490, 428, 498, 5629, 493, 510, 13, 50980], "temperature": 0.0, "avg_logprob": -0.0843347381143009, "compression_ratio": 1.664179104477612, "no_speech_prob": 6.713162292726338e-05}, {"id": 74, "seek": 43316, "start": 446.84000000000003, "end": 450.44000000000005, "text": " I just realized that it is quite important for me to be able to show line numbers.", "tokens": [51048, 286, 445, 5334, 300, 309, 307, 1596, 1021, 337, 385, 281, 312, 1075, 281, 855, 1622, 3547, 13, 51228], "temperature": 0.0, "avg_logprob": -0.0843347381143009, "compression_ratio": 1.664179104477612, "no_speech_prob": 6.713162292726338e-05}, {"id": 75, "seek": 43316, "start": 451.24, "end": 456.12, "text": " And by default, your editor probably has line numbers enabled. I usually disable line numbers", "tokens": [51268, 400, 538, 7576, 11, 428, 9839, 1391, 575, 1622, 3547, 15172, 13, 286, 2673, 28362, 1622, 3547, 51512], "temperature": 0.0, "avg_logprob": -0.0843347381143009, "compression_ratio": 1.664179104477612, "no_speech_prob": 6.713162292726338e-05}, {"id": 76, "seek": 43316, "start": 456.68, "end": 462.36, "text": " when I'm working myself, basically. But when talking about code with other people,", "tokens": [51540, 562, 286, 478, 1364, 2059, 11, 1936, 13, 583, 562, 1417, 466, 3089, 365, 661, 561, 11, 51824], "temperature": 0.0, "avg_logprob": -0.0843347381143009, "compression_ratio": 1.664179104477612, "no_speech_prob": 6.713162292726338e-05}, {"id": 77, "seek": 46236, "start": 462.36, "end": 466.2, "text": " it's quite useful to have line numbers, because I can then tell you, oh, look at line nine or", "tokens": [50364, 309, 311, 1596, 4420, 281, 362, 1622, 3547, 11, 570, 286, 393, 550, 980, 291, 11, 1954, 11, 574, 412, 1622, 4949, 420, 50556], "temperature": 0.0, "avg_logprob": -0.10918872697012764, "compression_ratio": 1.545945945945946, "no_speech_prob": 1.77084202732658e-05}, {"id": 78, "seek": 46236, "start": 466.2, "end": 476.52000000000004, "text": " look at line 10. Okay. So that's the basic of if and else. Now, you can also have if right after", "tokens": [50556, 574, 412, 1622, 1266, 13, 1033, 13, 407, 300, 311, 264, 3875, 295, 498, 293, 1646, 13, 823, 11, 291, 393, 611, 362, 498, 558, 934, 51072], "temperature": 0.0, "avg_logprob": -0.10918872697012764, "compression_ratio": 1.545945945945946, "no_speech_prob": 1.77084202732658e-05}, {"id": 79, "seek": 46236, "start": 476.52000000000004, "end": 486.92, "text": " else. So an example of that is, for instance, to say if name is foo, and then you do some code,", "tokens": [51072, 1646, 13, 407, 364, 1365, 295, 300, 307, 11, 337, 5197, 11, 281, 584, 498, 1315, 307, 726, 78, 11, 293, 550, 291, 360, 512, 3089, 11, 51592], "temperature": 0.0, "avg_logprob": -0.10918872697012764, "compression_ratio": 1.545945945945946, "no_speech_prob": 1.77084202732658e-05}, {"id": 80, "seek": 48692, "start": 486.92, "end": 495.72, "text": " all right? You say print, yes, it is foo. Not food. After the curly bracket, then you would say", "tokens": [50364, 439, 558, 30, 509, 584, 4482, 11, 2086, 11, 309, 307, 726, 78, 13, 1726, 1755, 13, 2381, 264, 32066, 16904, 11, 550, 291, 576, 584, 50804], "temperature": 0.0, "avg_logprob": -0.15612999755557222, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.001653198734857142}, {"id": 81, "seek": 48692, "start": 495.72, "end": 502.84000000000003, "text": " else. And then you can then say another if, else if. All right? And then after if comes the", "tokens": [50804, 1646, 13, 400, 550, 291, 393, 550, 584, 1071, 498, 11, 1646, 498, 13, 1057, 558, 30, 400, 550, 934, 498, 1487, 264, 51160], "temperature": 0.0, "avg_logprob": -0.15612999755557222, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.001653198734857142}, {"id": 82, "seek": 48692, "start": 503.40000000000003, "end": 508.76, "text": " parenthesis and a curly bracket, if you remember from the if before. It is the exact same syntax", "tokens": [51188, 23350, 9374, 293, 257, 32066, 16904, 11, 498, 291, 1604, 490, 264, 498, 949, 13, 467, 307, 264, 1900, 912, 28431, 51456], "temperature": 0.0, "avg_logprob": -0.15612999755557222, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.001653198734857142}, {"id": 83, "seek": 48692, "start": 508.76, "end": 514.76, "text": " as it is here. So there's pretty much no difference. You can see if and then if.", "tokens": [51456, 382, 309, 307, 510, 13, 407, 456, 311, 1238, 709, 572, 2649, 13, 509, 393, 536, 498, 293, 550, 498, 13, 51756], "temperature": 0.0, "avg_logprob": -0.15612999755557222, "compression_ratio": 1.6820276497695852, "no_speech_prob": 0.001653198734857142}, {"id": 84, "seek": 51476, "start": 515.72, "end": 521.16, "text": " And then you put your condition in here. You would just say if name. And then you may just want to", "tokens": [50412, 400, 550, 291, 829, 428, 4188, 294, 510, 13, 509, 576, 445, 584, 498, 1315, 13, 400, 550, 291, 815, 445, 528, 281, 50684], "temperature": 0.0, "avg_logprob": -0.11303944201082797, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.00041366895311512053}, {"id": 85, "seek": 51476, "start": 521.16, "end": 528.76, "text": " say is not. And that's another operator. It's basically is a not operator. So it's checking", "tokens": [50684, 584, 307, 406, 13, 400, 300, 311, 1071, 12973, 13, 467, 311, 1936, 307, 257, 406, 12973, 13, 407, 309, 311, 8568, 51064], "temperature": 0.0, "avg_logprob": -0.11303944201082797, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.00041366895311512053}, {"id": 86, "seek": 51476, "start": 528.76, "end": 534.12, "text": " to make sure that this name is not of the value that you provide to the right-hand side.", "tokens": [51064, 281, 652, 988, 300, 341, 1315, 307, 406, 295, 264, 2158, 300, 291, 2893, 281, 264, 558, 12, 5543, 1252, 13, 51332], "temperature": 0.0, "avg_logprob": -0.11303944201082797, "compression_ratio": 1.603448275862069, "no_speech_prob": 0.00041366895311512053}, {"id": 87, "seek": 53412, "start": 535.0, "end": 545.64, "text": " And then you can say bar. And print. This value is not bar. Else. And then you can wrap it up,", "tokens": [50408, 400, 550, 291, 393, 584, 2159, 13, 400, 4482, 13, 639, 2158, 307, 406, 2159, 13, 45472, 13, 400, 550, 291, 393, 7019, 309, 493, 11, 50940], "temperature": 0.0, "avg_logprob": -0.1887950897216797, "compression_ratio": 1.576086956521739, "no_speech_prob": 0.016409970819950104}, {"id": 88, "seek": 53412, "start": 545.64, "end": 554.2, "text": " and you can say print. I don't know what this is. Now, I'm so glad I actually accidentally ran into", "tokens": [50940, 293, 291, 393, 584, 4482, 13, 286, 500, 380, 458, 437, 341, 307, 13, 823, 11, 286, 478, 370, 5404, 286, 767, 15715, 5872, 666, 51368], "temperature": 0.0, "avg_logprob": -0.1887950897216797, "compression_ratio": 1.576086956521739, "no_speech_prob": 0.016409970819950104}, {"id": 89, "seek": 53412, "start": 554.2, "end": 559.24, "text": " this issue. As you can see now, the editor is kind of going crazy, and Dart's not understanding", "tokens": [51368, 341, 2734, 13, 1018, 291, 393, 536, 586, 11, 264, 9839, 307, 733, 295, 516, 3219, 11, 293, 30271, 311, 406, 3701, 51620], "temperature": 0.0, "avg_logprob": -0.1887950897216797, "compression_ratio": 1.576086956521739, "no_speech_prob": 0.016409970819950104}, {"id": 90, "seek": 55924, "start": 559.24, "end": 564.84, "text": " and Dart's not understanding what this statement is. And as we talked about it previously,", "tokens": [50364, 293, 30271, 311, 406, 3701, 437, 341, 5629, 307, 13, 400, 382, 321, 2825, 466, 309, 8046, 11, 50644], "temperature": 0.0, "avg_logprob": -0.11339037153455946, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.020102564245462418}, {"id": 91, "seek": 55924, "start": 566.12, "end": 572.52, "text": " strings in Dart are preferred to have to be kind of like created with single codes. However,", "tokens": [50708, 13985, 294, 30271, 366, 16494, 281, 362, 281, 312, 733, 295, 411, 2942, 365, 2167, 14211, 13, 2908, 11, 51028], "temperature": 0.0, "avg_logprob": -0.11339037153455946, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.020102564245462418}, {"id": 92, "seek": 55924, "start": 572.52, "end": 577.72, "text": " if your string in itself contains a single code, for instance, in this case, the word don't", "tokens": [51028, 498, 428, 6798, 294, 2564, 8306, 257, 2167, 3089, 11, 337, 5197, 11, 294, 341, 1389, 11, 264, 1349, 500, 380, 51288], "temperature": 0.0, "avg_logprob": -0.11339037153455946, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.020102564245462418}, {"id": 93, "seek": 55924, "start": 579.08, "end": 585.72, "text": " contains a single code, then Dart kind of gets confused. Like, okay, does the string end here?", "tokens": [51356, 8306, 257, 2167, 3089, 11, 550, 30271, 733, 295, 2170, 9019, 13, 1743, 11, 1392, 11, 775, 264, 6798, 917, 510, 30, 51688], "temperature": 0.0, "avg_logprob": -0.11339037153455946, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.020102564245462418}, {"id": 94, "seek": 58572, "start": 585.72, "end": 591.72, "text": " You can see up until this point, it's green. So it's thinking, oh, the string ends here,", "tokens": [50364, 509, 393, 536, 493, 1826, 341, 935, 11, 309, 311, 3092, 13, 407, 309, 311, 1953, 11, 1954, 11, 264, 6798, 5314, 510, 11, 50664], "temperature": 0.0, "avg_logprob": -0.1461178970336914, "compression_ratio": 1.4761904761904763, "no_speech_prob": 0.0013483589282259345}, {"id": 95, "seek": 58572, "start": 591.72, "end": 598.2, "text": " but what is all of this then? That follows. If you have that problem, there are two ways of", "tokens": [50664, 457, 437, 307, 439, 295, 341, 550, 30, 663, 10002, 13, 759, 291, 362, 300, 1154, 11, 456, 366, 732, 2098, 295, 50988], "temperature": 0.0, "avg_logprob": -0.1461178970336914, "compression_ratio": 1.4761904761904763, "no_speech_prob": 0.0013483589282259345}, {"id": 96, "seek": 58572, "start": 598.2, "end": 608.6800000000001, "text": " fixing that. Either you escape your single code, and that is a software kind of development lingo.", "tokens": [50988, 19442, 300, 13, 13746, 291, 7615, 428, 2167, 3089, 11, 293, 300, 307, 257, 4722, 733, 295, 3250, 287, 18459, 13, 51512], "temperature": 0.0, "avg_logprob": -0.1461178970336914, "compression_ratio": 1.4761904761904763, "no_speech_prob": 0.0013483589282259345}, {"id": 97, "seek": 60868, "start": 608.68, "end": 618.52, "text": " Escape. If you hear that, it pretty much just means that you are kind of wrapping it in a way", "tokens": [50364, 42960, 13, 759, 291, 1568, 300, 11, 309, 1238, 709, 445, 1355, 300, 291, 366, 733, 295, 21993, 309, 294, 257, 636, 50856], "temperature": 0.0, "avg_logprob": -0.10918023414218549, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.13604417443275452}, {"id": 98, "seek": 60868, "start": 619.56, "end": 624.3599999999999, "text": " that Dart understands that you don't mean it literally. You don't mean that I want to", "tokens": [50908, 300, 30271, 15146, 300, 291, 500, 380, 914, 309, 3736, 13, 509, 500, 380, 914, 300, 286, 528, 281, 51148], "temperature": 0.0, "avg_logprob": -0.10918023414218549, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.13604417443275452}, {"id": 99, "seek": 60868, "start": 624.3599999999999, "end": 629.7199999999999, "text": " end my string here, except that this needs to be escaped and put in the string as its own value.", "tokens": [51148, 917, 452, 6798, 510, 11, 3993, 300, 341, 2203, 281, 312, 20397, 293, 829, 294, 264, 6798, 382, 1080, 1065, 2158, 13, 51416], "temperature": 0.0, "avg_logprob": -0.10918023414218549, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.13604417443275452}, {"id": 100, "seek": 60868, "start": 629.7199999999999, "end": 634.92, "text": " Basically, it's kind of difficult to explain, but I think you know what I mean. So that's one way", "tokens": [51416, 8537, 11, 309, 311, 733, 295, 2252, 281, 2903, 11, 457, 286, 519, 291, 458, 437, 286, 914, 13, 407, 300, 311, 472, 636, 51676], "temperature": 0.0, "avg_logprob": -0.10918023414218549, "compression_ratio": 1.6622222222222223, "no_speech_prob": 0.13604417443275452}, {"id": 101, "seek": 63492, "start": 634.92, "end": 640.1999999999999, "text": " of doing it. It's a little bit dirty. So in case you run into this issue, it's best to actually", "tokens": [50364, 295, 884, 309, 13, 467, 311, 257, 707, 857, 9360, 13, 407, 294, 1389, 291, 1190, 666, 341, 2734, 11, 309, 311, 1151, 281, 767, 50628], "temperature": 0.0, "avg_logprob": -0.11444924020359659, "compression_ratio": 1.7380073800738007, "no_speech_prob": 0.005252629518508911}, {"id": 102, "seek": 63492, "start": 640.1999999999999, "end": 645.64, "text": " wrap your entire string in double quotes. And this way, then Dart understands that whatever", "tokens": [50628, 7019, 428, 2302, 6798, 294, 3834, 19963, 13, 400, 341, 636, 11, 550, 30271, 15146, 300, 2035, 50900], "temperature": 0.0, "avg_logprob": -0.11444924020359659, "compression_ratio": 1.7380073800738007, "no_speech_prob": 0.005252629518508911}, {"id": 103, "seek": 63492, "start": 645.64, "end": 651.8, "text": " comes in here is okay. Like a single code is completely okay. Unless you actually want to have", "tokens": [50900, 1487, 294, 510, 307, 1392, 13, 1743, 257, 2167, 3089, 307, 2584, 1392, 13, 16581, 291, 767, 528, 281, 362, 51208], "temperature": 0.0, "avg_logprob": -0.11444924020359659, "compression_ratio": 1.7380073800738007, "no_speech_prob": 0.005252629518508911}, {"id": 104, "seek": 63492, "start": 652.4399999999999, "end": 659.48, "text": " a double quotes in your string that is enclosed with double quotes again. So you'll see if I", "tokens": [51240, 257, 3834, 19963, 294, 428, 6798, 300, 307, 42089, 365, 3834, 19963, 797, 13, 407, 291, 603, 536, 498, 286, 51592], "temperature": 0.0, "avg_logprob": -0.11444924020359659, "compression_ratio": 1.7380073800738007, "no_speech_prob": 0.005252629518508911}, {"id": 105, "seek": 63492, "start": 659.48, "end": 664.68, "text": " put a double quote here, then Dart goes crazy. So you can escape it with a backslash like that.", "tokens": [51592, 829, 257, 3834, 6513, 510, 11, 550, 30271, 1709, 3219, 13, 407, 291, 393, 7615, 309, 365, 257, 646, 10418, 1299, 411, 300, 13, 51852], "temperature": 0.0, "avg_logprob": -0.11444924020359659, "compression_ratio": 1.7380073800738007, "no_speech_prob": 0.005252629518508911}, {"id": 106, "seek": 66492, "start": 665.7199999999999, "end": 670.4399999999999, "text": " So if you have single quotes and double quotes in your string, then you will have to kind of", "tokens": [50404, 407, 498, 291, 362, 2167, 19963, 293, 3834, 19963, 294, 428, 6798, 11, 550, 291, 486, 362, 281, 733, 295, 50640], "temperature": 0.0, "avg_logprob": -0.06196262696210076, "compression_ratio": 2.1871345029239766, "no_speech_prob": 3.212737647118047e-05}, {"id": 107, "seek": 66492, "start": 670.4399999999999, "end": 675.24, "text": " pick a convention. Either you enclose the entire string in single quotes and escape your single", "tokens": [50640, 1888, 257, 10286, 13, 13746, 291, 20987, 541, 264, 2302, 6798, 294, 2167, 19963, 293, 7615, 428, 2167, 50880], "temperature": 0.0, "avg_logprob": -0.06196262696210076, "compression_ratio": 2.1871345029239766, "no_speech_prob": 3.212737647118047e-05}, {"id": 108, "seek": 66492, "start": 675.24, "end": 681.56, "text": " quotes inside that string and let the double quotes live, or you enclose your entire string", "tokens": [50880, 19963, 1854, 300, 6798, 293, 718, 264, 3834, 19963, 1621, 11, 420, 291, 20987, 541, 428, 2302, 6798, 51196], "temperature": 0.0, "avg_logprob": -0.06196262696210076, "compression_ratio": 2.1871345029239766, "no_speech_prob": 3.212737647118047e-05}, {"id": 109, "seek": 66492, "start": 681.56, "end": 690.36, "text": " in double quotes and then you will escape your double quotes in the string. I hope that makes", "tokens": [51196, 294, 3834, 19963, 293, 550, 291, 486, 7615, 428, 3834, 19963, 294, 264, 6798, 13, 286, 1454, 300, 1669, 51636], "temperature": 0.0, "avg_logprob": -0.06196262696210076, "compression_ratio": 2.1871345029239766, "no_speech_prob": 3.212737647118047e-05}, {"id": 110, "seek": 69036, "start": 690.36, "end": 700.6800000000001, "text": " sense. So that is if and else in a nutshell. But before I move on, I kind of want to explain", "tokens": [50364, 2020, 13, 407, 300, 307, 498, 293, 1646, 294, 257, 37711, 13, 583, 949, 286, 1286, 322, 11, 286, 733, 295, 528, 281, 2903, 50880], "temperature": 0.0, "avg_logprob": -0.09651312497582766, "compression_ratio": 1.609442060085837, "no_speech_prob": 0.007731534540653229}, {"id": 111, "seek": 69036, "start": 700.6800000000001, "end": 705.8000000000001, "text": " an important concept here in that when Dart executes this code, it kind of goes by line by", "tokens": [50880, 364, 1021, 3410, 510, 294, 300, 562, 30271, 4454, 1819, 341, 3089, 11, 309, 733, 295, 1709, 538, 1622, 538, 51136], "temperature": 0.0, "avg_logprob": -0.09651312497582766, "compression_ratio": 1.609442060085837, "no_speech_prob": 0.007731534540653229}, {"id": 112, "seek": 69036, "start": 705.8000000000001, "end": 711.32, "text": " line. So it starts with line seven, the execution of this test function. Then it comes here and", "tokens": [51136, 1622, 13, 407, 309, 3719, 365, 1622, 3407, 11, 264, 15058, 295, 341, 1500, 2445, 13, 1396, 309, 1487, 510, 293, 51412], "temperature": 0.0, "avg_logprob": -0.09651312497582766, "compression_ratio": 1.609442060085837, "no_speech_prob": 0.007731534540653229}, {"id": 113, "seek": 69036, "start": 711.32, "end": 717.5600000000001, "text": " it says, okay, name is foo, all right. And it's actually saying that we prefer const. So let me", "tokens": [51412, 309, 1619, 11, 1392, 11, 1315, 307, 726, 78, 11, 439, 558, 13, 400, 309, 311, 767, 1566, 300, 321, 4382, 1817, 13, 407, 718, 385, 51724], "temperature": 0.0, "avg_logprob": -0.09651312497582766, "compression_ratio": 1.609442060085837, "no_speech_prob": 0.007731534540653229}, {"id": 114, "seek": 71756, "start": 717.56, "end": 727.0799999999999, "text": " change that to const. And it says, okay, if name is foo, all right, then it comes over here. But", "tokens": [50364, 1319, 300, 281, 1817, 13, 400, 309, 1619, 11, 1392, 11, 498, 1315, 307, 726, 78, 11, 439, 558, 11, 550, 309, 1487, 670, 510, 13, 583, 50840], "temperature": 0.0, "avg_logprob": -0.09696909655695377, "compression_ratio": 1.6569767441860466, "no_speech_prob": 0.00210423837415874}, {"id": 115, "seek": 71756, "start": 727.0799999999999, "end": 735.0, "text": " let's just change that to foo with triple o. Actually, yeah, no, let's not do that. Let's", "tokens": [50840, 718, 311, 445, 1319, 300, 281, 726, 78, 365, 15508, 277, 13, 5135, 11, 1338, 11, 572, 11, 718, 311, 406, 360, 300, 13, 961, 311, 51236], "temperature": 0.0, "avg_logprob": -0.09696909655695377, "compression_ratio": 1.6569767441860466, "no_speech_prob": 0.00210423837415874}, {"id": 116, "seek": 71756, "start": 735.0, "end": 742.4399999999999, "text": " keep it as foo. So it says if name is foo. Then it says, yeah, that's true. And then it goes here.", "tokens": [51236, 1066, 309, 382, 726, 78, 13, 407, 309, 1619, 498, 1315, 307, 726, 78, 13, 1396, 309, 1619, 11, 1338, 11, 300, 311, 2074, 13, 400, 550, 309, 1709, 510, 13, 51608], "temperature": 0.0, "avg_logprob": -0.09696909655695377, "compression_ratio": 1.6569767441860466, "no_speech_prob": 0.00210423837415874}, {"id": 117, "seek": 74244, "start": 742.44, "end": 751.72, "text": " However, as you can see, the line number 11 also says if name is not bar, then it should execute", "tokens": [50364, 2908, 11, 382, 291, 393, 536, 11, 264, 1622, 1230, 2975, 611, 1619, 498, 1315, 307, 406, 2159, 11, 550, 309, 820, 14483, 50828], "temperature": 0.0, "avg_logprob": -0.06637711067722268, "compression_ratio": 1.5698324022346368, "no_speech_prob": 0.008484221063554287}, {"id": 118, "seek": 74244, "start": 751.72, "end": 759.96, "text": " this as well. And you can see that foo is not bar. So this condition is also true. However,", "tokens": [50828, 341, 382, 731, 13, 400, 291, 393, 536, 300, 726, 78, 307, 406, 2159, 13, 407, 341, 4188, 307, 611, 2074, 13, 2908, 11, 51240], "temperature": 0.0, "avg_logprob": -0.06637711067722268, "compression_ratio": 1.5698324022346368, "no_speech_prob": 0.008484221063554287}, {"id": 119, "seek": 74244, "start": 759.96, "end": 767.08, "text": " this will never be executed. And that is because when Dart goes inside these curly brackets,", "tokens": [51240, 341, 486, 1128, 312, 17577, 13, 400, 300, 307, 570, 562, 30271, 1709, 1854, 613, 32066, 26179, 11, 51596], "temperature": 0.0, "avg_logprob": -0.06637711067722268, "compression_ratio": 1.5698324022346368, "no_speech_prob": 0.008484221063554287}, {"id": 120, "seek": 76708, "start": 767.08, "end": 771.8000000000001, "text": " then it says, okay, I did what I had to do. I did my print statement. The rest I ignore.", "tokens": [50364, 550, 309, 1619, 11, 1392, 11, 286, 630, 437, 286, 632, 281, 360, 13, 286, 630, 452, 4482, 5629, 13, 440, 1472, 286, 11200, 13, 50600], "temperature": 0.0, "avg_logprob": -0.09714990907961184, "compression_ratio": 1.7123893805309736, "no_speech_prob": 0.038651544600725174}, {"id": 121, "seek": 76708, "start": 772.6800000000001, "end": 780.6, "text": " So an if statement is kind of like, it puts a stop. When it falls into one of these if statements,", "tokens": [50644, 407, 364, 498, 5629, 307, 733, 295, 411, 11, 309, 8137, 257, 1590, 13, 1133, 309, 8804, 666, 472, 295, 613, 498, 12363, 11, 51040], "temperature": 0.0, "avg_logprob": -0.09714990907961184, "compression_ratio": 1.7123893805309736, "no_speech_prob": 0.038651544600725174}, {"id": 122, "seek": 76708, "start": 780.6, "end": 787.0, "text": " it kind of says, okay, I did my job in this entire if else block, then I will execute the code after", "tokens": [51040, 309, 733, 295, 1619, 11, 1392, 11, 286, 630, 452, 1691, 294, 341, 2302, 498, 1646, 3461, 11, 550, 286, 486, 14483, 264, 3089, 934, 51360], "temperature": 0.0, "avg_logprob": -0.09714990907961184, "compression_ratio": 1.7123893805309736, "no_speech_prob": 0.038651544600725174}, {"id": 123, "seek": 76708, "start": 787.0, "end": 792.6800000000001, "text": " that. So if I clear the console here and press command S, you can see it only says yes, it is foo.", "tokens": [51360, 300, 13, 407, 498, 286, 1850, 264, 11076, 510, 293, 1886, 5622, 318, 11, 291, 393, 536, 309, 787, 1619, 2086, 11, 309, 307, 726, 78, 13, 51644], "temperature": 0.0, "avg_logprob": -0.09714990907961184, "compression_ratio": 1.7123893805309736, "no_speech_prob": 0.038651544600725174}, {"id": 124, "seek": 79268, "start": 792.68, "end": 801.4, "text": " It doesn't come here. However, if you change this condition so that the Dart compiler or", "tokens": [50364, 467, 1177, 380, 808, 510, 13, 2908, 11, 498, 291, 1319, 341, 4188, 370, 300, 264, 30271, 31958, 420, 50800], "temperature": 0.0, "avg_logprob": -0.08201583364735479, "compression_ratio": 1.7163636363636363, "no_speech_prob": 0.01535770483314991}, {"id": 125, "seek": 79268, "start": 802.04, "end": 806.76, "text": " basically the execution of the program doesn't fall into line number 10, it will eventually fall", "tokens": [50832, 1936, 264, 15058, 295, 264, 1461, 1177, 380, 2100, 666, 1622, 1230, 1266, 11, 309, 486, 4728, 2100, 51068], "temperature": 0.0, "avg_logprob": -0.08201583364735479, "compression_ratio": 1.7163636363636363, "no_speech_prob": 0.01535770483314991}, {"id": 126, "seek": 79268, "start": 806.76, "end": 812.5999999999999, "text": " to line number 12. So you can see it says this value is not bar. So when you're writing your if", "tokens": [51068, 281, 1622, 1230, 2272, 13, 407, 291, 393, 536, 309, 1619, 341, 2158, 307, 406, 2159, 13, 407, 562, 291, 434, 3579, 428, 498, 51360], "temperature": 0.0, "avg_logprob": -0.08201583364735479, "compression_ratio": 1.7163636363636363, "no_speech_prob": 0.01535770483314991}, {"id": 127, "seek": 79268, "start": 812.5999999999999, "end": 816.8399999999999, "text": " statement and else statements, just be careful with that. Just know that it's kind of like as", "tokens": [51360, 5629, 293, 1646, 12363, 11, 445, 312, 5026, 365, 300, 13, 1449, 458, 300, 309, 311, 733, 295, 411, 382, 51572], "temperature": 0.0, "avg_logprob": -0.08201583364735479, "compression_ratio": 1.7163636363636363, "no_speech_prob": 0.01535770483314991}, {"id": 128, "seek": 79268, "start": 816.8399999999999, "end": 822.04, "text": " soon as the code jumps into one of those branches, it doesn't go to the rest of the branches and", "tokens": [51572, 2321, 382, 264, 3089, 16704, 666, 472, 295, 729, 14770, 11, 309, 1177, 380, 352, 281, 264, 1472, 295, 264, 14770, 293, 51832], "temperature": 0.0, "avg_logprob": -0.08201583364735479, "compression_ratio": 1.7163636363636363, "no_speech_prob": 0.01535770483314991}, {"id": 129, "seek": 82204, "start": 822.04, "end": 836.52, "text": " checks them basically. All right. Okay. That was for if and else. Now let me check that in my notes", "tokens": [50364, 13834, 552, 1936, 13, 1057, 558, 13, 1033, 13, 663, 390, 337, 498, 293, 1646, 13, 823, 718, 385, 1520, 300, 294, 452, 5570, 51088], "temperature": 0.0, "avg_logprob": -0.1023946817104633, "compression_ratio": 1.3741007194244603, "no_speech_prob": 5.02609254908748e-05}, {"id": 130, "seek": 82204, "start": 836.52, "end": 847.64, "text": " that we've talked about that. What we need to do now is to talk about operators. Operators,", "tokens": [51088, 300, 321, 600, 2825, 466, 300, 13, 708, 321, 643, 281, 360, 586, 307, 281, 751, 466, 19077, 13, 12480, 3391, 11, 51644], "temperature": 0.0, "avg_logprob": -0.1023946817104633, "compression_ratio": 1.3741007194244603, "no_speech_prob": 5.02609254908748e-05}, {"id": 131, "seek": 84764, "start": 847.72, "end": 854.6, "text": " there are three different types of operators. There are prefix operators, infix operators,", "tokens": [50368, 456, 366, 1045, 819, 3467, 295, 19077, 13, 821, 366, 46969, 19077, 11, 1536, 970, 19077, 11, 50712], "temperature": 0.0, "avg_logprob": -0.19783800565279447, "compression_ratio": 1.6198830409356726, "no_speech_prob": 0.0009749130113050342}, {"id": 132, "seek": 84764, "start": 854.6, "end": 867.3199999999999, "text": " and suffix operators. And I will explain them to you how they work. I think to explain operators", "tokens": [50712, 293, 3889, 970, 19077, 13, 400, 286, 486, 2903, 552, 281, 291, 577, 436, 589, 13, 286, 519, 281, 2903, 19077, 51348], "temperature": 0.0, "avg_logprob": -0.19783800565279447, "compression_ratio": 1.6198830409356726, "no_speech_prob": 0.0009749130113050342}, {"id": 133, "seek": 84764, "start": 867.3199999999999, "end": 872.12, "text": " probably is best that we talk about numbers. So let's go in this test function and delete", "tokens": [51348, 1391, 307, 1151, 300, 321, 751, 466, 3547, 13, 407, 718, 311, 352, 294, 341, 1500, 2445, 293, 12097, 51588], "temperature": 0.0, "avg_logprob": -0.19783800565279447, "compression_ratio": 1.6198830409356726, "no_speech_prob": 0.0009749130113050342}, {"id": 134, "seek": 87212, "start": 872.28, "end": 877.48, "text": " in this test function and delete everything that we've written here. And let me just say final", "tokens": [50372, 294, 341, 1500, 2445, 293, 12097, 1203, 300, 321, 600, 3720, 510, 13, 400, 718, 385, 445, 584, 2572, 50632], "temperature": 0.0, "avg_logprob": -0.16736520891604217, "compression_ratio": 1.6533333333333333, "no_speech_prob": 0.02648838236927986}, {"id": 135, "seek": 87212, "start": 878.84, "end": 887.16, "text": " age is 20. All right. So now we created a variable whose value cannot be changed after", "tokens": [50700, 3205, 307, 945, 13, 1057, 558, 13, 407, 586, 321, 2942, 257, 7006, 6104, 2158, 2644, 312, 3105, 934, 51116], "temperature": 0.0, "avg_logprob": -0.16736520891604217, "compression_ratio": 1.6533333333333333, "no_speech_prob": 0.02648838236927986}, {"id": 136, "seek": 87212, "start": 887.16, "end": 892.44, "text": " it's been assigned to because we create as a final a variable whose value is 20. All right.", "tokens": [51116, 309, 311, 668, 13279, 281, 570, 321, 1884, 382, 257, 2572, 257, 7006, 6104, 2158, 307, 945, 13, 1057, 558, 13, 51380], "temperature": 0.0, "avg_logprob": -0.16736520891604217, "compression_ratio": 1.6533333333333333, "no_speech_prob": 0.02648838236927986}, {"id": 137, "seek": 87212, "start": 892.44, "end": 898.44, "text": " Now if you want to calculate half of this value, how would you do that? Well, there is an operator", "tokens": [51380, 823, 498, 291, 528, 281, 8873, 1922, 295, 341, 2158, 11, 577, 576, 291, 360, 300, 30, 1042, 11, 456, 307, 364, 12973, 51680], "temperature": 0.0, "avg_logprob": -0.16736520891604217, "compression_ratio": 1.6533333333333333, "no_speech_prob": 0.02648838236927986}, {"id": 138, "seek": 89844, "start": 898.44, "end": 905.8000000000001, "text": " for that and that is a division operator. So you would just say, for instance, final half of age.", "tokens": [50364, 337, 300, 293, 300, 307, 257, 10044, 12973, 13, 407, 291, 576, 445, 584, 11, 337, 5197, 11, 2572, 1922, 295, 3205, 13, 50732], "temperature": 0.0, "avg_logprob": -0.12265204400131383, "compression_ratio": 1.6977777777777778, "no_speech_prob": 0.011239394545555115}, {"id": 139, "seek": 89844, "start": 905.8000000000001, "end": 910.6, "text": " As you can see, we're using camel case as I explained in the previous chapter. An easy way", "tokens": [50732, 1018, 291, 393, 536, 11, 321, 434, 1228, 37755, 1389, 382, 286, 8825, 294, 264, 3894, 7187, 13, 1107, 1858, 636, 50972], "temperature": 0.0, "avg_logprob": -0.12265204400131383, "compression_ratio": 1.6977777777777778, "no_speech_prob": 0.011239394545555115}, {"id": 140, "seek": 89844, "start": 910.6, "end": 919.4000000000001, "text": " to do camel case is to say half of age is writing in English, change the first letter of like this", "tokens": [50972, 281, 360, 37755, 1389, 307, 281, 584, 1922, 295, 3205, 307, 3579, 294, 3669, 11, 1319, 264, 700, 5063, 295, 411, 341, 51412], "temperature": 0.0, "avg_logprob": -0.12265204400131383, "compression_ratio": 1.6977777777777778, "no_speech_prob": 0.011239394545555115}, {"id": 141, "seek": 89844, "start": 919.4000000000001, "end": 923.8800000000001, "text": " here. Change the first letter of all the words except for the first word to uppercase and then", "tokens": [51412, 510, 13, 15060, 264, 700, 5063, 295, 439, 264, 2283, 3993, 337, 264, 700, 1349, 281, 11775, 2869, 651, 293, 550, 51636], "temperature": 0.0, "avg_logprob": -0.12265204400131383, "compression_ratio": 1.6977777777777778, "no_speech_prob": 0.011239394545555115}, {"id": 142, "seek": 92388, "start": 923.88, "end": 930.2, "text": " remove all the spaces. That's camel case. So half of age is age. And then there is a great", "tokens": [50364, 4159, 439, 264, 7673, 13, 663, 311, 37755, 1389, 13, 407, 1922, 295, 3205, 307, 3205, 13, 400, 550, 456, 307, 257, 869, 50680], "temperature": 0.0, "avg_logprob": -0.15988348659716153, "compression_ratio": 1.6646706586826348, "no_speech_prob": 0.007971548475325108}, {"id": 143, "seek": 92388, "start": 930.2, "end": 937.48, "text": " operator in Dart called a division operator. And then you would say two. All right. And then", "tokens": [50680, 12973, 294, 30271, 1219, 257, 10044, 12973, 13, 400, 550, 291, 576, 584, 732, 13, 1057, 558, 13, 400, 550, 51044], "temperature": 0.0, "avg_logprob": -0.15988348659716153, "compression_ratio": 1.6646706586826348, "no_speech_prob": 0.007971548475325108}, {"id": 144, "seek": 92388, "start": 937.48, "end": 946.2, "text": " you could just say print half of age. So command S. And that says 10. All right. So that's the", "tokens": [51044, 291, 727, 445, 584, 4482, 1922, 295, 3205, 13, 407, 5622, 318, 13, 400, 300, 1619, 1266, 13, 1057, 558, 13, 407, 300, 311, 264, 51480], "temperature": 0.0, "avg_logprob": -0.15988348659716153, "compression_ratio": 1.6646706586826348, "no_speech_prob": 0.007971548475325108}, {"id": 145, "seek": 94620, "start": 946.2, "end": 952.44, "text": " division operator. And then you will have, let's say, final double the age.", "tokens": [50364, 10044, 12973, 13, 400, 550, 291, 486, 362, 11, 718, 311, 584, 11, 2572, 3834, 264, 3205, 13, 50676], "temperature": 0.0, "avg_logprob": -0.1526775079614976, "compression_ratio": 1.679245283018868, "no_speech_prob": 0.024060774594545364}, {"id": 146, "seek": 94620, "start": 954.84, "end": 961.48, "text": " And then we will say age multiplied by two. It's kind of like a star. That is an operator. And you", "tokens": [50796, 400, 550, 321, 486, 584, 3205, 17207, 538, 732, 13, 467, 311, 733, 295, 411, 257, 3543, 13, 663, 307, 364, 12973, 13, 400, 291, 51128], "temperature": 0.0, "avg_logprob": -0.1526775079614976, "compression_ratio": 1.679245283018868, "no_speech_prob": 0.024060774594545364}, {"id": 147, "seek": 94620, "start": 961.48, "end": 970.6, "text": " can see these both operators, this one, the division and the multiplication, multiplication,", "tokens": [51128, 393, 536, 613, 1293, 19077, 11, 341, 472, 11, 264, 10044, 293, 264, 27290, 11, 27290, 11, 51584], "temperature": 0.0, "avg_logprob": -0.1526775079614976, "compression_ratio": 1.679245283018868, "no_speech_prob": 0.024060774594545364}, {"id": 148, "seek": 97060, "start": 970.6800000000001, "end": 977.5600000000001, "text": " it's a bit difficult to say, operators are infix operators. And an infix operator is an operator", "tokens": [50368, 309, 311, 257, 857, 2252, 281, 584, 11, 19077, 366, 1536, 970, 19077, 13, 400, 364, 1536, 970, 12973, 307, 364, 12973, 50712], "temperature": 0.0, "avg_logprob": -0.10758300892357688, "compression_ratio": 1.7832512315270936, "no_speech_prob": 0.011005917564034462}, {"id": 149, "seek": 97060, "start": 977.5600000000001, "end": 981.88, "text": " that has two parameters, one to its right and one to its left. I don't know how you can actually,", "tokens": [50712, 300, 575, 732, 9834, 11, 472, 281, 1080, 558, 293, 472, 281, 1080, 1411, 13, 286, 500, 380, 458, 577, 291, 393, 767, 11, 50928], "temperature": 0.0, "avg_logprob": -0.10758300892357688, "compression_ratio": 1.7832512315270936, "no_speech_prob": 0.011005917564034462}, {"id": 150, "seek": 97060, "start": 982.6, "end": 989.08, "text": " yeah, one to each side. I don't know if my video is mirrored. So if my right hand is actually", "tokens": [50964, 1338, 11, 472, 281, 1184, 1252, 13, 286, 500, 380, 458, 498, 452, 960, 307, 3149, 340, 986, 13, 407, 498, 452, 558, 1011, 307, 767, 51288], "temperature": 0.0, "avg_logprob": -0.10758300892357688, "compression_ratio": 1.7832512315270936, "no_speech_prob": 0.011005917564034462}, {"id": 151, "seek": 97060, "start": 989.08, "end": 994.9200000000001, "text": " right hand on your side as well. So I don't know. Yes, it is probably. So", "tokens": [51288, 558, 1011, 322, 428, 1252, 382, 731, 13, 407, 286, 500, 380, 458, 13, 1079, 11, 309, 307, 1391, 13, 407, 51580], "temperature": 0.0, "avg_logprob": -0.10758300892357688, "compression_ratio": 1.7832512315270936, "no_speech_prob": 0.011005917564034462}, {"id": 152, "seek": 99492, "start": 994.92, "end": 1004.92, "text": " these are infix operators when they have two values, one to each side. However, they're also", "tokens": [50364, 613, 366, 1536, 970, 19077, 562, 436, 362, 732, 4190, 11, 472, 281, 1184, 1252, 13, 2908, 11, 436, 434, 611, 50864], "temperature": 0.0, "avg_logprob": -0.18846131677496925, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.0004694396920967847}, {"id": 153, "seek": 99492, "start": 1007.0, "end": 1015.0799999999999, "text": " prefix operators. And an example of that is, for instance, if I said final, age minus one.", "tokens": [50968, 46969, 19077, 13, 400, 364, 1365, 295, 300, 307, 11, 337, 5197, 11, 498, 286, 848, 2572, 11, 3205, 3175, 472, 13, 51372], "temperature": 0.0, "avg_logprob": -0.18846131677496925, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.0004694396920967847}, {"id": 154, "seek": 99492, "start": 1016.4399999999999, "end": 1024.44, "text": " Actually, we change this to var. I'll explain soon why. And if we said minus, minus age,", "tokens": [51440, 5135, 11, 321, 1319, 341, 281, 1374, 13, 286, 603, 2903, 2321, 983, 13, 400, 498, 321, 848, 3175, 11, 3175, 3205, 11, 51840], "temperature": 0.0, "avg_logprob": -0.18846131677496925, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.0004694396920967847}, {"id": 155, "seek": 102492, "start": 1025.64, "end": 1031.88, "text": " now, this is an example of a prefix operator. And a prefix operator is an operator that", "tokens": [50400, 586, 11, 341, 307, 364, 1365, 295, 257, 46969, 12973, 13, 400, 257, 46969, 12973, 307, 364, 12973, 300, 50712], "temperature": 0.0, "avg_logprob": -0.08981403263135888, "compression_ratio": 1.7872340425531914, "no_speech_prob": 7.375184941338375e-05}, {"id": 156, "seek": 102492, "start": 1032.44, "end": 1039.3200000000002, "text": " it comes before whatever it has to do its work on. And in this case, this minus,", "tokens": [50740, 309, 1487, 949, 2035, 309, 575, 281, 360, 1080, 589, 322, 13, 400, 294, 341, 1389, 11, 341, 3175, 11, 51084], "temperature": 0.0, "avg_logprob": -0.08981403263135888, "compression_ratio": 1.7872340425531914, "no_speech_prob": 7.375184941338375e-05}, {"id": 157, "seek": 102492, "start": 1039.3200000000002, "end": 1043.16, "text": " minus operator, what it does is that it takes the value that comes after it,", "tokens": [51084, 3175, 12973, 11, 437, 309, 775, 307, 300, 309, 2516, 264, 2158, 300, 1487, 934, 309, 11, 51276], "temperature": 0.0, "avg_logprob": -0.08981403263135888, "compression_ratio": 1.7872340425531914, "no_speech_prob": 7.375184941338375e-05}, {"id": 158, "seek": 102492, "start": 1044.44, "end": 1052.6000000000001, "text": " it decreases that value by one, and then it returns its result back to the left-hand side.", "tokens": [51340, 309, 24108, 300, 2158, 538, 472, 11, 293, 550, 309, 11247, 1080, 1874, 646, 281, 264, 1411, 12, 5543, 1252, 13, 51748], "temperature": 0.0, "avg_logprob": -0.08981403263135888, "compression_ratio": 1.7872340425531914, "no_speech_prob": 7.375184941338375e-05}, {"id": 159, "seek": 105260, "start": 1052.6, "end": 1058.76, "text": " So in this case, the interpreter comes here and says, okay, you want to calculate something.", "tokens": [50364, 407, 294, 341, 1389, 11, 264, 34132, 1487, 510, 293, 1619, 11, 1392, 11, 291, 528, 281, 8873, 746, 13, 50672], "temperature": 0.0, "avg_logprob": -0.139452448758212, "compression_ratio": 1.5914893617021277, "no_speech_prob": 8.339063788298517e-05}, {"id": 160, "seek": 105260, "start": 1058.76, "end": 1065.8, "text": " Okay. It's equal to, oh, a prefix operator that takes a variable here. And it says, okay,", "tokens": [50672, 1033, 13, 467, 311, 2681, 281, 11, 1954, 11, 257, 46969, 12973, 300, 2516, 257, 7006, 510, 13, 400, 309, 1619, 11, 1392, 11, 51024], "temperature": 0.0, "avg_logprob": -0.139452448758212, "compression_ratio": 1.5914893617021277, "no_speech_prob": 8.339063788298517e-05}, {"id": 161, "seek": 105260, "start": 1065.8, "end": 1075.0, "text": " what is age? It's 20. Minus one is 19. Puts it in here. And it also puts that 19 in an age. So", "tokens": [51024, 437, 307, 3205, 30, 467, 311, 945, 13, 2829, 301, 472, 307, 1294, 13, 430, 3648, 309, 294, 510, 13, 400, 309, 611, 8137, 300, 1294, 294, 364, 3205, 13, 407, 51484], "temperature": 0.0, "avg_logprob": -0.139452448758212, "compression_ratio": 1.5914893617021277, "no_speech_prob": 8.339063788298517e-05}, {"id": 162, "seek": 105260, "start": 1075.6399999999999, "end": 1081.6399999999999, "text": " I think so, at least. So if we say print age and print age minus one, now both should kind of be", "tokens": [51516, 286, 519, 370, 11, 412, 1935, 13, 407, 498, 321, 584, 4482, 3205, 293, 4482, 3205, 3175, 472, 11, 586, 1293, 820, 733, 295, 312, 51816], "temperature": 0.0, "avg_logprob": -0.139452448758212, "compression_ratio": 1.5914893617021277, "no_speech_prob": 8.339063788298517e-05}, {"id": 163, "seek": 108164, "start": 1081.64, "end": 1089.16, "text": " 19. And you can see it says twice. You see two, 19. So that kind of means it's twice. So Flutter", "tokens": [50364, 1294, 13, 400, 291, 393, 536, 309, 1619, 6091, 13, 509, 536, 732, 11, 1294, 13, 407, 300, 733, 295, 1355, 309, 311, 6091, 13, 407, 3235, 9947, 50740], "temperature": 0.0, "avg_logprob": -0.11584021734154742, "compression_ratio": 1.6743119266055047, "no_speech_prob": 0.00015780494140926749}, {"id": 164, "seek": 108164, "start": 1089.16, "end": 1094.44, "text": " has this great ability not to duplicate, basically, log statements or print statements.", "tokens": [50740, 575, 341, 869, 3485, 406, 281, 23976, 11, 1936, 11, 3565, 12363, 420, 4482, 12363, 13, 51004], "temperature": 0.0, "avg_logprob": -0.11584021734154742, "compression_ratio": 1.6743119266055047, "no_speech_prob": 0.00015780494140926749}, {"id": 165, "seek": 108164, "start": 1096.3600000000001, "end": 1102.92, "text": " So we have, I mean, there are some really great operators in Dart. And that is the plus operator.", "tokens": [51100, 407, 321, 362, 11, 286, 914, 11, 456, 366, 512, 534, 869, 19077, 294, 30271, 13, 400, 300, 307, 264, 1804, 12973, 13, 51428], "temperature": 0.0, "avg_logprob": -0.11584021734154742, "compression_ratio": 1.6743119266055047, "no_speech_prob": 0.00015780494140926749}, {"id": 166, "seek": 108164, "start": 1104.1200000000001, "end": 1110.0400000000002, "text": " And then you have the minus division multiplication. And then you have the logical", "tokens": [51488, 400, 550, 291, 362, 264, 3175, 10044, 27290, 13, 400, 550, 291, 362, 264, 14978, 51784], "temperature": 0.0, "avg_logprob": -0.11584021734154742, "compression_ratio": 1.6743119266055047, "no_speech_prob": 0.00015780494140926749}, {"id": 167, "seek": 111004, "start": 1110.6, "end": 1114.92, "text": " operators to check if a value from the left is equal to the value to the right. So", "tokens": [50392, 19077, 281, 1520, 498, 257, 2158, 490, 264, 1411, 307, 2681, 281, 264, 2158, 281, 264, 558, 13, 407, 50608], "temperature": 0.0, "avg_logprob": -0.08150316022106052, "compression_ratio": 1.6637554585152838, "no_speech_prob": 0.0006189118721522391}, {"id": 168, "seek": 111004, "start": 1115.72, "end": 1121.8799999999999, "text": " these are the basics of the operators in Dart. So you don't have to know so much more about these", "tokens": [50648, 613, 366, 264, 14688, 295, 264, 19077, 294, 30271, 13, 407, 291, 500, 380, 362, 281, 458, 370, 709, 544, 466, 613, 50956], "temperature": 0.0, "avg_logprob": -0.08150316022106052, "compression_ratio": 1.6637554585152838, "no_speech_prob": 0.0006189118721522391}, {"id": 169, "seek": 111004, "start": 1121.8799999999999, "end": 1130.12, "text": " for now. I would say you can get really far with these. And a lot of these operators actually work", "tokens": [50956, 337, 586, 13, 286, 576, 584, 291, 393, 483, 534, 1400, 365, 613, 13, 400, 257, 688, 295, 613, 19077, 767, 589, 51368], "temperature": 0.0, "avg_logprob": -0.08150316022106052, "compression_ratio": 1.6637554585152838, "no_speech_prob": 0.0006189118721522391}, {"id": 170, "seek": 111004, "start": 1130.12, "end": 1136.76, "text": " not only on numbers, but also on strings. And for instance, this is one of the cool features of Dart,", "tokens": [51368, 406, 787, 322, 3547, 11, 457, 611, 322, 13985, 13, 400, 337, 5197, 11, 341, 307, 472, 295, 264, 1627, 4122, 295, 30271, 11, 51700], "temperature": 0.0, "avg_logprob": -0.08150316022106052, "compression_ratio": 1.6637554585152838, "no_speech_prob": 0.0006189118721522391}, {"id": 171, "seek": 113676, "start": 1136.76, "end": 1142.04, "text": " which I absolutely love. I think it was just such a great idea for them to implement this.", "tokens": [50364, 597, 286, 3122, 959, 13, 286, 519, 309, 390, 445, 1270, 257, 869, 1558, 337, 552, 281, 4445, 341, 13, 50628], "temperature": 0.0, "avg_logprob": -0.10136223690850395, "compression_ratio": 1.7481203007518797, "no_speech_prob": 0.0012394363293424249}, {"id": 172, "seek": 113676, "start": 1144.92, "end": 1149.32, "text": " If you're not coming from a software development background, you may not know this. But if you're", "tokens": [50772, 759, 291, 434, 406, 1348, 490, 257, 4722, 3250, 3678, 11, 291, 815, 406, 458, 341, 13, 583, 498, 291, 434, 50992], "temperature": 0.0, "avg_logprob": -0.10136223690850395, "compression_ratio": 1.7481203007518797, "no_speech_prob": 0.0012394363293424249}, {"id": 173, "seek": 113676, "start": 1149.32, "end": 1152.68, "text": " coming, for instance, from a design background, also, you would notice that sometimes when you're", "tokens": [50992, 1348, 11, 337, 5197, 11, 490, 257, 1715, 3678, 11, 611, 11, 291, 576, 3449, 300, 2171, 562, 291, 434, 51160], "temperature": 0.0, "avg_logprob": -0.10136223690850395, "compression_ratio": 1.7481203007518797, "no_speech_prob": 0.0012394363293424249}, {"id": 174, "seek": 113676, "start": 1152.68, "end": 1159.08, "text": " creating designs or any screen and you want to show that design to someone, like a product owner,", "tokens": [51160, 4084, 11347, 420, 604, 2568, 293, 291, 528, 281, 855, 300, 1715, 281, 1580, 11, 411, 257, 1674, 7289, 11, 51480], "temperature": 0.0, "avg_logprob": -0.10136223690850395, "compression_ratio": 1.7481203007518797, "no_speech_prob": 0.0012394363293424249}, {"id": 175, "seek": 113676, "start": 1159.96, "end": 1165.08, "text": " you want to actually populate the text inside your design with some lorem ipsum.", "tokens": [51524, 291, 528, 281, 767, 1665, 5256, 264, 2487, 1854, 428, 1715, 365, 512, 27258, 76, 220, 2600, 449, 13, 51780], "temperature": 0.0, "avg_logprob": -0.10136223690850395, "compression_ratio": 1.7481203007518797, "no_speech_prob": 0.0012394363293424249}, {"id": 176, "seek": 116508, "start": 1165.8799999999999, "end": 1171.0, "text": " And lorem ipsum basically has a huge history of where it comes from. But it's usually some sort", "tokens": [50404, 400, 27258, 76, 220, 2600, 449, 1936, 575, 257, 2603, 2503, 295, 689, 309, 1487, 490, 13, 583, 309, 311, 2673, 512, 1333, 50660], "temperature": 0.0, "avg_logprob": -0.07213093742491707, "compression_ratio": 1.7582417582417582, "no_speech_prob": 0.0007846523076295853}, {"id": 177, "seek": 116508, "start": 1171.0, "end": 1177.1599999999999, "text": " of a dummy text that you want to place inside your design so that you can display and show it to", "tokens": [50660, 295, 257, 35064, 2487, 300, 291, 528, 281, 1081, 1854, 428, 1715, 370, 300, 291, 393, 4674, 293, 855, 309, 281, 50968], "temperature": 0.0, "avg_logprob": -0.07213093742491707, "compression_ratio": 1.7582417582417582, "no_speech_prob": 0.0007846523076295853}, {"id": 178, "seek": 116508, "start": 1177.1599999999999, "end": 1182.76, "text": " someone. And a lot of developers, like in many languages, when they want to display some text", "tokens": [50968, 1580, 13, 400, 257, 688, 295, 8849, 11, 411, 294, 867, 8650, 11, 562, 436, 528, 281, 4674, 512, 2487, 51248], "temperature": 0.0, "avg_logprob": -0.07213093742491707, "compression_ratio": 1.7582417582417582, "no_speech_prob": 0.0007846523076295853}, {"id": 179, "seek": 116508, "start": 1182.76, "end": 1186.76, "text": " and they don't know what to say, like, we're just testing stuff. I just want to display some text.", "tokens": [51248, 293, 436, 500, 380, 458, 437, 281, 584, 11, 411, 11, 321, 434, 445, 4997, 1507, 13, 286, 445, 528, 281, 4674, 512, 2487, 13, 51448], "temperature": 0.0, "avg_logprob": -0.07213093742491707, "compression_ratio": 1.7582417582417582, "no_speech_prob": 0.0007846523076295853}, {"id": 180, "seek": 116508, "start": 1186.76, "end": 1193.3999999999999, "text": " They go and grab lorem ipsum and then put it in their code. But Dart has gone to the next step", "tokens": [51448, 814, 352, 293, 4444, 27258, 76, 220, 2600, 449, 293, 550, 829, 309, 294, 641, 3089, 13, 583, 30271, 575, 2780, 281, 264, 958, 1823, 51780], "temperature": 0.0, "avg_logprob": -0.07213093742491707, "compression_ratio": 1.7582417582417582, "no_speech_prob": 0.0007846523076295853}, {"id": 181, "seek": 119340, "start": 1193.4, "end": 1197.8000000000002, "text": " and said, OK, we don't need that. So what you can do, you can say, for instance, name is foo.", "tokens": [50364, 293, 848, 11, 2264, 11, 321, 500, 380, 643, 300, 13, 407, 437, 291, 393, 360, 11, 291, 393, 584, 11, 337, 5197, 11, 1315, 307, 726, 78, 13, 50584], "temperature": 0.0, "avg_logprob": -0.09134438394129961, "compression_ratio": 1.6685714285714286, "no_speech_prob": 0.006751326844096184}, {"id": 182, "seek": 119340, "start": 1199.24, "end": 1208.0400000000002, "text": " That's a string name. But you can say name times 20 is name times 20. You can literally say multiply", "tokens": [50656, 663, 311, 257, 6798, 1315, 13, 583, 291, 393, 584, 1315, 1413, 945, 307, 1315, 1413, 945, 13, 509, 393, 3736, 584, 12972, 51096], "temperature": 0.0, "avg_logprob": -0.09134438394129961, "compression_ratio": 1.6685714285714286, "no_speech_prob": 0.006751326844096184}, {"id": 183, "seek": 119340, "start": 1208.0400000000002, "end": 1216.2, "text": " a string by 20. And what that does is that it says foo 20 times. So if I say print name times 20,", "tokens": [51096, 257, 6798, 538, 945, 13, 400, 437, 300, 775, 307, 300, 309, 1619, 726, 78, 945, 1413, 13, 407, 498, 286, 584, 4482, 1315, 1413, 945, 11, 51504], "temperature": 0.0, "avg_logprob": -0.09134438394129961, "compression_ratio": 1.6685714285714286, "no_speech_prob": 0.006751326844096184}, {"id": 184, "seek": 121620, "start": 1217.0, "end": 1222.92, "text": " you can see it says foo 20 times. So it's a great feature. You can say foo, bar,", "tokens": [50404, 291, 393, 536, 309, 1619, 726, 78, 945, 1413, 13, 407, 309, 311, 257, 869, 4111, 13, 509, 393, 584, 726, 78, 11, 2159, 11, 50700], "temperature": 0.0, "avg_logprob": -0.18336659261625107, "compression_ratio": 1.5442176870748299, "no_speech_prob": 0.008964262902736664}, {"id": 185, "seek": 121620, "start": 1222.92, "end": 1229.4, "text": " baz, and then just say times 100. And yeah, it just, that's it,", "tokens": [50700, 27147, 11, 293, 550, 445, 584, 1413, 2319, 13, 400, 1338, 11, 309, 445, 11, 300, 311, 309, 11, 51024], "temperature": 0.0, "avg_logprob": -0.18336659261625107, "compression_ratio": 1.5442176870748299, "no_speech_prob": 0.008964262902736664}, {"id": 186, "seek": 121620, "start": 1229.4, "end": 1239.96, "text": " copies it for you 100 times in names time 100, for instance. So that is a, that is", "tokens": [51024, 14341, 309, 337, 291, 2319, 1413, 294, 5288, 565, 2319, 11, 337, 5197, 13, 407, 300, 307, 257, 11, 300, 307, 51552], "temperature": 0.0, "avg_logprob": -0.18336659261625107, "compression_ratio": 1.5442176870748299, "no_speech_prob": 0.008964262902736664}, {"id": 187, "seek": 123996, "start": 1240.1200000000001, "end": 1247.88, "text": " shortly said, that is the basics of operators in Dart. OK, I'm going to delete that code.", "tokens": [50372, 13392, 848, 11, 300, 307, 264, 14688, 295, 19077, 294, 30271, 13, 2264, 11, 286, 478, 516, 281, 12097, 300, 3089, 13, 50760], "temperature": 0.0, "avg_logprob": -0.2702313019679143, "compression_ratio": 1.3805970149253732, "no_speech_prob": 0.013398614712059498}, {"id": 188, "seek": 123996, "start": 1249.56, "end": 1259.16, "text": " I'm going to mark in my notes that we've talked about that. Now, I'm just going to quickly also", "tokens": [50844, 286, 478, 516, 281, 1491, 294, 452, 5570, 300, 321, 600, 2825, 466, 300, 13, 823, 11, 286, 478, 445, 516, 281, 2661, 611, 51324], "temperature": 0.0, "avg_logprob": -0.2702313019679143, "compression_ratio": 1.3805970149253732, "no_speech_prob": 0.013398614712059498}, {"id": 189, "seek": 125916, "start": 1260.1200000000001, "end": 1271.5600000000002, "text": " mention that we can also create custom operators, to be honest with you. And I don't think it is", "tokens": [50412, 2152, 300, 321, 393, 611, 1884, 2375, 19077, 11, 281, 312, 3245, 365, 291, 13, 400, 286, 500, 380, 519, 309, 307, 50984], "temperature": 0.0, "avg_logprob": -0.0864811136915877, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.017339814454317093}, {"id": 190, "seek": 125916, "start": 1271.5600000000002, "end": 1278.76, "text": " completely all right right now to talk about custom operators. I think it's kind of like a topic to", "tokens": [50984, 2584, 439, 558, 558, 586, 281, 751, 466, 2375, 19077, 13, 286, 519, 309, 311, 733, 295, 411, 257, 4829, 281, 51344], "temperature": 0.0, "avg_logprob": -0.0864811136915877, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.017339814454317093}, {"id": 191, "seek": 125916, "start": 1278.76, "end": 1283.64, "text": " talk about later. So I actually just moved it in my notes that we don't need to talk about it right", "tokens": [51344, 751, 466, 1780, 13, 407, 286, 767, 445, 4259, 309, 294, 452, 5570, 300, 321, 500, 380, 643, 281, 751, 466, 309, 558, 51588], "temperature": 0.0, "avg_logprob": -0.0864811136915877, "compression_ratio": 1.6818181818181819, "no_speech_prob": 0.017339814454317093}, {"id": 192, "seek": 128364, "start": 1283.72, "end": 1289.64, "text": " now because we have to know a little bit about classes and objects so that we can,", "tokens": [50368, 586, 570, 321, 362, 281, 458, 257, 707, 857, 466, 5359, 293, 6565, 370, 300, 321, 393, 11, 50664], "temperature": 0.0, "avg_logprob": -0.09856323131079812, "compression_ratio": 1.7673469387755103, "no_speech_prob": 0.012148795649409294}, {"id": 193, "seek": 128364, "start": 1289.64, "end": 1293.64, "text": " after we've created our own class, then we can create custom operators as well. So", "tokens": [50664, 934, 321, 600, 2942, 527, 1065, 1508, 11, 550, 321, 393, 1884, 2375, 19077, 382, 731, 13, 407, 50864], "temperature": 0.0, "avg_logprob": -0.09856323131079812, "compression_ratio": 1.7673469387755103, "no_speech_prob": 0.012148795649409294}, {"id": 194, "seek": 128364, "start": 1294.68, "end": 1298.2800000000002, "text": " I don't think it's completely appropriate to talk about right now. But just know that", "tokens": [50916, 286, 500, 380, 519, 309, 311, 2584, 6854, 281, 751, 466, 558, 586, 13, 583, 445, 458, 300, 51096], "temperature": 0.0, "avg_logprob": -0.09856323131079812, "compression_ratio": 1.7673469387755103, "no_speech_prob": 0.012148795649409294}, {"id": 195, "seek": 128364, "start": 1298.2800000000002, "end": 1302.68, "text": " in the future, you can also create your own operators and then like, or you can also", "tokens": [51096, 294, 264, 2027, 11, 291, 393, 611, 1884, 428, 1065, 19077, 293, 550, 411, 11, 420, 291, 393, 611, 51316], "temperature": 0.0, "avg_logprob": -0.09856323131079812, "compression_ratio": 1.7673469387755103, "no_speech_prob": 0.012148795649409294}, {"id": 196, "seek": 128364, "start": 1302.68, "end": 1307.4, "text": " override like different operators and how they work with different objects. So it is really fun.", "tokens": [51316, 42321, 411, 819, 19077, 293, 577, 436, 589, 365, 819, 6565, 13, 407, 309, 307, 534, 1019, 13, 51552], "temperature": 0.0, "avg_logprob": -0.09856323131079812, "compression_ratio": 1.7673469387755103, "no_speech_prob": 0.012148795649409294}, {"id": 197, "seek": 130740, "start": 1308.2, "end": 1313.8000000000002, "text": " But that's that. Let's just leave operators to that for now.", "tokens": [50404, 583, 300, 311, 300, 13, 961, 311, 445, 1856, 19077, 281, 300, 337, 586, 13, 50684], "temperature": 0.0, "avg_logprob": -0.16814041137695312, "compression_ratio": 1.44, "no_speech_prob": 0.00024046096950769424}, {"id": 198, "seek": 130740, "start": 1315.8000000000002, "end": 1319.16, "text": " Now, the next topic that I wanted to talk about is lists.", "tokens": [50784, 823, 11, 264, 958, 4829, 300, 286, 1415, 281, 751, 466, 307, 14511, 13, 50952], "temperature": 0.0, "avg_logprob": -0.16814041137695312, "compression_ratio": 1.44, "no_speech_prob": 0.00024046096950769424}, {"id": 199, "seek": 130740, "start": 1321.4, "end": 1333.5600000000002, "text": " And lists in Dart is a series of things that are similar to each other and they are placed inside", "tokens": [51064, 400, 14511, 294, 30271, 307, 257, 2638, 295, 721, 300, 366, 2531, 281, 1184, 661, 293, 436, 366, 7074, 1854, 51672], "temperature": 0.0, "avg_logprob": -0.16814041137695312, "compression_ratio": 1.44, "no_speech_prob": 0.00024046096950769424}, {"id": 200, "seek": 133356, "start": 1333.56, "end": 1338.36, "text": " a list, as you would have, for instance, on a piece of paper and you could write your shopping", "tokens": [50364, 257, 1329, 11, 382, 291, 576, 362, 11, 337, 5197, 11, 322, 257, 2522, 295, 3035, 293, 291, 727, 2464, 428, 8688, 50604], "temperature": 0.0, "avg_logprob": -0.23696672463718849, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.0023301313631236553}, {"id": 201, "seek": 133356, "start": 1338.36, "end": 1347.32, "text": " list or like a Christmas shopping list or whatever, and it's numbered. So these are called lists in", "tokens": [50604, 1329, 420, 411, 257, 5272, 8688, 1329, 420, 2035, 11, 293, 309, 311, 40936, 13, 407, 613, 366, 1219, 14511, 294, 51052], "temperature": 0.0, "avg_logprob": -0.23696672463718849, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.0023301313631236553}, {"id": 202, "seek": 133356, "start": 1347.32, "end": 1358.28, "text": " Dart. So for instance, if you say foo, and then bar, and then baz. As you can see, Dart doesn't", "tokens": [51052, 30271, 13, 407, 337, 5197, 11, 498, 291, 584, 726, 78, 11, 293, 550, 2159, 11, 293, 550, 27147, 13, 1018, 291, 393, 536, 11, 30271, 1177, 380, 51600], "temperature": 0.0, "avg_logprob": -0.23696672463718849, "compression_ratio": 1.6477272727272727, "no_speech_prob": 0.0023301313631236553}, {"id": 203, "seek": 135828, "start": 1358.84, "end": 1362.28, "text": " like this syntax at the moment. It says, okay, what are these? Like, what is this", "tokens": [50392, 411, 341, 28431, 412, 264, 1623, 13, 467, 1619, 11, 1392, 11, 437, 366, 613, 30, 1743, 11, 437, 307, 341, 50564], "temperature": 0.0, "avg_logprob": -0.11555554526192802, "compression_ratio": 1.4913294797687862, "no_speech_prob": 0.00744605902582407}, {"id": 204, "seek": 135828, "start": 1364.28, "end": 1370.92, "text": " comma here? The way to tell Dart that this is a list of things that are like in place one,", "tokens": [50664, 22117, 510, 30, 440, 636, 281, 980, 30271, 300, 341, 307, 257, 1329, 295, 721, 300, 366, 411, 294, 1081, 472, 11, 50996], "temperature": 0.0, "avg_logprob": -0.11555554526192802, "compression_ratio": 1.4913294797687862, "no_speech_prob": 0.00744605902582407}, {"id": 205, "seek": 135828, "start": 1370.92, "end": 1377.72, "text": " two, three is by placing them inside square brackets and then a semicolon, of course.", "tokens": [50996, 732, 11, 1045, 307, 538, 17221, 552, 1854, 3732, 26179, 293, 550, 257, 27515, 38780, 11, 295, 1164, 13, 51336], "temperature": 0.0, "avg_logprob": -0.11555554526192802, "compression_ratio": 1.4913294797687862, "no_speech_prob": 0.00744605902582407}, {"id": 206, "seek": 137772, "start": 1378.1200000000001, "end": 1387.08, "text": " Now, as I've talked about it before, just now, actually, lists have indexes in that they all", "tokens": [50384, 823, 11, 382, 286, 600, 2825, 466, 309, 949, 11, 445, 586, 11, 767, 11, 14511, 362, 8186, 279, 294, 300, 436, 439, 50832], "temperature": 0.0, "avg_logprob": -0.19211546579996744, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.0038632748182862997}, {"id": 207, "seek": 137772, "start": 1387.08, "end": 1392.92, "text": " have their own placement inside the list. All these objects, as we call them, they have their", "tokens": [50832, 362, 641, 1065, 17257, 1854, 264, 1329, 13, 1057, 613, 6565, 11, 382, 321, 818, 552, 11, 436, 362, 641, 51124], "temperature": 0.0, "avg_logprob": -0.19211546579996744, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.0038632748182862997}, {"id": 208, "seek": 137772, "start": 1392.92, "end": 1400.2, "text": " placements inside the list. And you may think that object number one is foo and then object number", "tokens": [51124, 20831, 6400, 1854, 264, 1329, 13, 400, 291, 815, 519, 300, 2657, 1230, 472, 307, 726, 78, 293, 550, 2657, 1230, 51488], "temperature": 0.0, "avg_logprob": -0.19211546579996744, "compression_ratio": 1.6964285714285714, "no_speech_prob": 0.0038632748182862997}, {"id": 209, "seek": 140020, "start": 1400.2, "end": 1407.72, "text": " two is bar and number three is baz. And that's correct. But indexes in, I mean, all the programming", "tokens": [50364, 732, 307, 2159, 293, 1230, 1045, 307, 27147, 13, 400, 300, 311, 3006, 13, 583, 8186, 279, 294, 11, 286, 914, 11, 439, 264, 9410, 50740], "temperature": 0.0, "avg_logprob": -0.2945086669921875, "compression_ratio": 1.43, "no_speech_prob": 0.02199438028037548}, {"id": 210, "seek": 140020, "start": 1407.72, "end": 1417.4, "text": " languages that I've worked with, C++, C, Rust, Dart, Swift, JavaScript, they pretty much all", "tokens": [50740, 8650, 300, 286, 600, 2732, 365, 11, 383, 25472, 11, 383, 11, 34952, 11, 30271, 11, 25539, 11, 15778, 11, 436, 1238, 709, 439, 51224], "temperature": 0.0, "avg_logprob": -0.2945086669921875, "compression_ratio": 1.43, "no_speech_prob": 0.02199438028037548}, {"id": 211, "seek": 140020, "start": 1417.4, "end": 1424.04, "text": " start at the index of zero. And that is so important to understand because like the placement", "tokens": [51224, 722, 412, 264, 8186, 295, 4018, 13, 400, 300, 307, 370, 1021, 281, 1223, 570, 411, 264, 17257, 51556], "temperature": 0.0, "avg_logprob": -0.2945086669921875, "compression_ratio": 1.43, "no_speech_prob": 0.02199438028037548}, {"id": 212, "seek": 142404, "start": 1424.04, "end": 1434.2, "text": " of this object called foo inside this list is not one. Its index is zero. And that is why lists are", "tokens": [50364, 295, 341, 2657, 1219, 726, 78, 1854, 341, 1329, 307, 406, 472, 13, 6953, 8186, 307, 4018, 13, 400, 300, 307, 983, 14511, 366, 50872], "temperature": 0.0, "avg_logprob": -0.20930075343651108, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.10599205642938614}, {"id": 213, "seek": 142404, "start": 1434.2, "end": 1441.0, "text": " called zero-based and their indexes are called zero-based indexes. So you've got to be careful", "tokens": [50872, 1219, 4018, 12, 6032, 293, 641, 8186, 279, 366, 1219, 4018, 12, 6032, 8186, 279, 13, 407, 291, 600, 658, 281, 312, 5026, 51212], "temperature": 0.0, "avg_logprob": -0.20930075343651108, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.10599205642938614}, {"id": 214, "seek": 142404, "start": 1441.0, "end": 1447.48, "text": " with that. And we're going to talk about indexes soon, actually. So let's just say final names is", "tokens": [51212, 365, 300, 13, 400, 321, 434, 516, 281, 751, 466, 8186, 279, 2321, 11, 767, 13, 407, 718, 311, 445, 584, 2572, 5288, 307, 51536], "temperature": 0.0, "avg_logprob": -0.20930075343651108, "compression_ratio": 1.6404494382022472, "no_speech_prob": 0.10599205642938614}, {"id": 215, "seek": 144748, "start": 1447.48, "end": 1454.84, "text": " that. Now, if I want to extract foo from here, I'm just going to say final foo is names at the", "tokens": [50364, 300, 13, 823, 11, 498, 286, 528, 281, 8947, 726, 78, 490, 510, 11, 286, 478, 445, 516, 281, 584, 2572, 726, 78, 307, 5288, 412, 264, 50732], "temperature": 0.0, "avg_logprob": -0.2593090412980419, "compression_ratio": 2.145348837209302, "no_speech_prob": 0.18641066551208496}, {"id": 216, "seek": 144748, "start": 1454.84, "end": 1460.2, "text": " index of zero, right? And I'm just going to print it. I'm just going to say print foo. And you'll", "tokens": [50732, 8186, 295, 4018, 11, 558, 30, 400, 286, 478, 445, 516, 281, 4482, 309, 13, 286, 478, 445, 516, 281, 584, 4482, 726, 78, 13, 400, 291, 603, 51000], "temperature": 0.0, "avg_logprob": -0.2593090412980419, "compression_ratio": 2.145348837209302, "no_speech_prob": 0.18641066551208496}, {"id": 217, "seek": 144748, "start": 1460.2, "end": 1466.44, "text": " see foo printed here. Now, if I say I want to get baz, then I'm going to say print, sorry,", "tokens": [51000, 536, 726, 78, 13567, 510, 13, 823, 11, 498, 286, 584, 286, 528, 281, 483, 27147, 11, 550, 286, 478, 516, 281, 584, 4482, 11, 2597, 11, 51312], "temperature": 0.0, "avg_logprob": -0.2593090412980419, "compression_ratio": 2.145348837209302, "no_speech_prob": 0.18641066551208496}, {"id": 218, "seek": 144748, "start": 1467.32, "end": 1473.88, "text": " index of three. And you'll see, oh, sorry, index of three. And you'll see, oh, sorry,", "tokens": [51356, 8186, 295, 1045, 13, 400, 291, 603, 536, 11, 1954, 11, 2597, 11, 8186, 295, 1045, 13, 400, 291, 603, 536, 11, 1954, 11, 2597, 11, 51684], "temperature": 0.0, "avg_logprob": -0.2593090412980419, "compression_ratio": 2.145348837209302, "no_speech_prob": 0.18641066551208496}, {"id": 219, "seek": 147388, "start": 1474.0400000000002, "end": 1480.2, "text": " index of two, because it's the third item. But since indexes are zero-based, then it's index of", "tokens": [50372, 8186, 295, 732, 11, 570, 309, 311, 264, 2636, 3174, 13, 583, 1670, 8186, 279, 366, 4018, 12, 6032, 11, 550, 309, 311, 8186, 295, 50680], "temperature": 0.0, "avg_logprob": -0.18914289474487306, "compression_ratio": 1.6176470588235294, "no_speech_prob": 0.002551693469285965}, {"id": 220, "seek": 147388, "start": 1480.2, "end": 1486.8400000000001, "text": " two. I made the mistake myself. So command S and you'll get baz. And I actually want to go back to", "tokens": [50680, 732, 13, 286, 1027, 264, 6146, 2059, 13, 407, 5622, 318, 293, 291, 603, 483, 27147, 13, 400, 286, 767, 528, 281, 352, 646, 281, 51012], "temperature": 0.0, "avg_logprob": -0.18914289474487306, "compression_ratio": 1.6176470588235294, "no_speech_prob": 0.002551693469285965}, {"id": 221, "seek": 147388, "start": 1486.8400000000001, "end": 1491.72, "text": " this three and then command S. So you can see what happened here. You'll see you'll get something", "tokens": [51012, 341, 1045, 293, 550, 5622, 318, 13, 407, 291, 393, 536, 437, 2011, 510, 13, 509, 603, 536, 291, 603, 483, 746, 51256], "temperature": 0.0, "avg_logprob": -0.18914289474487306, "compression_ratio": 1.6176470588235294, "no_speech_prob": 0.002551693469285965}, {"id": 222, "seek": 147388, "start": 1491.72, "end": 1499.64, "text": " called a range error, which is an exception, an exception in Dart and many other programming", "tokens": [51256, 1219, 257, 3613, 6713, 11, 597, 307, 364, 11183, 11, 364, 11183, 294, 30271, 293, 867, 661, 9410, 51652], "temperature": 0.0, "avg_logprob": -0.18914289474487306, "compression_ratio": 1.6176470588235294, "no_speech_prob": 0.002551693469285965}, {"id": 223, "seek": 149964, "start": 1499.64, "end": 1505.16, "text": " languages is when things go wrong so that the language doesn't really know anymore what you", "tokens": [50364, 8650, 307, 562, 721, 352, 2085, 370, 300, 264, 2856, 1177, 380, 534, 458, 3602, 437, 291, 50640], "temperature": 0.0, "avg_logprob": -0.180415771819733, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0023765559308230877}, {"id": 224, "seek": 149964, "start": 1505.16, "end": 1511.4, "text": " mean. And in this case, you can see this through an exception at the language level or at the", "tokens": [50640, 914, 13, 400, 294, 341, 1389, 11, 291, 393, 536, 341, 807, 364, 11183, 412, 264, 2856, 1496, 420, 412, 264, 50952], "temperature": 0.0, "avg_logprob": -0.180415771819733, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0023765559308230877}, {"id": 225, "seek": 149964, "start": 1511.4, "end": 1517.5600000000002, "text": " library's level where it says, there are no four items in this array or in this list, because the", "tokens": [50952, 6405, 311, 1496, 689, 309, 1619, 11, 456, 366, 572, 1451, 4754, 294, 341, 10225, 420, 294, 341, 1329, 11, 570, 264, 51260], "temperature": 0.0, "avg_logprob": -0.180415771819733, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0023765559308230877}, {"id": 226, "seek": 149964, "start": 1517.5600000000002, "end": 1525.5600000000002, "text": " index of three indicates four items. Item number one in the list has the index of zero, and then", "tokens": [51260, 8186, 295, 1045, 16203, 1451, 4754, 13, 31066, 1230, 472, 294, 264, 1329, 575, 264, 8186, 295, 4018, 11, 293, 550, 51660], "temperature": 0.0, "avg_logprob": -0.180415771819733, "compression_ratio": 1.7431192660550459, "no_speech_prob": 0.0023765559308230877}, {"id": 227, "seek": 152556, "start": 1525.72, "end": 1536.2, "text": " items. Item number two has the index of one. Item number three has the index of two. And item", "tokens": [50372, 4754, 13, 31066, 1230, 732, 575, 264, 8186, 295, 472, 13, 31066, 1230, 1045, 575, 264, 8186, 295, 732, 13, 400, 3174, 50896], "temperature": 0.0, "avg_logprob": -0.14542366266250611, "compression_ratio": 1.8774193548387097, "no_speech_prob": 0.11889316141605377}, {"id": 228, "seek": 152556, "start": 1536.2, "end": 1543.8, "text": " number four has the index of three. And there are only three objects in this array or in this list.", "tokens": [50896, 1230, 1451, 575, 264, 8186, 295, 1045, 13, 400, 456, 366, 787, 1045, 6565, 294, 341, 10225, 420, 294, 341, 1329, 13, 51276], "temperature": 0.0, "avg_logprob": -0.14542366266250611, "compression_ratio": 1.8774193548387097, "no_speech_prob": 0.11889316141605377}, {"id": 229, "seek": 152556, "start": 1543.8, "end": 1552.28, "text": " So index zero, one, two. So that's it. And index of number three is non-existent. And that is why", "tokens": [51276, 407, 8186, 4018, 11, 472, 11, 732, 13, 407, 300, 311, 309, 13, 400, 8186, 295, 1230, 1045, 307, 2107, 12, 18217, 317, 13, 400, 300, 307, 983, 51700], "temperature": 0.0, "avg_logprob": -0.14542366266250611, "compression_ratio": 1.8774193548387097, "no_speech_prob": 0.11889316141605377}, {"id": 230, "seek": 155228, "start": 1552.28, "end": 1561.8799999999999, "text": " we're getting this invalid value, not in inclusive range zero to two. So that's how you access items", "tokens": [50364, 321, 434, 1242, 341, 34702, 2158, 11, 406, 294, 13429, 3613, 4018, 281, 732, 13, 407, 300, 311, 577, 291, 2105, 4754, 50844], "temperature": 0.0, "avg_logprob": -0.11006298065185546, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.002052010502666235}, {"id": 231, "seek": 155228, "start": 1561.8799999999999, "end": 1568.04, "text": " inside a list. And this is how you actually create a list, okay? So you say list of items,", "tokens": [50844, 1854, 257, 1329, 13, 400, 341, 307, 577, 291, 767, 1884, 257, 1329, 11, 1392, 30, 407, 291, 584, 1329, 295, 4754, 11, 51152], "temperature": 0.0, "avg_logprob": -0.11006298065185546, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.002052010502666235}, {"id": 232, "seek": 155228, "start": 1568.04, "end": 1576.44, "text": " which is full bar baz. So you can also, there are some convenient properties on lists that you can,", "tokens": [51152, 597, 307, 1577, 2159, 27147, 13, 407, 291, 393, 611, 11, 456, 366, 512, 10851, 7221, 322, 14511, 300, 291, 393, 11, 51572], "temperature": 0.0, "avg_logprob": -0.11006298065185546, "compression_ratio": 1.564516129032258, "no_speech_prob": 0.002052010502666235}, {"id": 233, "seek": 157644, "start": 1576.44, "end": 1583.72, "text": " for instance, say, final length. So if you want to know how many items are in this list, you can", "tokens": [50364, 337, 5197, 11, 584, 11, 2572, 4641, 13, 407, 498, 291, 528, 281, 458, 577, 867, 4754, 366, 294, 341, 1329, 11, 291, 393, 50728], "temperature": 0.0, "avg_logprob": -0.09399579446527022, "compression_ratio": 1.5181347150259068, "no_speech_prob": 0.009691916406154633}, {"id": 234, "seek": 157644, "start": 1583.72, "end": 1592.52, "text": " also say names, dot, and then you would say length. And we're going to talk a little bit about dot now", "tokens": [50728, 611, 584, 5288, 11, 5893, 11, 293, 550, 291, 576, 584, 4641, 13, 400, 321, 434, 516, 281, 751, 257, 707, 857, 466, 5893, 586, 51168], "temperature": 0.0, "avg_logprob": -0.09399579446527022, "compression_ratio": 1.5181347150259068, "no_speech_prob": 0.009691916406154633}, {"id": 235, "seek": 157644, "start": 1592.52, "end": 1599.96, "text": " as well, because I think it's so important to understand what dot is. Dot in Dart and in many", "tokens": [51168, 382, 731, 11, 570, 286, 519, 309, 311, 370, 1021, 281, 1223, 437, 5893, 307, 13, 38753, 294, 30271, 293, 294, 867, 51540], "temperature": 0.0, "avg_logprob": -0.09399579446527022, "compression_ratio": 1.5181347150259068, "no_speech_prob": 0.009691916406154633}, {"id": 236, "seek": 159996, "start": 1599.96, "end": 1606.44, "text": " other programming languages is a way to drill in to something to extract something else from it.", "tokens": [50364, 661, 9410, 8650, 307, 257, 636, 281, 11392, 294, 281, 746, 281, 8947, 746, 1646, 490, 309, 13, 50688], "temperature": 0.0, "avg_logprob": -0.08882803847824318, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.11469870060682297}, {"id": 237, "seek": 159996, "start": 1606.44, "end": 1617.24, "text": " And in this case, names is a list. And all lists in Dart have something called properties. Length", "tokens": [50688, 400, 294, 341, 1389, 11, 5288, 307, 257, 1329, 13, 400, 439, 14511, 294, 30271, 362, 746, 1219, 7221, 13, 441, 4206, 51228], "temperature": 0.0, "avg_logprob": -0.08882803847824318, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.11469870060682297}, {"id": 238, "seek": 159996, "start": 1617.24, "end": 1627.08, "text": " is a property of the list data type in Dart. And that means every list in Dart has a property", "tokens": [51228, 307, 257, 4707, 295, 264, 1329, 1412, 2010, 294, 30271, 13, 400, 300, 1355, 633, 1329, 294, 30271, 575, 257, 4707, 51720], "temperature": 0.0, "avg_logprob": -0.08882803847824318, "compression_ratio": 1.7560975609756098, "no_speech_prob": 0.11469870060682297}, {"id": 239, "seek": 162708, "start": 1627.08, "end": 1632.76, "text": " called length that is automatically calculated for you. You don't have to do anything. As you", "tokens": [50364, 1219, 4641, 300, 307, 6772, 15598, 337, 291, 13, 509, 500, 380, 362, 281, 360, 1340, 13, 1018, 291, 50648], "temperature": 0.0, "avg_logprob": -0.08895098929311715, "compression_ratio": 1.768181818181818, "no_speech_prob": 0.0204334519803524}, {"id": 240, "seek": 162708, "start": 1632.76, "end": 1640.28, "text": " enter values in this list, this length is going to then return the right value to you. So I'm just", "tokens": [50648, 3242, 4190, 294, 341, 1329, 11, 341, 4641, 307, 516, 281, 550, 2736, 264, 558, 2158, 281, 291, 13, 407, 286, 478, 445, 51024], "temperature": 0.0, "avg_logprob": -0.08895098929311715, "compression_ratio": 1.768181818181818, "no_speech_prob": 0.0204334519803524}, {"id": 241, "seek": 162708, "start": 1640.28, "end": 1644.6799999999998, "text": " going to talk about that a little bit more. So I'm just going to say print names length. It's going", "tokens": [51024, 516, 281, 751, 466, 300, 257, 707, 857, 544, 13, 407, 286, 478, 445, 516, 281, 584, 4482, 5288, 4641, 13, 467, 311, 516, 51244], "temperature": 0.0, "avg_logprob": -0.08895098929311715, "compression_ratio": 1.768181818181818, "no_speech_prob": 0.0204334519803524}, {"id": 242, "seek": 162708, "start": 1644.6799999999998, "end": 1651.3999999999999, "text": " to say, you'll see here, let me scroll a little bit, it'll say three, three items in this array.", "tokens": [51244, 281, 584, 11, 291, 603, 536, 510, 11, 718, 385, 11369, 257, 707, 857, 11, 309, 603, 584, 1045, 11, 1045, 4754, 294, 341, 10225, 13, 51580], "temperature": 0.0, "avg_logprob": -0.08895098929311715, "compression_ratio": 1.768181818181818, "no_speech_prob": 0.0204334519803524}, {"id": 243, "seek": 165140, "start": 1652.3600000000001, "end": 1656.3600000000001, "text": " I'm going to change the names list to var so that we can actually", "tokens": [50412, 286, 478, 516, 281, 1319, 264, 5288, 1329, 281, 1374, 370, 300, 321, 393, 767, 50612], "temperature": 0.0, "avg_logprob": -0.12028344144526217, "compression_ratio": 1.6712962962962963, "no_speech_prob": 0.002739315154030919}, {"id": 244, "seek": 165140, "start": 1659.0, "end": 1665.88, "text": " change its contents and mutate it. I just want to add a new name to this names. And I will just say", "tokens": [50744, 1319, 1080, 15768, 293, 5839, 473, 309, 13, 286, 445, 528, 281, 909, 257, 777, 1315, 281, 341, 5288, 13, 400, 286, 486, 445, 584, 51088], "temperature": 0.0, "avg_logprob": -0.12028344144526217, "compression_ratio": 1.6712962962962963, "no_speech_prob": 0.002739315154030919}, {"id": 245, "seek": 165140, "start": 1665.88, "end": 1672.2800000000002, "text": " add. It's a function, as you can see, because it has parentheses right after it. And I will say", "tokens": [51088, 909, 13, 467, 311, 257, 2445, 11, 382, 291, 393, 536, 11, 570, 309, 575, 34153, 558, 934, 309, 13, 400, 286, 486, 584, 51408], "temperature": 0.0, "avg_logprob": -0.12028344144526217, "compression_ratio": 1.6712962962962963, "no_speech_prob": 0.002739315154030919}, {"id": 246, "seek": 165140, "start": 1674.0400000000002, "end": 1680.6000000000001, "text": " my name. And then semicolon to end the statement. Now, if I say print names length right after this", "tokens": [51496, 452, 1315, 13, 400, 550, 27515, 38780, 281, 917, 264, 5629, 13, 823, 11, 498, 286, 584, 4482, 5288, 4641, 558, 934, 341, 51824], "temperature": 0.0, "avg_logprob": -0.12028344144526217, "compression_ratio": 1.6712962962962963, "no_speech_prob": 0.002739315154030919}, {"id": 247, "seek": 168060, "start": 1680.6, "end": 1687.8, "text": " statement, you guessed it. Oh, I can see, actually, you may not see all the print statements", "tokens": [50364, 5629, 11, 291, 21852, 309, 13, 876, 11, 286, 393, 536, 11, 767, 11, 291, 815, 406, 536, 439, 264, 4482, 12363, 50724], "temperature": 0.0, "avg_logprob": -0.07365679096531223, "compression_ratio": 1.5706521739130435, "no_speech_prob": 8.043466368690133e-05}, {"id": 248, "seek": 168060, "start": 1687.8, "end": 1693.8799999999999, "text": " because this text is right there. So let me resize my Visual Studio code a little bit so you can see", "tokens": [50724, 570, 341, 2487, 307, 558, 456, 13, 407, 718, 385, 50069, 452, 23187, 13500, 3089, 257, 707, 857, 370, 291, 393, 536, 51028], "temperature": 0.0, "avg_logprob": -0.07365679096531223, "compression_ratio": 1.5706521739130435, "no_speech_prob": 8.043466368690133e-05}, {"id": 249, "seek": 168060, "start": 1693.8799999999999, "end": 1701.8799999999999, "text": " things a little bit better. Sorry about that. So now we have names length here. And you can see", "tokens": [51028, 721, 257, 707, 857, 1101, 13, 4919, 466, 300, 13, 407, 586, 321, 362, 5288, 4641, 510, 13, 400, 291, 393, 536, 51428], "temperature": 0.0, "avg_logprob": -0.07365679096531223, "compression_ratio": 1.5706521739130435, "no_speech_prob": 8.043466368690133e-05}, {"id": 250, "seek": 170188, "start": 1701.88, "end": 1713.16, "text": " the second time around it said four. So when you say dot after the name of a variable,", "tokens": [50364, 264, 1150, 565, 926, 309, 848, 1451, 13, 407, 562, 291, 584, 5893, 934, 264, 1315, 295, 257, 7006, 11, 50928], "temperature": 0.0, "avg_logprob": -0.0904128256808506, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.10992519557476044}, {"id": 251, "seek": 170188, "start": 1713.16, "end": 1717.4, "text": " and that means it can be a constant, a variable, or a final variable, after you put dot", "tokens": [50928, 293, 300, 1355, 309, 393, 312, 257, 5754, 11, 257, 7006, 11, 420, 257, 2572, 7006, 11, 934, 291, 829, 5893, 51140], "temperature": 0.0, "avg_logprob": -0.0904128256808506, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.10992519557476044}, {"id": 252, "seek": 170188, "start": 1718.2, "end": 1724.2800000000002, "text": " after its name, you're accessing different properties or different functions inside that", "tokens": [51180, 934, 1080, 1315, 11, 291, 434, 26440, 819, 7221, 420, 819, 6828, 1854, 300, 51484], "temperature": 0.0, "avg_logprob": -0.0904128256808506, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.10992519557476044}, {"id": 253, "seek": 170188, "start": 1724.2800000000002, "end": 1730.1200000000001, "text": " thing. So it's kind of like an accessor. It allows you to drill down inside an object and grab things", "tokens": [51484, 551, 13, 407, 309, 311, 733, 295, 411, 364, 2105, 284, 13, 467, 4045, 291, 281, 11392, 760, 1854, 364, 2657, 293, 4444, 721, 51776], "temperature": 0.0, "avg_logprob": -0.0904128256808506, "compression_ratio": 1.697674418604651, "no_speech_prob": 0.10992519557476044}, {"id": 254, "seek": 173012, "start": 1730.12, "end": 1739.32, "text": " out of it, or maybe make that object do something for you. So I think that's good enough, to be", "tokens": [50364, 484, 295, 309, 11, 420, 1310, 652, 300, 2657, 360, 746, 337, 291, 13, 407, 286, 519, 300, 311, 665, 1547, 11, 281, 312, 50824], "temperature": 0.0, "avg_logprob": -0.13645761319906405, "compression_ratio": 1.5892116182572613, "no_speech_prob": 0.001175521407276392}, {"id": 255, "seek": 173012, "start": 1739.32, "end": 1743.9599999999998, "text": " honest with you, about lists. I don't want to go too much into details and scare people about", "tokens": [50824, 3245, 365, 291, 11, 466, 14511, 13, 286, 500, 380, 528, 281, 352, 886, 709, 666, 4365, 293, 17185, 561, 466, 51056], "temperature": 0.0, "avg_logprob": -0.13645761319906405, "compression_ratio": 1.5892116182572613, "no_speech_prob": 0.001175521407276392}, {"id": 256, "seek": 173012, "start": 1744.6799999999998, "end": 1751.8, "text": " all the different things you can do with lists. But there is great documentation on Dart's own", "tokens": [51092, 439, 264, 819, 721, 291, 393, 360, 365, 14511, 13, 583, 456, 307, 869, 14333, 322, 30271, 311, 1065, 51448], "temperature": 0.0, "avg_logprob": -0.13645761319906405, "compression_ratio": 1.5892116182572613, "no_speech_prob": 0.001175521407276392}, {"id": 257, "seek": 173012, "start": 1751.8, "end": 1756.36, "text": " website. All you have to do is just to Google or duck, duck, go, or whatever you want to use, bing", "tokens": [51448, 3144, 13, 1057, 291, 362, 281, 360, 307, 445, 281, 3329, 420, 12482, 11, 12482, 11, 352, 11, 420, 2035, 291, 528, 281, 764, 11, 272, 278, 51676], "temperature": 0.0, "avg_logprob": -0.13645761319906405, "compression_ratio": 1.5892116182572613, "no_speech_prob": 0.001175521407276392}, {"id": 258, "seek": 175636, "start": 1757.08, "end": 1763.9599999999998, "text": " your way through and just search for dart arrays documentation, or just dart arrays, and then you", "tokens": [50400, 428, 636, 807, 293, 445, 3164, 337, 39010, 41011, 14333, 11, 420, 445, 39010, 41011, 11, 293, 550, 291, 50744], "temperature": 0.0, "avg_logprob": -0.18719471825493705, "compression_ratio": 1.6359832635983265, "no_speech_prob": 0.006771857384592295}, {"id": 259, "seek": 175636, "start": 1763.9599999999998, "end": 1769.1599999999999, "text": " will find lots of information about it. Or sorry, dart lists, because in dart they're actually", "tokens": [50744, 486, 915, 3195, 295, 1589, 466, 309, 13, 1610, 2597, 11, 39010, 14511, 11, 570, 294, 39010, 436, 434, 767, 51004], "temperature": 0.0, "avg_logprob": -0.18719471825493705, "compression_ratio": 1.6359832635983265, "no_speech_prob": 0.006771857384592295}, {"id": 260, "seek": 175636, "start": 1769.1599999999999, "end": 1774.12, "text": " called lists. In some other programming languages they are called arrays, but those names can be", "tokens": [51004, 1219, 14511, 13, 682, 512, 661, 9410, 8650, 436, 366, 1219, 41011, 11, 457, 729, 5288, 393, 312, 51252], "temperature": 0.0, "avg_logprob": -0.18719471825493705, "compression_ratio": 1.6359832635983265, "no_speech_prob": 0.006771857384592295}, {"id": 261, "seek": 175636, "start": 1774.12, "end": 1778.6799999999998, "text": " used interchangeably, to be honest with you. Lists and arrays are kind of like almost the same thing.", "tokens": [51252, 1143, 30358, 1188, 11, 281, 312, 3245, 365, 291, 13, 441, 1751, 293, 41011, 366, 733, 295, 411, 1920, 264, 912, 551, 13, 51480], "temperature": 0.0, "avg_logprob": -0.18719471825493705, "compression_ratio": 1.6359832635983265, "no_speech_prob": 0.006771857384592295}, {"id": 262, "seek": 177868, "start": 1778.68, "end": 1790.44, "text": " So all right, that was lists in dart. I'm going to take it in my notes so that we know we've talked", "tokens": [50364, 407, 439, 558, 11, 300, 390, 14511, 294, 39010, 13, 286, 478, 516, 281, 747, 309, 294, 452, 5570, 370, 300, 321, 458, 321, 600, 2825, 50952], "temperature": 0.0, "avg_logprob": -0.152958246866862, "compression_ratio": 1.558659217877095, "no_speech_prob": 0.00881956610828638}, {"id": 263, "seek": 177868, "start": 1790.44, "end": 1799.48, "text": " about it. The next topic that I want to talk about in this video are things called sets.", "tokens": [50952, 466, 309, 13, 440, 958, 4829, 300, 286, 528, 281, 751, 466, 294, 341, 960, 366, 721, 1219, 6352, 13, 51404], "temperature": 0.0, "avg_logprob": -0.152958246866862, "compression_ratio": 1.558659217877095, "no_speech_prob": 0.00881956610828638}, {"id": 264, "seek": 177868, "start": 1802.04, "end": 1808.52, "text": " All right, and as you can see in the caption I've written here is a list of unique things.", "tokens": [51532, 1057, 558, 11, 293, 382, 291, 393, 536, 294, 264, 31974, 286, 600, 3720, 510, 307, 257, 1329, 295, 3845, 721, 13, 51856], "temperature": 0.0, "avg_logprob": -0.152958246866862, "compression_ratio": 1.558659217877095, "no_speech_prob": 0.00881956610828638}, {"id": 265, "seek": 180868, "start": 1808.76, "end": 1818.28, "text": " Whereas lists were lists of homogeneous things, sets are lists of unique things. So", "tokens": [50368, 13813, 14511, 645, 14511, 295, 42632, 721, 11, 6352, 366, 14511, 295, 3845, 721, 13, 407, 50844], "temperature": 0.0, "avg_logprob": -0.13628941875393108, "compression_ratio": 1.5163398692810457, "no_speech_prob": 9.94103102129884e-05}, {"id": 266, "seek": 180868, "start": 1820.92, "end": 1825.0, "text": " I think the best way actually to explain sets is just to jump right into it.", "tokens": [50976, 286, 519, 264, 1151, 636, 767, 281, 2903, 6352, 307, 445, 281, 3012, 558, 666, 309, 13, 51180], "temperature": 0.0, "avg_logprob": -0.13628941875393108, "compression_ratio": 1.5163398692810457, "no_speech_prob": 9.94103102129884e-05}, {"id": 267, "seek": 180868, "start": 1825.0, "end": 1832.44, "text": " So the syntax for set is with a curly bracket. Actually, I think it is.", "tokens": [51180, 407, 264, 28431, 337, 992, 307, 365, 257, 32066, 16904, 13, 5135, 11, 286, 519, 309, 307, 13, 51552], "temperature": 0.0, "avg_logprob": -0.13628941875393108, "compression_ratio": 1.5163398692810457, "no_speech_prob": 9.94103102129884e-05}, {"id": 268, "seek": 183244, "start": 1832.44, "end": 1839.64, "text": " Yeah, I think so. So let's say final names, and I'm just going to say curly bracket foo,", "tokens": [50364, 865, 11, 286, 519, 370, 13, 407, 718, 311, 584, 2572, 5288, 11, 293, 286, 478, 445, 516, 281, 584, 32066, 16904, 726, 78, 11, 50724], "temperature": 0.0, "avg_logprob": -0.2801411811341631, "compression_ratio": 1.6244343891402715, "no_speech_prob": 0.00519259599968791}, {"id": 269, "seek": 183244, "start": 1840.76, "end": 1847.88, "text": " and then end that. Okay, just like that. Now if I type names here, you will see that the suggestion", "tokens": [50780, 293, 550, 917, 300, 13, 1033, 11, 445, 411, 300, 13, 823, 498, 286, 2010, 5288, 510, 11, 291, 486, 536, 300, 264, 16541, 51136], "temperature": 0.0, "avg_logprob": -0.2801411811341631, "compression_ratio": 1.6244343891402715, "no_speech_prob": 0.00519259599968791}, {"id": 270, "seek": 183244, "start": 1847.88, "end": 1854.04, "text": " provided here, or the information provided by Visual Studio Code says names is a set of string.", "tokens": [51136, 5649, 510, 11, 420, 264, 1589, 5649, 538, 23187, 13500, 15549, 1619, 5288, 307, 257, 992, 295, 6798, 13, 51444], "temperature": 0.0, "avg_logprob": -0.2801411811341631, "compression_ratio": 1.6244343891402715, "no_speech_prob": 0.00519259599968791}, {"id": 271, "seek": 183244, "start": 1854.8400000000001, "end": 1860.04, "text": " We talked about this in the previous chapter, that when I say final names,", "tokens": [51484, 492, 2825, 466, 341, 294, 264, 3894, 7187, 11, 300, 562, 286, 584, 2572, 5288, 11, 51744], "temperature": 0.0, "avg_logprob": -0.2801411811341631, "compression_ratio": 1.6244343891402715, "no_speech_prob": 0.00519259599968791}, {"id": 272, "seek": 186004, "start": 1860.04, "end": 1867.3999999999999, "text": " or final something, name, for instance, is foo, I'm kind of telling Dart to create a variable", "tokens": [50364, 420, 2572, 746, 11, 1315, 11, 337, 5197, 11, 307, 726, 78, 11, 286, 478, 733, 295, 3585, 30271, 281, 1884, 257, 7006, 50732], "temperature": 0.0, "avg_logprob": -0.2318252929269451, "compression_ratio": 1.5879120879120878, "no_speech_prob": 0.00042349760769866407}, {"id": 273, "seek": 186004, "start": 1868.68, "end": 1874.68, "text": " whose reference name is name, and its value is foo, and Dart automatically understand that the", "tokens": [50796, 6104, 6408, 1315, 307, 1315, 11, 293, 1080, 2158, 307, 726, 78, 11, 293, 30271, 6772, 1223, 300, 264, 51096], "temperature": 0.0, "avg_logprob": -0.2318252929269451, "compression_ratio": 1.5879120879120878, "no_speech_prob": 0.00042349760769866407}, {"id": 274, "seek": 186004, "start": 1874.68, "end": 1882.84, "text": " data type of this value is string, because its data is string. So you don't have to say final string", "tokens": [51096, 1412, 2010, 295, 341, 2158, 307, 6798, 11, 570, 1080, 1412, 307, 6798, 13, 407, 291, 500, 380, 362, 281, 584, 2572, 6798, 51504], "temperature": 0.0, "avg_logprob": -0.2318252929269451, "compression_ratio": 1.5879120879120878, "no_speech_prob": 0.00042349760769866407}, {"id": 275, "seek": 188284, "start": 1882.84, "end": 1890.28, "text": " is string. Although you could do that, but let's change this to const as well.", "tokens": [50364, 307, 6798, 13, 5780, 291, 727, 360, 300, 11, 457, 718, 311, 1319, 341, 281, 1817, 382, 731, 13, 50736], "temperature": 0.0, "avg_logprob": -0.11909574990744119, "compression_ratio": 1.6079295154185023, "no_speech_prob": 0.016799109056591988}, {"id": 276, "seek": 188284, "start": 1892.6799999999998, "end": 1897.1599999999999, "text": " You don't have to actually say this is a string, because Dart understands it automatically.", "tokens": [50856, 509, 500, 380, 362, 281, 767, 584, 341, 307, 257, 6798, 11, 570, 30271, 15146, 309, 6772, 13, 51080], "temperature": 0.0, "avg_logprob": -0.11909574990744119, "compression_ratio": 1.6079295154185023, "no_speech_prob": 0.016799109056591988}, {"id": 277, "seek": 188284, "start": 1897.1599999999999, "end": 1901.56, "text": " So you just remove the data type if that's what you want to do, which is what I actually prefer", "tokens": [51080, 407, 291, 445, 4159, 264, 1412, 2010, 498, 300, 311, 437, 291, 528, 281, 360, 11, 597, 307, 437, 286, 767, 4382, 51300], "temperature": 0.0, "avg_logprob": -0.11909574990744119, "compression_ratio": 1.6079295154185023, "no_speech_prob": 0.016799109056591988}, {"id": 278, "seek": 188284, "start": 1901.56, "end": 1907.6399999999999, "text": " to do instead of being too verbose, unless you have a really good reason to provide the data type.", "tokens": [51300, 281, 360, 2602, 295, 885, 886, 9595, 541, 11, 5969, 291, 362, 257, 534, 665, 1778, 281, 2893, 264, 1412, 2010, 13, 51604], "temperature": 0.0, "avg_logprob": -0.11909574990744119, "compression_ratio": 1.6079295154185023, "no_speech_prob": 0.016799109056591988}, {"id": 279, "seek": 190764, "start": 1907.64, "end": 1917.5600000000002, "text": " Anyways, let's go back to sets. So we were here. And in the same way that we created a string,", "tokens": [50364, 15585, 11, 718, 311, 352, 646, 281, 6352, 13, 407, 321, 645, 510, 13, 400, 294, 264, 912, 636, 300, 321, 2942, 257, 6798, 11, 50860], "temperature": 0.0, "avg_logprob": -0.1100470403606972, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.0016702006105333567}, {"id": 280, "seek": 190764, "start": 1917.5600000000002, "end": 1923.4, "text": " and then Dart automatically understood the data type, by putting curly brackets here,", "tokens": [50860, 293, 550, 30271, 6772, 7320, 264, 1412, 2010, 11, 538, 3372, 32066, 26179, 510, 11, 51152], "temperature": 0.0, "avg_logprob": -0.1100470403606972, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.0016702006105333567}, {"id": 281, "seek": 190764, "start": 1923.4, "end": 1927.8000000000002, "text": " or curly braces here, and putting some data inside that, Dart automatically understand,", "tokens": [51152, 420, 32066, 41537, 510, 11, 293, 3372, 512, 1412, 1854, 300, 11, 30271, 6772, 1223, 11, 51372], "temperature": 0.0, "avg_logprob": -0.1100470403606972, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.0016702006105333567}, {"id": 282, "seek": 190764, "start": 1927.8000000000002, "end": 1932.8400000000001, "text": " okay, this is a set of some stuff in here, and this stuff for now just looks like a string.", "tokens": [51372, 1392, 11, 341, 307, 257, 992, 295, 512, 1507, 294, 510, 11, 293, 341, 1507, 337, 586, 445, 1542, 411, 257, 6798, 13, 51624], "temperature": 0.0, "avg_logprob": -0.1100470403606972, "compression_ratio": 1.7307692307692308, "no_speech_prob": 0.0016702006105333567}, {"id": 283, "seek": 193284, "start": 1932.84, "end": 1944.4399999999998, "text": " So if I say foo bar as, Dart says, okay, this is fine. But if I go in here and I say foo again,", "tokens": [50364, 407, 498, 286, 584, 726, 78, 2159, 382, 11, 30271, 1619, 11, 1392, 11, 341, 307, 2489, 13, 583, 498, 286, 352, 294, 510, 293, 286, 584, 726, 78, 797, 11, 50944], "temperature": 0.0, "avg_logprob": -0.1342913972006904, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.007202564738690853}, {"id": 284, "seek": 193284, "start": 1944.4399999999998, "end": 1950.28, "text": " you can see I automatically get an error message saying two elements in a constant set literal", "tokens": [50944, 291, 393, 536, 286, 6772, 483, 364, 6713, 3636, 1566, 732, 4959, 294, 257, 5754, 992, 20411, 51236], "temperature": 0.0, "avg_logprob": -0.1342913972006904, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.007202564738690853}, {"id": 285, "seek": 193284, "start": 1950.28, "end": 1955.32, "text": " cannot be equal, because it understands that this foo has already repeated there.", "tokens": [51236, 2644, 312, 2681, 11, 570, 309, 15146, 300, 341, 726, 78, 575, 1217, 10477, 456, 13, 51488], "temperature": 0.0, "avg_logprob": -0.1342913972006904, "compression_ratio": 1.4945054945054945, "no_speech_prob": 0.007202564738690853}, {"id": 286, "seek": 195532, "start": 1955.8799999999999, "end": 1962.12, "text": " Okay. So let's remove foo from here, and let's do an experiment. Let's change these names to var", "tokens": [50392, 1033, 13, 407, 718, 311, 4159, 726, 78, 490, 510, 11, 293, 718, 311, 360, 364, 5120, 13, 961, 311, 1319, 613, 5288, 281, 1374, 50704], "temperature": 0.0, "avg_logprob": -0.23342300042873476, "compression_ratio": 1.6473988439306357, "no_speech_prob": 0.019319705665111542}, {"id": 287, "seek": 195532, "start": 1962.12, "end": 1969.6399999999999, "text": " so that we can actually change its contents. Then go to the next line and say names, if I can", "tokens": [50704, 370, 300, 321, 393, 767, 1319, 1080, 15768, 13, 1396, 352, 281, 264, 958, 1622, 293, 584, 5288, 11, 498, 286, 393, 51080], "temperature": 0.0, "avg_logprob": -0.23342300042873476, "compression_ratio": 1.6473988439306357, "no_speech_prob": 0.019319705665111542}, {"id": 288, "seek": 195532, "start": 1969.6399999999999, "end": 1979.1599999999999, "text": " spell, and say add, and then say foo again. And then say names, add var, and then set add vas,", "tokens": [51080, 9827, 11, 293, 584, 909, 11, 293, 550, 584, 726, 78, 797, 13, 400, 550, 584, 5288, 11, 909, 1374, 11, 293, 550, 992, 909, 11481, 11, 51556], "temperature": 0.0, "avg_logprob": -0.23342300042873476, "compression_ratio": 1.6473988439306357, "no_speech_prob": 0.019319705665111542}, {"id": 289, "seek": 197916, "start": 1979.5600000000002, "end": 1987.8000000000002, "text": " or sorry, names, add vas. And then we'll say print names. Okay. And I'm going to clear the logs with", "tokens": [50384, 420, 2597, 11, 5288, 11, 909, 11481, 13, 400, 550, 321, 603, 584, 4482, 5288, 13, 1033, 13, 400, 286, 478, 516, 281, 1850, 264, 20820, 365, 50796], "temperature": 0.0, "avg_logprob": -0.25407320493227475, "compression_ratio": 1.5212765957446808, "no_speech_prob": 0.0013625749852508307}, {"id": 290, "seek": 197916, "start": 1987.8000000000002, "end": 1995.0, "text": " this button right here, and then I'm going to press command S. And you can see that the set", "tokens": [50796, 341, 2960, 558, 510, 11, 293, 550, 286, 478, 516, 281, 1886, 5622, 318, 13, 400, 291, 393, 536, 300, 264, 992, 51156], "temperature": 0.0, "avg_logprob": -0.25407320493227475, "compression_ratio": 1.5212765957446808, "no_speech_prob": 0.0013625749852508307}, {"id": 291, "seek": 197916, "start": 1995.0, "end": 2004.44, "text": " is still foo bar vas. Nothing changed really there. That is one of the greatest properties of", "tokens": [51156, 307, 920, 726, 78, 2159, 11481, 13, 6693, 3105, 534, 456, 13, 663, 307, 472, 295, 264, 6636, 7221, 295, 51628], "temperature": 0.0, "avg_logprob": -0.25407320493227475, "compression_ratio": 1.5212765957446808, "no_speech_prob": 0.0013625749852508307}, {"id": 292, "seek": 200444, "start": 2005.0800000000002, "end": 2013.0800000000002, "text": " lists, of sets in Dart, and in pretty much every other programming language that supports sets,", "tokens": [50396, 14511, 11, 295, 6352, 294, 30271, 11, 293, 294, 1238, 709, 633, 661, 9410, 2856, 300, 9346, 6352, 11, 50796], "temperature": 0.0, "avg_logprob": -0.22298614184061685, "compression_ratio": 1.5210526315789474, "no_speech_prob": 0.00453074648976326}, {"id": 293, "seek": 200444, "start": 2013.0800000000002, "end": 2023.0800000000002, "text": " and that's sets ensure always that their data is not duplicated. And this is, I mean, there's", "tokens": [50796, 293, 300, 311, 6352, 5586, 1009, 300, 641, 1412, 307, 406, 1581, 564, 3587, 13, 400, 341, 307, 11, 286, 914, 11, 456, 311, 51296], "temperature": 0.0, "avg_logprob": -0.22298614184061685, "compression_ratio": 1.5210526315789474, "no_speech_prob": 0.00453074648976326}, {"id": 294, "seek": 200444, "start": 2023.0800000000002, "end": 2028.3600000000001, "text": " lots of magic happening in the background that I haven't really talked about. I mean, for instance,", "tokens": [51296, 3195, 295, 5585, 2737, 294, 264, 3678, 300, 286, 2378, 380, 534, 2825, 466, 13, 286, 914, 11, 337, 5197, 11, 51560], "temperature": 0.0, "avg_logprob": -0.22298614184061685, "compression_ratio": 1.5210526315789474, "no_speech_prob": 0.00453074648976326}, {"id": 295, "seek": 202836, "start": 2029.24, "end": 2035.7199999999998, "text": " the question that you may ask, how does Dart know foo is the same as foo? Does it compare them?", "tokens": [50408, 264, 1168, 300, 291, 815, 1029, 11, 577, 775, 30271, 458, 726, 78, 307, 264, 912, 382, 726, 78, 30, 4402, 309, 6794, 552, 30, 50732], "temperature": 0.0, "avg_logprob": -0.08508332885137879, "compression_ratio": 1.591093117408907, "no_speech_prob": 0.006751298438757658}, {"id": 296, "seek": 202836, "start": 2035.7199999999998, "end": 2043.7199999999998, "text": " Yes, it kind of does, actually. It's internally doing a comparison between these things, but we", "tokens": [50732, 1079, 11, 309, 733, 295, 775, 11, 767, 13, 467, 311, 19501, 884, 257, 9660, 1296, 613, 721, 11, 457, 321, 51132], "temperature": 0.0, "avg_logprob": -0.08508332885137879, "compression_ratio": 1.591093117408907, "no_speech_prob": 0.006751298438757658}, {"id": 297, "seek": 202836, "start": 2043.7199999999998, "end": 2050.52, "text": " never told it how that comparison should work. And that is because, if you remember from operators,", "tokens": [51132, 1128, 1907, 309, 577, 300, 9660, 820, 589, 13, 400, 300, 307, 570, 11, 498, 291, 1604, 490, 19077, 11, 51472], "temperature": 0.0, "avg_logprob": -0.08508332885137879, "compression_ratio": 1.591093117408907, "no_speech_prob": 0.006751298438757658}, {"id": 298, "seek": 202836, "start": 2050.52, "end": 2057.3199999999997, "text": " when we talked about it, the string, now we haven't talked about classes. Well, I'm just going to say", "tokens": [51472, 562, 321, 2825, 466, 309, 11, 264, 6798, 11, 586, 321, 2378, 380, 2825, 466, 5359, 13, 1042, 11, 286, 478, 445, 516, 281, 584, 51812], "temperature": 0.0, "avg_logprob": -0.08508332885137879, "compression_ratio": 1.591093117408907, "no_speech_prob": 0.006751298438757658}, {"id": 299, "seek": 205732, "start": 2057.32, "end": 2069.2400000000002, "text": " strings in Dart already know how they should be compared with other strings. So, they kind of", "tokens": [50364, 13985, 294, 30271, 1217, 458, 577, 436, 820, 312, 5347, 365, 661, 13985, 13, 407, 11, 436, 733, 295, 50960], "temperature": 0.0, "avg_logprob": -0.12415334701538086, "compression_ratio": 1.7, "no_speech_prob": 0.0005102892173454165}, {"id": 300, "seek": 205732, "start": 2069.2400000000002, "end": 2074.1200000000003, "text": " have this logic of hash codes and comparison operators that they know exactly like, okay,", "tokens": [50960, 362, 341, 9952, 295, 22019, 14211, 293, 9660, 19077, 300, 436, 458, 2293, 411, 11, 1392, 11, 51204], "temperature": 0.0, "avg_logprob": -0.12415334701538086, "compression_ratio": 1.7, "no_speech_prob": 0.0005102892173454165}, {"id": 301, "seek": 205732, "start": 2075.0800000000004, "end": 2082.6800000000003, "text": " given this string, am I the same as that? Sorry, given what I am and this new thing that you're", "tokens": [51252, 2212, 341, 6798, 11, 669, 286, 264, 912, 382, 300, 30, 4919, 11, 2212, 437, 286, 669, 293, 341, 777, 551, 300, 291, 434, 51632], "temperature": 0.0, "avg_logprob": -0.12415334701538086, "compression_ratio": 1.7, "no_speech_prob": 0.0005102892173454165}, {"id": 302, "seek": 205732, "start": 2082.6800000000003, "end": 2087.0800000000004, "text": " providing me, I'm foo and you're saying foo, am I the same as foo? And then it says yes or no.", "tokens": [51632, 6530, 385, 11, 286, 478, 726, 78, 293, 291, 434, 1566, 726, 78, 11, 669, 286, 264, 912, 382, 726, 78, 30, 400, 550, 309, 1619, 2086, 420, 572, 13, 51852], "temperature": 0.0, "avg_logprob": -0.12415334701538086, "compression_ratio": 1.7, "no_speech_prob": 0.0005102892173454165}, {"id": 303, "seek": 208708, "start": 2087.08, "end": 2096.92, "text": " So, that is what sets are doing internally, but we don't actually see that. So, just know for now", "tokens": [50364, 407, 11, 300, 307, 437, 6352, 366, 884, 19501, 11, 457, 321, 500, 380, 767, 536, 300, 13, 407, 11, 445, 458, 337, 586, 50856], "temperature": 0.0, "avg_logprob": -0.10516382455825805, "compression_ratio": 1.53125, "no_speech_prob": 4.132311369176023e-05}, {"id": 304, "seek": 208708, "start": 2096.92, "end": 2105.4, "text": " that sets in Dart allow you to create unique list of things, okay? And then you may also be a little", "tokens": [50856, 300, 6352, 294, 30271, 2089, 291, 281, 1884, 3845, 1329, 295, 721, 11, 1392, 30, 400, 550, 291, 815, 611, 312, 257, 707, 51280], "temperature": 0.0, "avg_logprob": -0.10516382455825805, "compression_ratio": 1.53125, "no_speech_prob": 4.132311369176023e-05}, {"id": 305, "seek": 208708, "start": 2105.4, "end": 2114.6, "text": " bit tempted to go and say, okay, I have things here. Let's say const things is equal to foo and", "tokens": [51280, 857, 29941, 281, 352, 293, 584, 11, 1392, 11, 286, 362, 721, 510, 13, 961, 311, 584, 1817, 721, 307, 2681, 281, 726, 78, 293, 51740], "temperature": 0.0, "avg_logprob": -0.10516382455825805, "compression_ratio": 1.53125, "no_speech_prob": 4.132311369176023e-05}, {"id": 306, "seek": 211460, "start": 2114.68, "end": 2122.68, "text": " then you say one. And this will also work. And that is because Dart has the concept of object", "tokens": [50368, 550, 291, 584, 472, 13, 400, 341, 486, 611, 589, 13, 400, 300, 307, 570, 30271, 575, 264, 3410, 295, 2657, 50768], "temperature": 0.0, "avg_logprob": -0.12389923544491038, "compression_ratio": 1.6743119266055047, "no_speech_prob": 0.00017723676864989102}, {"id": 307, "seek": 211460, "start": 2122.68, "end": 2126.92, "text": " as well. You can see, you'll see things and it'll say, oh, now it's a set of object.", "tokens": [50768, 382, 731, 13, 509, 393, 536, 11, 291, 603, 536, 721, 293, 309, 603, 584, 11, 1954, 11, 586, 309, 311, 257, 992, 295, 2657, 13, 50980], "temperature": 0.0, "avg_logprob": -0.12389923544491038, "compression_ratio": 1.6743119266055047, "no_speech_prob": 0.00017723676864989102}, {"id": 308, "seek": 211460, "start": 2128.44, "end": 2134.44, "text": " We haven't talked about objects yet. And if I look at my notes, I can see that we're going to", "tokens": [51056, 492, 2378, 380, 2825, 466, 6565, 1939, 13, 400, 498, 286, 574, 412, 452, 5570, 11, 286, 393, 536, 300, 321, 434, 516, 281, 51356], "temperature": 0.0, "avg_logprob": -0.12389923544491038, "compression_ratio": 1.6743119266055047, "no_speech_prob": 0.00017723676864989102}, {"id": 309, "seek": 211460, "start": 2134.44, "end": 2140.6, "text": " talk about objects in chapter six and we're right now in chapter four. So, we haven't really", "tokens": [51356, 751, 466, 6565, 294, 7187, 2309, 293, 321, 434, 558, 586, 294, 7187, 1451, 13, 407, 11, 321, 2378, 380, 534, 51664], "temperature": 0.0, "avg_logprob": -0.12389923544491038, "compression_ratio": 1.6743119266055047, "no_speech_prob": 0.00017723676864989102}, {"id": 310, "seek": 214060, "start": 2140.6, "end": 2147.16, "text": " gotten to that point to talk about objects. And I don't want to really scare you about objects", "tokens": [50364, 5768, 281, 300, 935, 281, 751, 466, 6565, 13, 400, 286, 500, 380, 528, 281, 534, 17185, 291, 466, 6565, 50692], "temperature": 0.0, "avg_logprob": -0.10268078909979926, "compression_ratio": 1.8067632850241546, "no_speech_prob": 0.0029822185169905424}, {"id": 311, "seek": 214060, "start": 2147.16, "end": 2155.08, "text": " and what they actually are, but just know that there is a hierarchy of data types. So, you have", "tokens": [50692, 293, 437, 436, 767, 366, 11, 457, 445, 458, 300, 456, 307, 257, 22333, 295, 1412, 3467, 13, 407, 11, 291, 362, 51088], "temperature": 0.0, "avg_logprob": -0.10268078909979926, "compression_ratio": 1.8067632850241546, "no_speech_prob": 0.0029822185169905424}, {"id": 312, "seek": 214060, "start": 2155.08, "end": 2162.44, "text": " object and then you have data types that kind of derive their functionality from objects. So,", "tokens": [51088, 2657, 293, 550, 291, 362, 1412, 3467, 300, 733, 295, 28446, 641, 14980, 490, 6565, 13, 407, 11, 51456], "temperature": 0.0, "avg_logprob": -0.10268078909979926, "compression_ratio": 1.8067632850241546, "no_speech_prob": 0.0029822185169905424}, {"id": 313, "seek": 214060, "start": 2163.0, "end": 2169.0, "text": " here sits object and then here sits string, integer, double, et cetera. And then you have", "tokens": [51484, 510, 12696, 2657, 293, 550, 510, 12696, 6798, 11, 24922, 11, 3834, 11, 1030, 11458, 13, 400, 550, 291, 362, 51784], "temperature": 0.0, "avg_logprob": -0.10268078909979926, "compression_ratio": 1.8067632850241546, "no_speech_prob": 0.0029822185169905424}, {"id": 314, "seek": 216900, "start": 2169.0, "end": 2173.88, "text": " sets and blah, blah, blah. Now, when you were here, when you were first here and you said,", "tokens": [50364, 6352, 293, 12288, 11, 12288, 11, 12288, 13, 823, 11, 562, 291, 645, 510, 11, 562, 291, 645, 700, 510, 293, 291, 848, 11, 50608], "temperature": 0.0, "avg_logprob": -0.08773373866426772, "compression_ratio": 1.8860759493670887, "no_speech_prob": 0.000903652107808739}, {"id": 315, "seek": 216900, "start": 2173.88, "end": 2180.12, "text": " I have foo, bar, baz, all strings, then Dart was like, okay, this is a set of strings.", "tokens": [50608, 286, 362, 726, 78, 11, 2159, 11, 27147, 11, 439, 13985, 11, 550, 30271, 390, 411, 11, 1392, 11, 341, 307, 257, 992, 295, 13985, 13, 50920], "temperature": 0.0, "avg_logprob": -0.08773373866426772, "compression_ratio": 1.8860759493670887, "no_speech_prob": 0.000903652107808739}, {"id": 316, "seek": 216900, "start": 2180.76, "end": 2185.16, "text": " But then you said, oh, I have a string and I have an integer, which is a number.", "tokens": [50952, 583, 550, 291, 848, 11, 1954, 11, 286, 362, 257, 6798, 293, 286, 362, 364, 24922, 11, 597, 307, 257, 1230, 13, 51172], "temperature": 0.0, "avg_logprob": -0.08773373866426772, "compression_ratio": 1.8860759493670887, "no_speech_prob": 0.000903652107808739}, {"id": 317, "seek": 216900, "start": 2186.12, "end": 2191.48, "text": " Now, Dart was like, oops, I have, I can't, I mean, I don't really, I can't say this is a list of", "tokens": [51220, 823, 11, 30271, 390, 411, 11, 34166, 11, 286, 362, 11, 286, 393, 380, 11, 286, 914, 11, 286, 500, 380, 534, 11, 286, 393, 380, 584, 341, 307, 257, 1329, 295, 51488], "temperature": 0.0, "avg_logprob": -0.08773373866426772, "compression_ratio": 1.8860759493670887, "no_speech_prob": 0.000903652107808739}, {"id": 318, "seek": 216900, "start": 2191.48, "end": 2195.88, "text": " strings and integers. That's not possible in Dart. So, it says I'm going to take the common", "tokens": [51488, 13985, 293, 41674, 13, 663, 311, 406, 1944, 294, 30271, 13, 407, 11, 309, 1619, 286, 478, 516, 281, 747, 264, 2689, 51708], "temperature": 0.0, "avg_logprob": -0.08773373866426772, "compression_ratio": 1.8860759493670887, "no_speech_prob": 0.000903652107808739}, {"id": 319, "seek": 219588, "start": 2195.88, "end": 2203.1600000000003, "text": " denominator type that sits above them as their parent to specify what these things are. Okay.", "tokens": [50364, 20687, 2010, 300, 12696, 3673, 552, 382, 641, 2596, 281, 16500, 437, 613, 721, 366, 13, 1033, 13, 50728], "temperature": 0.0, "avg_logprob": -0.08918439900433575, "compression_ratio": 1.7465437788018434, "no_speech_prob": 0.008511758409440517}, {"id": 320, "seek": 219588, "start": 2203.1600000000003, "end": 2208.84, "text": " And that is kind of like the same thing that we do in real life in that if I give you, for instance,", "tokens": [50728, 400, 300, 307, 733, 295, 411, 264, 912, 551, 300, 321, 360, 294, 957, 993, 294, 300, 498, 286, 976, 291, 11, 337, 5197, 11, 51012], "temperature": 0.0, "avg_logprob": -0.08918439900433575, "compression_ratio": 1.7465437788018434, "no_speech_prob": 0.008511758409440517}, {"id": 321, "seek": 219588, "start": 2211.4, "end": 2217.96, "text": " two candies, like a Twix bar, then you would say, this is a Twix bar. That's one thing.", "tokens": [51140, 732, 43877, 11, 411, 257, 2574, 970, 2159, 11, 550, 291, 576, 584, 11, 341, 307, 257, 2574, 970, 2159, 13, 663, 311, 472, 551, 13, 51468], "temperature": 0.0, "avg_logprob": -0.08918439900433575, "compression_ratio": 1.7465437788018434, "no_speech_prob": 0.008511758409440517}, {"id": 322, "seek": 219588, "start": 2218.6800000000003, "end": 2224.76, "text": " If I give you 10 Twix bars, then you will say a lot of Twix bars or 10 Twix bars. If I just give", "tokens": [51504, 759, 286, 976, 291, 1266, 2574, 970, 10228, 11, 550, 291, 486, 584, 257, 688, 295, 2574, 970, 10228, 420, 1266, 2574, 970, 10228, 13, 759, 286, 445, 976, 51808], "temperature": 0.0, "avg_logprob": -0.08918439900433575, "compression_ratio": 1.7465437788018434, "no_speech_prob": 0.008511758409440517}, {"id": 323, "seek": 222476, "start": 2224.76, "end": 2230.28, "text": " you a bunch of Twix bars, you'll be like, oh, that's a bunch of Twix bars. But if I go and", "tokens": [50364, 291, 257, 3840, 295, 2574, 970, 10228, 11, 291, 603, 312, 411, 11, 1954, 11, 300, 311, 257, 3840, 295, 2574, 970, 10228, 13, 583, 498, 286, 352, 293, 50640], "temperature": 0.0, "avg_logprob": -0.11132885669839793, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00040992136928252876}, {"id": 324, "seek": 222476, "start": 2231.5600000000004, "end": 2239.5600000000004, "text": " like blend like lots of Twix bars, Mars bars, whatever, all the sweets into a bag and I give", "tokens": [50704, 411, 10628, 411, 3195, 295, 2574, 970, 10228, 11, 9692, 10228, 11, 2035, 11, 439, 264, 28680, 666, 257, 3411, 293, 286, 976, 51104], "temperature": 0.0, "avg_logprob": -0.11132885669839793, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00040992136928252876}, {"id": 325, "seek": 222476, "start": 2239.5600000000004, "end": 2245.8, "text": " you that bag, what do you call it? You don't say, oh, this is a bag of Twix and Snickers and this is", "tokens": [51104, 291, 300, 3411, 11, 437, 360, 291, 818, 309, 30, 509, 500, 380, 584, 11, 1954, 11, 341, 307, 257, 3411, 295, 2574, 970, 293, 9264, 36928, 293, 341, 307, 51416], "temperature": 0.0, "avg_logprob": -0.11132885669839793, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00040992136928252876}, {"id": 326, "seek": 222476, "start": 2246.6000000000004, "end": 2252.6000000000004, "text": " and Mars bar. No, you would probably just say candy. It's a bag of candies. And that's what", "tokens": [51456, 293, 9692, 2159, 13, 883, 11, 291, 576, 1391, 445, 584, 11237, 13, 467, 311, 257, 3411, 295, 43877, 13, 400, 300, 311, 437, 51756], "temperature": 0.0, "avg_logprob": -0.11132885669839793, "compression_ratio": 1.7570093457943925, "no_speech_prob": 0.00040992136928252876}, {"id": 327, "seek": 225260, "start": 2252.6, "end": 2258.6, "text": " Dart is doing here. Saying, oh, you threw a lot of stuff in here. I can't comprehend it. This is", "tokens": [50364, 30271, 307, 884, 510, 13, 34087, 11, 1954, 11, 291, 11918, 257, 688, 295, 1507, 294, 510, 13, 286, 393, 380, 38183, 309, 13, 639, 307, 50664], "temperature": 0.0, "avg_logprob": -0.09278840488857693, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.002677511190995574}, {"id": 328, "seek": 225260, "start": 2258.6, "end": 2265.64, "text": " a set of objects. So we do that in real life. And that's what Dart is doing here. So just", "tokens": [50664, 257, 992, 295, 6565, 13, 407, 321, 360, 300, 294, 957, 993, 13, 400, 300, 311, 437, 30271, 307, 884, 510, 13, 407, 445, 51016], "temperature": 0.0, "avg_logprob": -0.09278840488857693, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.002677511190995574}, {"id": 329, "seek": 225260, "start": 2265.64, "end": 2269.72, "text": " when you see object, just know that, oh, Dart doesn't really know what this is anymore.", "tokens": [51016, 562, 291, 536, 2657, 11, 445, 458, 300, 11, 1954, 11, 30271, 1177, 380, 534, 458, 437, 341, 307, 3602, 13, 51220], "temperature": 0.0, "avg_logprob": -0.09278840488857693, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.002677511190995574}, {"id": 330, "seek": 225260, "start": 2270.68, "end": 2278.12, "text": " Or it kind of knows what it is. It's just a bunch of stuff. So that's what object in this case means.", "tokens": [51268, 1610, 309, 733, 295, 3255, 437, 309, 307, 13, 467, 311, 445, 257, 3840, 295, 1507, 13, 407, 300, 311, 437, 2657, 294, 341, 1389, 1355, 13, 51640], "temperature": 0.0, "avg_logprob": -0.09278840488857693, "compression_ratio": 1.7327188940092166, "no_speech_prob": 0.002677511190995574}, {"id": 331, "seek": 227812, "start": 2278.12, "end": 2283.16, "text": " So that was a weird comparison, maybe. But I hope you get what I mean.", "tokens": [50364, 407, 300, 390, 257, 3657, 9660, 11, 1310, 13, 583, 286, 1454, 291, 483, 437, 286, 914, 13, 50616], "temperature": 0.0, "avg_logprob": -0.21254197346795464, "compression_ratio": 1.6289592760180995, "no_speech_prob": 0.0012907605851069093}, {"id": 332, "seek": 227812, "start": 2285.08, "end": 2288.52, "text": " And if you see me looking here, it's just because I'm looking at my notes to ensure that I've", "tokens": [50712, 400, 498, 291, 536, 385, 1237, 510, 11, 309, 311, 445, 570, 286, 478, 1237, 412, 452, 5570, 281, 5586, 300, 286, 600, 50884], "temperature": 0.0, "avg_logprob": -0.21254197346795464, "compression_ratio": 1.6289592760180995, "no_speech_prob": 0.0012907605851069093}, {"id": 333, "seek": 227812, "start": 2288.52, "end": 2296.04, "text": " explained the things that I've set out to explain. So talked a little bit about hash codes and sets.", "tokens": [50884, 8825, 264, 721, 300, 286, 600, 992, 484, 281, 2903, 13, 407, 2825, 257, 707, 857, 466, 22019, 14211, 293, 6352, 13, 51260], "temperature": 0.0, "avg_logprob": -0.21254197346795464, "compression_ratio": 1.6289592760180995, "no_speech_prob": 0.0012907605851069093}, {"id": 334, "seek": 227812, "start": 2296.04, "end": 2303.24, "text": " We don't have to go into details about that. So now let's go and talk a little bit about maps.", "tokens": [51260, 492, 500, 380, 362, 281, 352, 666, 4365, 466, 300, 13, 407, 586, 718, 311, 352, 293, 751, 257, 707, 857, 466, 11317, 13, 51620], "temperature": 0.0, "avg_logprob": -0.21254197346795464, "compression_ratio": 1.6289592760180995, "no_speech_prob": 0.0012907605851069093}, {"id": 335, "seek": 230324, "start": 2303.24, "end": 2314.12, "text": " Now let's go and talk a little bit about maps. And maps are one of my favorite data structures", "tokens": [50364, 823, 718, 311, 352, 293, 751, 257, 707, 857, 466, 11317, 13, 400, 11317, 366, 472, 295, 452, 2954, 1412, 9227, 50908], "temperature": 0.0, "avg_logprob": -0.09334111213684082, "compression_ratio": 1.5698324022346368, "no_speech_prob": 0.00029876898042857647}, {"id": 336, "seek": 230324, "start": 2314.12, "end": 2318.7599999999998, "text": " in any programming language that supports them. Pretty much almost all modern programming languages", "tokens": [50908, 294, 604, 9410, 2856, 300, 9346, 552, 13, 10693, 709, 1920, 439, 4363, 9410, 8650, 51140], "temperature": 0.0, "avg_logprob": -0.09334111213684082, "compression_ratio": 1.5698324022346368, "no_speech_prob": 0.00029876898042857647}, {"id": 337, "seek": 230324, "start": 2318.7599999999998, "end": 2327.72, "text": " support maps. So a map is a data structure. As you can see here, maps are used to hold", "tokens": [51140, 1406, 11317, 13, 407, 257, 4471, 307, 257, 1412, 3877, 13, 1018, 291, 393, 536, 510, 11, 11317, 366, 1143, 281, 1797, 51588], "temperature": 0.0, "avg_logprob": -0.09334111213684082, "compression_ratio": 1.5698324022346368, "no_speech_prob": 0.00029876898042857647}, {"id": 338, "seek": 232772, "start": 2327.72, "end": 2330.2799999999997, "text": " key value pairs of information. And what that means is,", "tokens": [50364, 2141, 2158, 15494, 295, 1589, 13, 400, 437, 300, 1355, 307, 11, 50492], "temperature": 0.0, "avg_logprob": -0.11380247342384468, "compression_ratio": 1.4683544303797469, "no_speech_prob": 0.24614939093589783}, {"id": 339, "seek": 232772, "start": 2333.16, "end": 2338.68, "text": " let's say that you want to explain a person using their different properties.", "tokens": [50636, 718, 311, 584, 300, 291, 528, 281, 2903, 257, 954, 1228, 641, 819, 7221, 13, 50912], "temperature": 0.0, "avg_logprob": -0.11380247342384468, "compression_ratio": 1.4683544303797469, "no_speech_prob": 0.24614939093589783}, {"id": 340, "seek": 232772, "start": 2340.52, "end": 2352.52, "text": " Then you would say age, their gender, their hair color, their height, whatever, name, all of that.", "tokens": [51004, 1396, 291, 576, 584, 3205, 11, 641, 7898, 11, 641, 2578, 2017, 11, 641, 6681, 11, 2035, 11, 1315, 11, 439, 295, 300, 13, 51604], "temperature": 0.0, "avg_logprob": -0.11380247342384468, "compression_ratio": 1.4683544303797469, "no_speech_prob": 0.24614939093589783}, {"id": 341, "seek": 235252, "start": 2352.52, "end": 2361.24, "text": " So these are kind of like your keys. So you would explain the properties of that person", "tokens": [50364, 407, 613, 366, 733, 295, 411, 428, 9317, 13, 407, 291, 576, 2903, 264, 7221, 295, 300, 954, 50800], "temperature": 0.0, "avg_logprob": -0.09754129556509164, "compression_ratio": 2.1129943502824857, "no_speech_prob": 0.0011651520617306232}, {"id": 342, "seek": 235252, "start": 2361.24, "end": 2366.7599999999998, "text": " using those keys. And all those keys have their values. So if you say height, then you would say", "tokens": [50800, 1228, 729, 9317, 13, 400, 439, 729, 9317, 362, 641, 4190, 13, 407, 498, 291, 584, 6681, 11, 550, 291, 576, 584, 51076], "temperature": 0.0, "avg_logprob": -0.09754129556509164, "compression_ratio": 2.1129943502824857, "no_speech_prob": 0.0011651520617306232}, {"id": 343, "seek": 235252, "start": 2366.7599999999998, "end": 2376.36, "text": " like 180. And if you say weight, then you would say like 70 kilograms. So these are key values.", "tokens": [51076, 411, 11971, 13, 400, 498, 291, 584, 3364, 11, 550, 291, 576, 584, 411, 5285, 30690, 13, 407, 613, 366, 2141, 4190, 13, 51556], "temperature": 0.0, "avg_logprob": -0.09754129556509164, "compression_ratio": 2.1129943502824857, "no_speech_prob": 0.0011651520617306232}, {"id": 344, "seek": 235252, "start": 2376.36, "end": 2381.72, "text": " The keys are the properties of that person and the values are the values of those properties.", "tokens": [51556, 440, 9317, 366, 264, 7221, 295, 300, 954, 293, 264, 4190, 366, 264, 4190, 295, 729, 7221, 13, 51824], "temperature": 0.0, "avg_logprob": -0.09754129556509164, "compression_ratio": 2.1129943502824857, "no_speech_prob": 0.0011651520617306232}, {"id": 345, "seek": 238172, "start": 2382.68, "end": 2389.56, "text": " And the way to create a map is very similar. So it's very similar to a set with curly brackets.", "tokens": [50412, 400, 264, 636, 281, 1884, 257, 4471, 307, 588, 2531, 13, 407, 309, 311, 588, 2531, 281, 257, 992, 365, 32066, 26179, 13, 50756], "temperature": 0.0, "avg_logprob": -0.1306005243985158, "compression_ratio": 1.7339449541284404, "no_speech_prob": 9.855928510660306e-05}, {"id": 346, "seek": 238172, "start": 2390.7599999999998, "end": 2396.3599999999997, "text": " You say person, and then you say equal to. Actually, this is just a name. You don't have", "tokens": [50816, 509, 584, 954, 11, 293, 550, 291, 584, 2681, 281, 13, 5135, 11, 341, 307, 445, 257, 1315, 13, 509, 500, 380, 362, 51096], "temperature": 0.0, "avg_logprob": -0.1306005243985158, "compression_ratio": 1.7339449541284404, "no_speech_prob": 9.855928510660306e-05}, {"id": 347, "seek": 238172, "start": 2396.3599999999997, "end": 2401.56, "text": " to say person, but yeah. Or you can just say const. So person, and then you open curly brackets,", "tokens": [51096, 281, 584, 954, 11, 457, 1338, 13, 1610, 291, 393, 445, 584, 1817, 13, 407, 954, 11, 293, 550, 291, 1269, 32066, 26179, 11, 51356], "temperature": 0.0, "avg_logprob": -0.1306005243985158, "compression_ratio": 1.7339449541284404, "no_speech_prob": 9.855928510660306e-05}, {"id": 348, "seek": 238172, "start": 2401.56, "end": 2406.7599999999998, "text": " and then you would do your keys here. And I would say the key of age, for instance, I'll say 20.", "tokens": [51356, 293, 550, 291, 576, 360, 428, 9317, 510, 13, 400, 286, 576, 584, 264, 2141, 295, 3205, 11, 337, 5197, 11, 286, 603, 584, 945, 13, 51616], "temperature": 0.0, "avg_logprob": -0.1306005243985158, "compression_ratio": 1.7339449541284404, "no_speech_prob": 9.855928510660306e-05}, {"id": 349, "seek": 240676, "start": 2407.7200000000003, "end": 2414.36, "text": " And then you say colon. Is it colon? Yeah, it's a colon. And then you end the whole set", "tokens": [50412, 400, 550, 291, 584, 8255, 13, 1119, 309, 8255, 30, 865, 11, 309, 311, 257, 8255, 13, 400, 550, 291, 917, 264, 1379, 992, 50744], "temperature": 0.0, "avg_logprob": -0.12225159845854107, "compression_ratio": 1.5930232558139534, "no_speech_prob": 0.010713830590248108}, {"id": 350, "seek": 240676, "start": 2414.36, "end": 2425.6400000000003, "text": " with a semicolon. So I just created a basically here, I created a map whose keys are string", "tokens": [50744, 365, 257, 27515, 38780, 13, 407, 286, 445, 2942, 257, 1936, 510, 11, 286, 2942, 257, 4471, 6104, 9317, 366, 6798, 51308], "temperature": 0.0, "avg_logprob": -0.12225159845854107, "compression_ratio": 1.5930232558139534, "no_speech_prob": 0.010713830590248108}, {"id": 351, "seek": 240676, "start": 2425.6400000000003, "end": 2432.36, "text": " and values are integers. Now let's see if Dart understands that. You see, it's a map of string", "tokens": [51308, 293, 4190, 366, 41674, 13, 823, 718, 311, 536, 498, 30271, 15146, 300, 13, 509, 536, 11, 309, 311, 257, 4471, 295, 6798, 51644], "temperature": 0.0, "avg_logprob": -0.12225159845854107, "compression_ratio": 1.5930232558139534, "no_speech_prob": 0.010713830590248108}, {"id": 352, "seek": 243236, "start": 2432.36, "end": 2439.4, "text": " as keys and int as values. But now, as you saw before, the analogy of candies, now if I say,", "tokens": [50364, 382, 9317, 293, 560, 382, 4190, 13, 583, 586, 11, 382, 291, 1866, 949, 11, 264, 21663, 295, 43877, 11, 586, 498, 286, 584, 11, 50716], "temperature": 0.0, "avg_logprob": -0.15360755063174816, "compression_ratio": 1.5621621621621622, "no_speech_prob": 0.036838725209236145}, {"id": 353, "seek": 243236, "start": 2439.4, "end": 2448.28, "text": " okay, I have another key, and it says name, and I say, oh, the name is foo. Now Dart's going to be", "tokens": [50716, 1392, 11, 286, 362, 1071, 2141, 11, 293, 309, 1619, 1315, 11, 293, 286, 584, 11, 1954, 11, 264, 1315, 307, 726, 78, 13, 823, 30271, 311, 516, 281, 312, 51160], "temperature": 0.0, "avg_logprob": -0.15360755063174816, "compression_ratio": 1.5621621621621622, "no_speech_prob": 0.036838725209236145}, {"id": 354, "seek": 243236, "start": 2448.28, "end": 2456.2000000000003, "text": " like, ooh, what is this person? Oh, it's a map of string as keys and object as the value. Because", "tokens": [51160, 411, 11, 17024, 11, 437, 307, 341, 954, 30, 876, 11, 309, 311, 257, 4471, 295, 6798, 382, 9317, 293, 2657, 382, 264, 2158, 13, 1436, 51556], "temperature": 0.0, "avg_logprob": -0.15360755063174816, "compression_ratio": 1.5621621621621622, "no_speech_prob": 0.036838725209236145}, {"id": 355, "seek": 245620, "start": 2456.2, "end": 2462.52, "text": " it just looks at the common denominator of the string, which is foo, and 20, which is an integer.", "tokens": [50364, 309, 445, 1542, 412, 264, 2689, 20687, 295, 264, 6798, 11, 597, 307, 726, 78, 11, 293, 945, 11, 597, 307, 364, 24922, 13, 50680], "temperature": 0.0, "avg_logprob": -0.09570529574439639, "compression_ratio": 1.7706422018348624, "no_speech_prob": 0.021213669329881668}, {"id": 356, "seek": 245620, "start": 2462.52, "end": 2468.3599999999997, "text": " It says, oh, I don't know. I can't create a map whose keys are string and its values are both", "tokens": [50680, 467, 1619, 11, 1954, 11, 286, 500, 380, 458, 13, 286, 393, 380, 1884, 257, 4471, 6104, 9317, 366, 6798, 293, 1080, 4190, 366, 1293, 50972], "temperature": 0.0, "avg_logprob": -0.09570529574439639, "compression_ratio": 1.7706422018348624, "no_speech_prob": 0.021213669329881668}, {"id": 357, "seek": 245620, "start": 2468.3599999999997, "end": 2473.08, "text": " string and integer. So I'm just going to go to their parent and be like, oh, the parent of both", "tokens": [50972, 6798, 293, 24922, 13, 407, 286, 478, 445, 516, 281, 352, 281, 641, 2596, 293, 312, 411, 11, 1954, 11, 264, 2596, 295, 1293, 51208], "temperature": 0.0, "avg_logprob": -0.09570529574439639, "compression_ratio": 1.7706422018348624, "no_speech_prob": 0.021213669329881668}, {"id": 358, "seek": 245620, "start": 2473.08, "end": 2480.12, "text": " string and integer is object. So your values are of type object. So a bunch of candies, basically.", "tokens": [51208, 6798, 293, 24922, 307, 2657, 13, 407, 428, 4190, 366, 295, 2010, 2657, 13, 407, 257, 3840, 295, 43877, 11, 1936, 13, 51560], "temperature": 0.0, "avg_logprob": -0.09570529574439639, "compression_ratio": 1.7706422018348624, "no_speech_prob": 0.021213669329881668}, {"id": 359, "seek": 248012, "start": 2480.12, "end": 2490.92, "text": " Okay. That's how you create a map in Dart. And the other property of a map is, for instance,", "tokens": [50364, 1033, 13, 663, 311, 577, 291, 1884, 257, 4471, 294, 30271, 13, 400, 264, 661, 4707, 295, 257, 4471, 307, 11, 337, 5197, 11, 50904], "temperature": 0.0, "avg_logprob": -0.10910728103236149, "compression_ratio": 1.53475935828877, "no_speech_prob": 0.001038678572513163}, {"id": 360, "seek": 248012, "start": 2490.92, "end": 2501.08, "text": " you would say, if you go and create an age again here, you see it says two keys and a constant map", "tokens": [50904, 291, 576, 584, 11, 498, 291, 352, 293, 1884, 364, 3205, 797, 510, 11, 291, 536, 309, 1619, 732, 9317, 293, 257, 5754, 4471, 51412], "temperature": 0.0, "avg_logprob": -0.10910728103236149, "compression_ratio": 1.53475935828877, "no_speech_prob": 0.001038678572513163}, {"id": 361, "seek": 248012, "start": 2501.08, "end": 2506.12, "text": " literal cannot be equal. So it's doing some checks here, making sure that the keys are actually", "tokens": [51412, 20411, 2644, 312, 2681, 13, 407, 309, 311, 884, 512, 13834, 510, 11, 1455, 988, 300, 264, 9317, 366, 767, 51664], "temperature": 0.0, "avg_logprob": -0.10910728103236149, "compression_ratio": 1.53475935828877, "no_speech_prob": 0.001038678572513163}, {"id": 362, "seek": 250612, "start": 2506.12, "end": 2513.88, "text": " unique. So keys inside a map need to be unique. All right? However, if you go and change this", "tokens": [50364, 3845, 13, 407, 9317, 1854, 257, 4471, 643, 281, 312, 3845, 13, 1057, 558, 30, 2908, 11, 498, 291, 352, 293, 1319, 341, 50752], "temperature": 0.0, "avg_logprob": -0.12958455085754395, "compression_ratio": 1.6057142857142856, "no_speech_prob": 0.04329242184758186}, {"id": 363, "seek": 250612, "start": 2513.88, "end": 2523.64, "text": " and say var person, and then you later go and say person name is equal to foo, just like that,", "tokens": [50752, 293, 584, 1374, 954, 11, 293, 550, 291, 1780, 352, 293, 584, 954, 1315, 307, 2681, 281, 726, 78, 11, 445, 411, 300, 11, 51240], "temperature": 0.0, "avg_logprob": -0.12958455085754395, "compression_ratio": 1.6057142857142856, "no_speech_prob": 0.04329242184758186}, {"id": 364, "seek": 250612, "start": 2524.6, "end": 2530.92, "text": " and then you print the entire person. So I'm just going to say print before and print after.", "tokens": [51288, 293, 550, 291, 4482, 264, 2302, 954, 13, 407, 286, 478, 445, 516, 281, 584, 4482, 949, 293, 4482, 934, 13, 51604], "temperature": 0.0, "avg_logprob": -0.12958455085754395, "compression_ratio": 1.6057142857142856, "no_speech_prob": 0.04329242184758186}, {"id": 365, "seek": 253092, "start": 2531.2400000000002, "end": 2539.48, "text": " Okay? And you can see here, it said first time age key is 20, it has a value of 20, and the name key", "tokens": [50380, 1033, 30, 400, 291, 393, 536, 510, 11, 309, 848, 700, 565, 3205, 2141, 307, 945, 11, 309, 575, 257, 2158, 295, 945, 11, 293, 264, 1315, 2141, 50792], "temperature": 0.0, "avg_logprob": -0.1389435813540504, "compression_ratio": 1.6021505376344085, "no_speech_prob": 0.0020345530938357115}, {"id": 366, "seek": 253092, "start": 2539.48, "end": 2545.48, "text": " has a value of foo with a capital F. Then the second time around on the print statement on line 15,", "tokens": [50792, 575, 257, 2158, 295, 726, 78, 365, 257, 4238, 479, 13, 1396, 264, 1150, 565, 926, 322, 264, 4482, 5629, 322, 1622, 2119, 11, 51092], "temperature": 0.0, "avg_logprob": -0.1389435813540504, "compression_ratio": 1.6021505376344085, "no_speech_prob": 0.0020345530938357115}, {"id": 367, "seek": 253092, "start": 2546.36, "end": 2553.88, "text": " then when we print the person, it has the key of age with a value of 20, because we didn't modify", "tokens": [51136, 550, 562, 321, 4482, 264, 954, 11, 309, 575, 264, 2141, 295, 3205, 365, 257, 2158, 295, 945, 11, 570, 321, 994, 380, 16927, 51512], "temperature": 0.0, "avg_logprob": -0.1389435813540504, "compression_ratio": 1.6021505376344085, "no_speech_prob": 0.0020345530938357115}, {"id": 368, "seek": 255388, "start": 2553.88, "end": 2559.2400000000002, "text": " that, and a key of name as it was before with the value of foo with like six, I think,", "tokens": [50364, 300, 11, 293, 257, 2141, 295, 1315, 382, 309, 390, 949, 365, 264, 2158, 295, 726, 78, 365, 411, 2309, 11, 286, 519, 11, 50632], "temperature": 0.0, "avg_logprob": -0.13225074041457402, "compression_ratio": 1.6431718061674008, "no_speech_prob": 0.022346558049321175}, {"id": 369, "seek": 255388, "start": 2560.28, "end": 2567.8, "text": " capital O's. So this is how you would modify a map. You would specify the key, and then you would", "tokens": [50684, 4238, 422, 311, 13, 407, 341, 307, 577, 291, 576, 16927, 257, 4471, 13, 509, 576, 16500, 264, 2141, 11, 293, 550, 291, 576, 51060], "temperature": 0.0, "avg_logprob": -0.13225074041457402, "compression_ratio": 1.6431718061674008, "no_speech_prob": 0.022346558049321175}, {"id": 370, "seek": 255388, "start": 2567.8, "end": 2572.84, "text": " say equal to, which is an operator, and then you would say the new value. All right? However,", "tokens": [51060, 584, 2681, 281, 11, 597, 307, 364, 12973, 11, 293, 550, 291, 576, 584, 264, 777, 2158, 13, 1057, 558, 30, 2908, 11, 51312], "temperature": 0.0, "avg_logprob": -0.13225074041457402, "compression_ratio": 1.6431718061674008, "no_speech_prob": 0.022346558049321175}, {"id": 371, "seek": 255388, "start": 2572.84, "end": 2581.1600000000003, "text": " if you added a new key here, for instance, last name, and you say Baz, and that will just kind", "tokens": [51312, 498, 291, 3869, 257, 777, 2141, 510, 11, 337, 5197, 11, 1036, 1315, 11, 293, 291, 584, 42220, 11, 293, 300, 486, 445, 733, 51728], "temperature": 0.0, "avg_logprob": -0.13225074041457402, "compression_ratio": 1.6431718061674008, "no_speech_prob": 0.022346558049321175}, {"id": 372, "seek": 258116, "start": 2581.16, "end": 2588.68, "text": " of like get appended to the map. So age the same, name the same, now you have a new key", "tokens": [50364, 295, 411, 483, 724, 3502, 281, 264, 4471, 13, 407, 3205, 264, 912, 11, 1315, 264, 912, 11, 586, 291, 362, 257, 777, 2141, 50740], "temperature": 0.0, "avg_logprob": -0.08319824536641439, "compression_ratio": 1.570754716981132, "no_speech_prob": 0.000610977120231837}, {"id": 373, "seek": 258116, "start": 2588.68, "end": 2596.04, "text": " whose value is Baz. All right? And that is kind of like the basics of", "tokens": [50740, 6104, 2158, 307, 42220, 13, 1057, 558, 30, 400, 300, 307, 733, 295, 411, 264, 14688, 295, 51108], "temperature": 0.0, "avg_logprob": -0.08319824536641439, "compression_ratio": 1.570754716981132, "no_speech_prob": 0.000610977120231837}, {"id": 374, "seek": 258116, "start": 2597.8799999999997, "end": 2603.56, "text": " maps. So there are lots of things you can do with maps, and I really encourage you,", "tokens": [51200, 11317, 13, 407, 456, 366, 3195, 295, 721, 291, 393, 360, 365, 11317, 11, 293, 286, 534, 5373, 291, 11, 51484], "temperature": 0.0, "avg_logprob": -0.08319824536641439, "compression_ratio": 1.570754716981132, "no_speech_prob": 0.000610977120231837}, {"id": 375, "seek": 258116, "start": 2603.56, "end": 2607.0, "text": " just like everything else that I talked about in this chapter, that you go and read some of", "tokens": [51484, 445, 411, 1203, 1646, 300, 286, 2825, 466, 294, 341, 7187, 11, 300, 291, 352, 293, 1401, 512, 295, 51656], "temperature": 0.0, "avg_logprob": -0.08319824536641439, "compression_ratio": 1.570754716981132, "no_speech_prob": 0.000610977120231837}, {"id": 376, "seek": 260700, "start": 2607.0, "end": 2612.44, "text": " the documentations, because if you're following along with this course and your goal is to become", "tokens": [50364, 264, 4166, 763, 11, 570, 498, 291, 434, 3480, 2051, 365, 341, 1164, 293, 428, 3387, 307, 281, 1813, 50636], "temperature": 0.0, "avg_logprob": -0.09784757847688635, "compression_ratio": 1.7402597402597402, "no_speech_prob": 0.0259114857763052}, {"id": 377, "seek": 260700, "start": 2612.44, "end": 2617.56, "text": " a software engineer, and if you're, for instance, a project manager or a designer, UXer, whoever you", "tokens": [50636, 257, 4722, 11403, 11, 293, 498, 291, 434, 11, 337, 5197, 11, 257, 1716, 6598, 420, 257, 11795, 11, 40176, 260, 11, 11387, 291, 50892], "temperature": 0.0, "avg_logprob": -0.09784757847688635, "compression_ratio": 1.7402597402597402, "no_speech_prob": 0.0259114857763052}, {"id": 378, "seek": 260700, "start": 2617.56, "end": 2625.48, "text": " are, I think you need to understand that software engineers do not know all the answers. You have to", "tokens": [50892, 366, 11, 286, 519, 291, 643, 281, 1223, 300, 4722, 11955, 360, 406, 458, 439, 264, 6338, 13, 509, 362, 281, 51288], "temperature": 0.0, "avg_logprob": -0.09784757847688635, "compression_ratio": 1.7402597402597402, "no_speech_prob": 0.0259114857763052}, {"id": 379, "seek": 260700, "start": 2625.48, "end": 2631.32, "text": " go and read documentations. You have to practice, practice, practice, and put time into it. Countless,", "tokens": [51288, 352, 293, 1401, 4166, 763, 13, 509, 362, 281, 3124, 11, 3124, 11, 3124, 11, 293, 829, 565, 666, 309, 13, 5247, 1832, 11, 51580], "temperature": 0.0, "avg_logprob": -0.09784757847688635, "compression_ratio": 1.7402597402597402, "no_speech_prob": 0.0259114857763052}, {"id": 380, "seek": 263132, "start": 2631.32, "end": 2639.88, "text": " countless hours you need to put into learning. So I mean, this course, I think, is going to be so", "tokens": [50364, 19223, 2496, 291, 643, 281, 829, 666, 2539, 13, 407, 286, 914, 11, 341, 1164, 11, 286, 519, 11, 307, 516, 281, 312, 370, 50792], "temperature": 0.0, "avg_logprob": -0.1110352897644043, "compression_ratio": 1.7194570135746607, "no_speech_prob": 0.008114700205624104}, {"id": 381, "seek": 263132, "start": 2639.88, "end": 2646.76, "text": " many hours long. The way I can, I mean, I can see the planning for all the chapters that I've put", "tokens": [50792, 867, 2496, 938, 13, 440, 636, 286, 393, 11, 286, 914, 11, 286, 393, 536, 264, 5038, 337, 439, 264, 20013, 300, 286, 600, 829, 51136], "temperature": 0.0, "avg_logprob": -0.1110352897644043, "compression_ratio": 1.7194570135746607, "no_speech_prob": 0.008114700205624104}, {"id": 382, "seek": 263132, "start": 2646.76, "end": 2652.36, "text": " here. There are so many chapters. I think the entirety of this course is going to go over 20", "tokens": [51136, 510, 13, 821, 366, 370, 867, 20013, 13, 286, 519, 264, 31557, 295, 341, 1164, 307, 516, 281, 352, 670, 945, 51416], "temperature": 0.0, "avg_logprob": -0.1110352897644043, "compression_ratio": 1.7194570135746607, "no_speech_prob": 0.008114700205624104}, {"id": 383, "seek": 263132, "start": 2652.36, "end": 2657.96, "text": " hours. So you can imagine that I can't go into details about every single thing. Otherwise,", "tokens": [51416, 2496, 13, 407, 291, 393, 3811, 300, 286, 393, 380, 352, 666, 4365, 466, 633, 2167, 551, 13, 10328, 11, 51696], "temperature": 0.0, "avg_logprob": -0.1110352897644043, "compression_ratio": 1.7194570135746607, "no_speech_prob": 0.008114700205624104}, {"id": 384, "seek": 265796, "start": 2657.96, "end": 2664.36, "text": " it is just, this course is probably going to be like 200, 300 hours. It's unbelievable. So", "tokens": [50364, 309, 307, 445, 11, 341, 1164, 307, 1391, 516, 281, 312, 411, 2331, 11, 6641, 2496, 13, 467, 311, 16605, 13, 407, 50684], "temperature": 0.0, "avg_logprob": -0.11906734466552735, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.007475817110389471}, {"id": 385, "seek": 265796, "start": 2665.0, "end": 2669.7200000000003, "text": " we can't do that. So what I expect you to do now is just to open your browser and just type", "tokens": [50716, 321, 393, 380, 360, 300, 13, 407, 437, 286, 2066, 291, 281, 360, 586, 307, 445, 281, 1269, 428, 11185, 293, 445, 2010, 50952], "temperature": 0.0, "avg_logprob": -0.11906734466552735, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.007475817110389471}, {"id": 386, "seek": 265796, "start": 2669.7200000000003, "end": 2678.52, "text": " dart maps documentation, something like that, dart maps. So, and you also need to know that now that", "tokens": [50952, 39010, 11317, 14333, 11, 746, 411, 300, 11, 39010, 11317, 13, 407, 11, 293, 291, 611, 643, 281, 458, 300, 586, 300, 51392], "temperature": 0.0, "avg_logprob": -0.11906734466552735, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.007475817110389471}, {"id": 387, "seek": 265796, "start": 2678.52, "end": 2684.28, "text": " you're starting to Google things, you need to be aware of the word dart and that dart is an existing,", "tokens": [51392, 291, 434, 2891, 281, 3329, 721, 11, 291, 643, 281, 312, 3650, 295, 264, 1349, 39010, 293, 300, 39010, 307, 364, 6741, 11, 51680], "temperature": 0.0, "avg_logprob": -0.11906734466552735, "compression_ratio": 1.6594827586206897, "no_speech_prob": 0.007475817110389471}, {"id": 388, "seek": 268428, "start": 2684.28, "end": 2691.6400000000003, "text": " very popular name for just darts, darts. Okay. So sometimes depending on what you're Googling,", "tokens": [50364, 588, 3743, 1315, 337, 445, 274, 11814, 11, 274, 11814, 13, 1033, 13, 407, 2171, 5413, 322, 437, 291, 434, 45005, 1688, 11, 50732], "temperature": 0.0, "avg_logprob": -0.08070857399388363, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.003973969258368015}, {"id": 389, "seek": 268428, "start": 2692.52, "end": 2699.1600000000003, "text": " if a topic related to the classic darts that you throw is more popular than the topic of", "tokens": [50776, 498, 257, 4829, 4077, 281, 264, 7230, 274, 11814, 300, 291, 3507, 307, 544, 3743, 813, 264, 4829, 295, 51108], "temperature": 0.0, "avg_logprob": -0.08070857399388363, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.003973969258368015}, {"id": 390, "seek": 268428, "start": 2699.1600000000003, "end": 2706.44, "text": " the programming language, which kind of sounds the same, it may pop up first. So in this case,", "tokens": [51108, 264, 9410, 2856, 11, 597, 733, 295, 3263, 264, 912, 11, 309, 815, 1665, 493, 700, 13, 407, 294, 341, 1389, 11, 51472], "temperature": 0.0, "avg_logprob": -0.08070857399388363, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.003973969258368015}, {"id": 391, "seek": 268428, "start": 2706.44, "end": 2713.32, "text": " if you say dart map, you may actually end up in some sort of weird website that explains to you", "tokens": [51472, 498, 291, 584, 39010, 4471, 11, 291, 815, 767, 917, 493, 294, 512, 1333, 295, 3657, 3144, 300, 13948, 281, 291, 51816], "temperature": 0.0, "avg_logprob": -0.08070857399388363, "compression_ratio": 1.626086956521739, "no_speech_prob": 0.003973969258368015}, {"id": 392, "seek": 271332, "start": 2713.32, "end": 2719.6400000000003, "text": " how you can throw darts at a map. I don't know. I'm just trying to bring it up because I actually", "tokens": [50364, 577, 291, 393, 3507, 274, 11814, 412, 257, 4471, 13, 286, 500, 380, 458, 13, 286, 478, 445, 1382, 281, 1565, 309, 493, 570, 286, 767, 50680], "temperature": 0.0, "avg_logprob": -0.07841525618562993, "compression_ratio": 1.651376146788991, "no_speech_prob": 4.636572703020647e-05}, {"id": 393, "seek": 271332, "start": 2719.6400000000003, "end": 2723.2400000000002, "text": " ended up in that situation that I searched for something related to dart. I actually ended up", "tokens": [50680, 4590, 493, 294, 300, 2590, 300, 286, 22961, 337, 746, 4077, 281, 39010, 13, 286, 767, 4590, 493, 50860], "temperature": 0.0, "avg_logprob": -0.07841525618562993, "compression_ratio": 1.651376146788991, "no_speech_prob": 4.636572703020647e-05}, {"id": 394, "seek": 271332, "start": 2723.2400000000002, "end": 2728.84, "text": " in a weird website talking about darts as like a sport. So know that as well, please.", "tokens": [50860, 294, 257, 3657, 3144, 1417, 466, 274, 11814, 382, 411, 257, 7282, 13, 407, 458, 300, 382, 731, 11, 1767, 13, 51140], "temperature": 0.0, "avg_logprob": -0.07841525618562993, "compression_ratio": 1.651376146788991, "no_speech_prob": 4.636572703020647e-05}, {"id": 395, "seek": 271332, "start": 2730.84, "end": 2740.04, "text": " All right. Now we've talked about maps. So I'm going to take that in my notes. Now", "tokens": [51240, 1057, 558, 13, 823, 321, 600, 2825, 466, 11317, 13, 407, 286, 478, 516, 281, 747, 300, 294, 452, 5570, 13, 823, 51700], "temperature": 0.0, "avg_logprob": -0.07841525618562993, "compression_ratio": 1.651376146788991, "no_speech_prob": 4.636572703020647e-05}, {"id": 396, "seek": 274004, "start": 2740.04, "end": 2751.32, "text": " what's coming in the next chapter, we are going to talk about a very important concept in darts", "tokens": [50364, 437, 311, 1348, 294, 264, 958, 7187, 11, 321, 366, 516, 281, 751, 466, 257, 588, 1021, 3410, 294, 274, 11814, 50928], "temperature": 0.0, "avg_logprob": -0.20570190974644254, "compression_ratio": 1.6312849162011174, "no_speech_prob": 0.0002201900351792574}, {"id": 397, "seek": 274004, "start": 2751.32, "end": 2756.52, "text": " and many other programming languages such as Rust and Swift, and that is null safety or dart calls", "tokens": [50928, 293, 867, 661, 9410, 8650, 1270, 382, 34952, 293, 25539, 11, 293, 300, 307, 18184, 4514, 420, 39010, 5498, 51188], "temperature": 0.0, "avg_logprob": -0.20570190974644254, "compression_ratio": 1.6312849162011174, "no_speech_prob": 0.0002201900351792574}, {"id": 398, "seek": 274004, "start": 2756.52, "end": 2764.2, "text": " it the sound null safety. It is a very important thing to know about in darts and it will greatly", "tokens": [51188, 309, 264, 1626, 18184, 4514, 13, 467, 307, 257, 588, 1021, 551, 281, 458, 466, 294, 274, 11814, 293, 309, 486, 14147, 51572], "temperature": 0.0, "avg_logprob": -0.20570190974644254, "compression_ratio": 1.6312849162011174, "no_speech_prob": 0.0002201900351792574}, {"id": 399, "seek": 276420, "start": 2764.2, "end": 2769.0, "text": " and it will greatly help you in the future as you write your Flutter applications.", "tokens": [50364, 293, 309, 486, 14147, 854, 291, 294, 264, 2027, 382, 291, 2464, 428, 3235, 9947, 5821, 13, 50604], "temperature": 0.0, "avg_logprob": -0.11249675107805916, "compression_ratio": 1.6523809523809523, "no_speech_prob": 0.005899814423173666}, {"id": 400, "seek": 276420, "start": 2770.12, "end": 2778.3599999999997, "text": " In this course, I'm going to use a lot of null. I'm going to make a lot of null references,", "tokens": [50660, 682, 341, 1164, 11, 286, 478, 516, 281, 764, 257, 688, 295, 18184, 13, 286, 478, 516, 281, 652, 257, 688, 295, 18184, 15400, 11, 51072], "temperature": 0.0, "avg_logprob": -0.11249675107805916, "compression_ratio": 1.6523809523809523, "no_speech_prob": 0.005899814423173666}, {"id": 401, "seek": 276420, "start": 2778.3599999999997, "end": 2784.68, "text": " talk about null quite a lot throughout the course. So it is very important that we go through that", "tokens": [51072, 751, 466, 18184, 1596, 257, 688, 3710, 264, 1164, 13, 407, 309, 307, 588, 1021, 300, 321, 352, 807, 300, 51388], "temperature": 0.0, "avg_logprob": -0.11249675107805916, "compression_ratio": 1.6523809523809523, "no_speech_prob": 0.005899814423173666}, {"id": 402, "seek": 276420, "start": 2784.68, "end": 2788.12, "text": " as soon as possible, and we're definitely not going to leave that out. So", "tokens": [51388, 382, 2321, 382, 1944, 11, 293, 321, 434, 2138, 406, 516, 281, 1856, 300, 484, 13, 407, 51560], "temperature": 0.0, "avg_logprob": -0.11249675107805916, "compression_ratio": 1.6523809523809523, "no_speech_prob": 0.005899814423173666}, {"id": 403, "seek": 278812, "start": 2789.08, "end": 2796.12, "text": " that's going to be for chapter five. So keep an eye out for chapter five that is to follow. So", "tokens": [50412, 300, 311, 516, 281, 312, 337, 7187, 1732, 13, 407, 1066, 364, 3313, 484, 337, 7187, 1732, 300, 307, 281, 1524, 13, 407, 50764], "temperature": 0.0, "avg_logprob": -0.0802264008470761, "compression_ratio": 1.7906976744186047, "no_speech_prob": 0.03040294349193573}, {"id": 404, "seek": 278812, "start": 2796.12, "end": 2800.44, "text": " I hope that you enjoyed this chapter, chapter number four, where we talked about dart control", "tokens": [50764, 286, 1454, 300, 291, 4626, 341, 7187, 11, 7187, 1230, 1451, 11, 689, 321, 2825, 466, 39010, 1969, 50980], "temperature": 0.0, "avg_logprob": -0.0802264008470761, "compression_ratio": 1.7906976744186047, "no_speech_prob": 0.03040294349193573}, {"id": 405, "seek": 278812, "start": 2800.44, "end": 2807.72, "text": " statements and collections, and I'll see you in the next chapter. Hello everyone, and welcome to", "tokens": [50980, 12363, 293, 16641, 11, 293, 286, 603, 536, 291, 294, 264, 958, 7187, 13, 2425, 1518, 11, 293, 2928, 281, 51344], "temperature": 0.0, "avg_logprob": -0.0802264008470761, "compression_ratio": 1.7906976744186047, "no_speech_prob": 0.03040294349193573}, {"id": 406, "seek": 278812, "start": 2807.72, "end": 2814.04, "text": " chapter number five of this Flutter course. In this chapter, we're going to talk about null safety.", "tokens": [51344, 7187, 1230, 1732, 295, 341, 3235, 9947, 1164, 13, 682, 341, 7187, 11, 321, 434, 516, 281, 751, 466, 18184, 4514, 13, 51660], "temperature": 0.0, "avg_logprob": -0.0802264008470761, "compression_ratio": 1.7906976744186047, "no_speech_prob": 0.03040294349193573}, {"id": 407, "seek": 281404, "start": 2814.84, "end": 2818.2, "text": " In the previous chapter, chapter number four, we talked about", "tokens": [50404, 682, 264, 3894, 7187, 11, 7187, 1230, 1451, 11, 321, 2825, 466, 50572], "temperature": 0.0, "avg_logprob": -0.11932859922710218, "compression_ratio": 1.5804878048780489, "no_speech_prob": 0.0015482923481613398}, {"id": 408, "seek": 281404, "start": 2819.08, "end": 2826.68, "text": " dart control statements and collections. And before we go on to talk about enumerations", "tokens": [50616, 39010, 1969, 12363, 293, 16641, 13, 400, 949, 321, 352, 322, 281, 751, 466, 465, 15583, 763, 50996], "temperature": 0.0, "avg_logprob": -0.11932859922710218, "compression_ratio": 1.5804878048780489, "no_speech_prob": 0.0015482923481613398}, {"id": 409, "seek": 281404, "start": 2826.68, "end": 2832.36, "text": " and objects and classes, I feel it is very important to talk about null safety, which is", "tokens": [50996, 293, 6565, 293, 5359, 11, 286, 841, 309, 307, 588, 1021, 281, 751, 466, 18184, 4514, 11, 597, 307, 51280], "temperature": 0.0, "avg_logprob": -0.11932859922710218, "compression_ratio": 1.5804878048780489, "no_speech_prob": 0.0015482923481613398}, {"id": 410, "seek": 281404, "start": 2832.36, "end": 2842.12, "text": " a concept that is available in most modern languages such as Rust and Swift. So it is", "tokens": [51280, 257, 3410, 300, 307, 2435, 294, 881, 4363, 8650, 1270, 382, 34952, 293, 25539, 13, 407, 309, 307, 51768], "temperature": 0.0, "avg_logprob": -0.11932859922710218, "compression_ratio": 1.5804878048780489, "no_speech_prob": 0.0015482923481613398}, {"id": 411, "seek": 284212, "start": 2842.12, "end": 2847.48, "text": " important to get this out of the way before we continue. Maybe not even get it out of the way,", "tokens": [50364, 1021, 281, 483, 341, 484, 295, 264, 636, 949, 321, 2354, 13, 2704, 406, 754, 483, 309, 484, 295, 264, 636, 11, 50632], "temperature": 0.0, "avg_logprob": -0.06351289649804433, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.0006242483505047858}, {"id": 412, "seek": 284212, "start": 2847.48, "end": 2853.7999999999997, "text": " but actually learn what it means and try to utilize it so that we can write better code.", "tokens": [50632, 457, 767, 1466, 437, 309, 1355, 293, 853, 281, 16117, 309, 370, 300, 321, 393, 2464, 1101, 3089, 13, 50948], "temperature": 0.0, "avg_logprob": -0.06351289649804433, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.0006242483505047858}, {"id": 413, "seek": 284212, "start": 2853.7999999999997, "end": 2864.92, "text": " So I thought to just bring up the concept of null values and why they're important to handle. Well,", "tokens": [50948, 407, 286, 1194, 281, 445, 1565, 493, 264, 3410, 295, 18184, 4190, 293, 983, 436, 434, 1021, 281, 4813, 13, 1042, 11, 51504], "temperature": 0.0, "avg_logprob": -0.06351289649804433, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.0006242483505047858}, {"id": 414, "seek": 284212, "start": 2866.68, "end": 2870.92, "text": " you've seen so far that we have data types. A data type can be, for instance, a string,", "tokens": [51592, 291, 600, 1612, 370, 1400, 300, 321, 362, 1412, 3467, 13, 316, 1412, 2010, 393, 312, 11, 337, 5197, 11, 257, 6798, 11, 51804], "temperature": 0.0, "avg_logprob": -0.06351289649804433, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.0006242483505047858}, {"id": 415, "seek": 287092, "start": 2870.92, "end": 2879.2400000000002, "text": " can be an integer, and then you can put values in them. However, in programming languages,", "tokens": [50364, 393, 312, 364, 24922, 11, 293, 550, 291, 393, 829, 4190, 294, 552, 13, 2908, 11, 294, 9410, 8650, 11, 50780], "temperature": 0.0, "avg_logprob": -0.07124266961608271, "compression_ratio": 1.7751196172248804, "no_speech_prob": 0.001086720614694059}, {"id": 416, "seek": 287092, "start": 2879.2400000000002, "end": 2886.92, "text": " you are also allowed to have the concept of the absence of a value. So on one hand, you have", "tokens": [50780, 291, 366, 611, 4350, 281, 362, 264, 3410, 295, 264, 17145, 295, 257, 2158, 13, 407, 322, 472, 1011, 11, 291, 362, 51164], "temperature": 0.0, "avg_logprob": -0.07124266961608271, "compression_ratio": 1.7751196172248804, "no_speech_prob": 0.001086720614694059}, {"id": 417, "seek": 287092, "start": 2886.92, "end": 2892.44, "text": " values. So you, for instance, have a string value equal to foo bar or your name or whatever it is.", "tokens": [51164, 4190, 13, 407, 291, 11, 337, 5197, 11, 362, 257, 6798, 2158, 2681, 281, 726, 78, 2159, 420, 428, 1315, 420, 2035, 309, 307, 13, 51440], "temperature": 0.0, "avg_logprob": -0.07124266961608271, "compression_ratio": 1.7751196172248804, "no_speech_prob": 0.001086720614694059}, {"id": 418, "seek": 287092, "start": 2893.2400000000002, "end": 2897.4, "text": " And then on the other hand, you can have the absence of that value. So you can see that,", "tokens": [51480, 400, 550, 322, 264, 661, 1011, 11, 291, 393, 362, 264, 17145, 295, 300, 2158, 13, 407, 291, 393, 536, 300, 11, 51688], "temperature": 0.0, "avg_logprob": -0.07124266961608271, "compression_ratio": 1.7751196172248804, "no_speech_prob": 0.001086720614694059}, {"id": 419, "seek": 289740, "start": 2898.2000000000003, "end": 2903.64, "text": " okay, I have a container, I have a variable that can contain the values of type string,", "tokens": [50404, 1392, 11, 286, 362, 257, 10129, 11, 286, 362, 257, 7006, 300, 393, 5304, 264, 4190, 295, 2010, 6798, 11, 50676], "temperature": 0.0, "avg_logprob": -0.07594027317745584, "compression_ratio": 1.7672955974842768, "no_speech_prob": 0.008543022908270359}, {"id": 420, "seek": 289740, "start": 2903.64, "end": 2910.76, "text": " or I have a variable that can contain any object. However, at the moment, I don't have that value.", "tokens": [50676, 420, 286, 362, 257, 7006, 300, 393, 5304, 604, 2657, 13, 2908, 11, 412, 264, 1623, 11, 286, 500, 380, 362, 300, 2158, 13, 51032], "temperature": 0.0, "avg_logprob": -0.07594027317745584, "compression_ratio": 1.7672955974842768, "no_speech_prob": 0.008543022908270359}, {"id": 421, "seek": 289740, "start": 2910.76, "end": 2918.44, "text": " So you will just tell Dart that this variable that I have right now can either contain a valid", "tokens": [51032, 407, 291, 486, 445, 980, 30271, 300, 341, 7006, 300, 286, 362, 558, 586, 393, 2139, 5304, 257, 7363, 51416], "temperature": 0.0, "avg_logprob": -0.07594027317745584, "compression_ratio": 1.7672955974842768, "no_speech_prob": 0.008543022908270359}, {"id": 422, "seek": 291844, "start": 2918.52, "end": 2927.7200000000003, "text": " value of type object or of type string or integer, or it can sometimes also during its lifetime", "tokens": [50368, 2158, 295, 2010, 2657, 420, 295, 2010, 6798, 420, 24922, 11, 420, 309, 393, 2171, 611, 1830, 1080, 11364, 50828], "temperature": 0.0, "avg_logprob": -0.1244991786444365, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.10918353497982025}, {"id": 423, "seek": 291844, "start": 2928.92, "end": 2936.44, "text": " contain nothing. And this nothingness is the concept that is known as null.", "tokens": [50888, 5304, 1825, 13, 400, 341, 1825, 1287, 307, 264, 3410, 300, 307, 2570, 382, 18184, 13, 51264], "temperature": 0.0, "avg_logprob": -0.1244991786444365, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.10918353497982025}, {"id": 424, "seek": 291844, "start": 2938.36, "end": 2946.36, "text": " So it's null in Dart is a keyword. It means that it's a word that you can just write in your", "tokens": [51360, 407, 309, 311, 18184, 294, 30271, 307, 257, 20428, 13, 467, 1355, 300, 309, 311, 257, 1349, 300, 291, 393, 445, 2464, 294, 428, 51760], "temperature": 0.0, "avg_logprob": -0.1244991786444365, "compression_ratio": 1.5714285714285714, "no_speech_prob": 0.10918353497982025}, {"id": 425, "seek": 294636, "start": 2946.36, "end": 2951.7200000000003, "text": " text editor as you're writing your code. And you say that a variable's value is equal to null.", "tokens": [50364, 2487, 9839, 382, 291, 434, 3579, 428, 3089, 13, 400, 291, 584, 300, 257, 7006, 311, 2158, 307, 2681, 281, 18184, 13, 50632], "temperature": 0.0, "avg_logprob": -0.07925010464855076, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.0006501837051473558}, {"id": 426, "seek": 294636, "start": 2952.6, "end": 2957.08, "text": " And this tells Dart that, well, okay, this variable at the moment doesn't contain any values.", "tokens": [50676, 400, 341, 5112, 30271, 300, 11, 731, 11, 1392, 11, 341, 7006, 412, 264, 1623, 1177, 380, 5304, 604, 4190, 13, 50900], "temperature": 0.0, "avg_logprob": -0.07925010464855076, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.0006501837051473558}, {"id": 427, "seek": 294636, "start": 2957.08, "end": 2964.76, "text": " So null is not really a value, but it's actually the absence of a value. You should think of it", "tokens": [50900, 407, 18184, 307, 406, 534, 257, 2158, 11, 457, 309, 311, 767, 264, 17145, 295, 257, 2158, 13, 509, 820, 519, 295, 309, 51284], "temperature": 0.0, "avg_logprob": -0.07925010464855076, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.0006501837051473558}, {"id": 428, "seek": 294636, "start": 2964.76, "end": 2973.8, "text": " that way. So let's have a look at this. There's a little bit of a documentation here.", "tokens": [51284, 300, 636, 13, 407, 718, 311, 362, 257, 574, 412, 341, 13, 821, 311, 257, 707, 857, 295, 257, 14333, 510, 13, 51736], "temperature": 0.0, "avg_logprob": -0.07925010464855076, "compression_ratio": 1.6371681415929205, "no_speech_prob": 0.0006501837051473558}, {"id": 429, "seek": 297636, "start": 2977.1600000000003, "end": 2981.7200000000003, "text": " On Dart's website, Dart dev null safety. So I'm just going to click on it. You're not going to", "tokens": [50404, 1282, 30271, 311, 3144, 11, 30271, 1905, 18184, 4514, 13, 407, 286, 478, 445, 516, 281, 2052, 322, 309, 13, 509, 434, 406, 516, 281, 50632], "temperature": 0.0, "avg_logprob": -0.11956290455607625, "compression_ratio": 1.6416184971098267, "no_speech_prob": 0.025171084329485893}, {"id": 430, "seek": 297636, "start": 2981.7200000000003, "end": 2989.32, "text": " see my screen at the moment. I'm just bringing it up in a browser, a browser window. I'm going to", "tokens": [50632, 536, 452, 2568, 412, 264, 1623, 13, 286, 478, 445, 5062, 309, 493, 294, 257, 11185, 11, 257, 11185, 4910, 13, 286, 478, 516, 281, 51012], "temperature": 0.0, "avg_logprob": -0.11956290455607625, "compression_ratio": 1.6416184971098267, "no_speech_prob": 0.025171084329485893}, {"id": 431, "seek": 297636, "start": 2989.32, "end": 2996.92, "text": " bring it on the screen and increase the size a little bit and also change the sizing on the", "tokens": [51012, 1565, 309, 322, 264, 2568, 293, 3488, 264, 2744, 257, 707, 857, 293, 611, 1319, 264, 45435, 322, 264, 51392], "temperature": 0.0, "avg_logprob": -0.11956290455607625, "compression_ratio": 1.6416184971098267, "no_speech_prob": 0.025171084329485893}, {"id": 432, "seek": 299692, "start": 2997.2400000000002, "end": 3001.7200000000003, "text": " the window as well. So you can see the contents in its entirety.", "tokens": [50380, 264, 4910, 382, 731, 13, 407, 291, 393, 536, 264, 15768, 294, 1080, 31557, 13, 50604], "temperature": 0.0, "avg_logprob": -0.14534141316133387, "compression_ratio": 1.7577319587628866, "no_speech_prob": 0.03820694610476494}, {"id": 433, "seek": 299692, "start": 3003.64, "end": 3010.28, "text": " So as you can see in Dart, it's called sound null safety. And there's documentation about", "tokens": [50700, 407, 382, 291, 393, 536, 294, 30271, 11, 309, 311, 1219, 1626, 18184, 4514, 13, 400, 456, 311, 14333, 466, 51032], "temperature": 0.0, "avg_logprob": -0.14534141316133387, "compression_ratio": 1.7577319587628866, "no_speech_prob": 0.03820694610476494}, {"id": 434, "seek": 299692, "start": 3010.28, "end": 3019.4, "text": " what this actually means. We're going to look at what null safety actually means in Dart. And", "tokens": [51032, 437, 341, 767, 1355, 13, 492, 434, 516, 281, 574, 412, 437, 18184, 4514, 767, 1355, 294, 30271, 13, 400, 51488], "temperature": 0.0, "avg_logprob": -0.14534141316133387, "compression_ratio": 1.7577319587628866, "no_speech_prob": 0.03820694610476494}, {"id": 435, "seek": 299692, "start": 3019.4, "end": 3023.56, "text": " I'm going to give you a lot of examples of what that actually practically means. And there's", "tokens": [51488, 286, 478, 516, 281, 976, 291, 257, 688, 295, 5110, 295, 437, 300, 767, 15667, 1355, 13, 400, 456, 311, 51696], "temperature": 0.0, "avg_logprob": -0.14534141316133387, "compression_ratio": 1.7577319587628866, "no_speech_prob": 0.03820694610476494}, {"id": 436, "seek": 302356, "start": 3023.56, "end": 3030.7599999999998, "text": " documentation here in Dart's website simply because Dart, in its older versions, not in its", "tokens": [50364, 14333, 510, 294, 30271, 311, 3144, 2935, 570, 30271, 11, 294, 1080, 4906, 9606, 11, 406, 294, 1080, 50724], "temperature": 0.0, "avg_logprob": -0.08731934332078503, "compression_ratio": 1.6382978723404256, "no_speech_prob": 0.02119835652410984}, {"id": 437, "seek": 302356, "start": 3030.7599999999998, "end": 3036.68, "text": " current versions, in its older versions, it didn't support null safety. So there was a lot of code", "tokens": [50724, 2190, 9606, 11, 294, 1080, 4906, 9606, 11, 309, 994, 380, 1406, 18184, 4514, 13, 407, 456, 390, 257, 688, 295, 3089, 51020], "temperature": 0.0, "avg_logprob": -0.08731934332078503, "compression_ratio": 1.6382978723404256, "no_speech_prob": 0.02119835652410984}, {"id": 438, "seek": 302356, "start": 3036.68, "end": 3044.12, "text": " written manually by programmers in order to, for instance, check whether a value is absent in a", "tokens": [51020, 3720, 16945, 538, 41504, 294, 1668, 281, 11, 337, 5197, 11, 1520, 1968, 257, 2158, 307, 25185, 294, 257, 51392], "temperature": 0.0, "avg_logprob": -0.08731934332078503, "compression_ratio": 1.6382978723404256, "no_speech_prob": 0.02119835652410984}, {"id": 439, "seek": 302356, "start": 3044.12, "end": 3050.68, "text": " variable. And then there is, as you can see here, it says migrating an existing package or app. So", "tokens": [51392, 7006, 13, 400, 550, 456, 307, 11, 382, 291, 393, 536, 510, 11, 309, 1619, 6186, 8754, 364, 6741, 7372, 420, 724, 13, 407, 51720], "temperature": 0.0, "avg_logprob": -0.08731934332078503, "compression_ratio": 1.6382978723404256, "no_speech_prob": 0.02119835652410984}, {"id": 440, "seek": 305068, "start": 3050.68, "end": 3055.72, "text": " there is documentation written by the Dart team in order to help developers understand how they", "tokens": [50364, 456, 307, 14333, 3720, 538, 264, 30271, 1469, 294, 1668, 281, 854, 8849, 1223, 577, 436, 50616], "temperature": 0.0, "avg_logprob": -0.0701497749046043, "compression_ratio": 1.8212927756653992, "no_speech_prob": 0.026389917358756065}, {"id": 441, "seek": 305068, "start": 3055.72, "end": 3062.6, "text": " can move their old code to the new code that supports null safety. However, if you're following", "tokens": [50616, 393, 1286, 641, 1331, 3089, 281, 264, 777, 3089, 300, 9346, 18184, 4514, 13, 2908, 11, 498, 291, 434, 3480, 50960], "temperature": 0.0, "avg_logprob": -0.0701497749046043, "compression_ratio": 1.8212927756653992, "no_speech_prob": 0.026389917358756065}, {"id": 442, "seek": 305068, "start": 3062.6, "end": 3070.04, "text": " along with this course, it's like you're basically just following chronologically from chapter one", "tokens": [50960, 2051, 365, 341, 1164, 11, 309, 311, 411, 291, 434, 1936, 445, 3480, 19393, 17157, 490, 7187, 472, 51332], "temperature": 0.0, "avg_logprob": -0.0701497749046043, "compression_ratio": 1.8212927756653992, "no_speech_prob": 0.026389917358756065}, {"id": 443, "seek": 305068, "start": 3070.04, "end": 3073.24, "text": " to all the other chapters. I don't know how many chapters we're going to have, but if you're", "tokens": [51332, 281, 439, 264, 661, 20013, 13, 286, 500, 380, 458, 577, 867, 20013, 321, 434, 516, 281, 362, 11, 457, 498, 291, 434, 51492], "temperature": 0.0, "avg_logprob": -0.0701497749046043, "compression_ratio": 1.8212927756653992, "no_speech_prob": 0.026389917358756065}, {"id": 444, "seek": 305068, "start": 3073.24, "end": 3076.8399999999997, "text": " following along with this course, you don't have to think about migrating because the code that", "tokens": [51492, 3480, 2051, 365, 341, 1164, 11, 291, 500, 380, 362, 281, 519, 466, 6186, 8754, 570, 264, 3089, 300, 51672], "temperature": 0.0, "avg_logprob": -0.0701497749046043, "compression_ratio": 1.8212927756653992, "no_speech_prob": 0.026389917358756065}, {"id": 445, "seek": 307684, "start": 3076.84, "end": 3080.84, "text": " we're writing in this entire course is going to be null safe, meaning that we're going to take", "tokens": [50364, 321, 434, 3579, 294, 341, 2302, 1164, 307, 516, 281, 312, 18184, 3273, 11, 3620, 300, 321, 434, 516, 281, 747, 50564], "temperature": 0.0, "avg_logprob": -0.07768291177101505, "compression_ratio": 1.7479674796747968, "no_speech_prob": 0.006998567376285791}, {"id": 446, "seek": 307684, "start": 3080.84, "end": 3087.2400000000002, "text": " advantage of Dart's null safety operators and meaning that we are not going to manually check", "tokens": [50564, 5002, 295, 30271, 311, 18184, 4514, 19077, 293, 3620, 300, 321, 366, 406, 516, 281, 16945, 1520, 50884], "temperature": 0.0, "avg_logprob": -0.07768291177101505, "compression_ratio": 1.7479674796747968, "no_speech_prob": 0.006998567376285791}, {"id": 447, "seek": 307684, "start": 3087.2400000000002, "end": 3092.2000000000003, "text": " for values being null and then doing some branches of code, whether they're null or not.", "tokens": [50884, 337, 4190, 885, 18184, 293, 550, 884, 512, 14770, 295, 3089, 11, 1968, 436, 434, 18184, 420, 406, 13, 51132], "temperature": 0.0, "avg_logprob": -0.07768291177101505, "compression_ratio": 1.7479674796747968, "no_speech_prob": 0.006998567376285791}, {"id": 448, "seek": 307684, "start": 3093.56, "end": 3097.08, "text": " So what I mean is that if you read the documentation for sound null safety,", "tokens": [51200, 407, 437, 286, 914, 307, 300, 498, 291, 1401, 264, 14333, 337, 1626, 18184, 4514, 11, 51376], "temperature": 0.0, "avg_logprob": -0.07768291177101505, "compression_ratio": 1.7479674796747968, "no_speech_prob": 0.006998567376285791}, {"id": 449, "seek": 307684, "start": 3097.08, "end": 3100.28, "text": " you don't have to worry about the migration parts. Just read the rest. Okay.", "tokens": [51376, 291, 500, 380, 362, 281, 3292, 466, 264, 17011, 3166, 13, 1449, 1401, 264, 1472, 13, 1033, 13, 51536], "temperature": 0.0, "avg_logprob": -0.07768291177101505, "compression_ratio": 1.7479674796747968, "no_speech_prob": 0.006998567376285791}, {"id": 450, "seek": 310028, "start": 3100.28, "end": 3107.2400000000002, "text": " So with that out the way, I'm just going to make sure that I tick that in my notes here. That's why", "tokens": [50364, 407, 365, 300, 484, 264, 636, 11, 286, 478, 445, 516, 281, 652, 988, 300, 286, 5204, 300, 294, 452, 5570, 510, 13, 663, 311, 983, 50712], "temperature": 0.0, "avg_logprob": -0.16553931969862717, "compression_ratio": 1.7161572052401746, "no_speech_prob": 0.0061174784786999226}, {"id": 451, "seek": 310028, "start": 3107.2400000000002, "end": 3113.5600000000004, "text": " I'm looking in this direction because I have all my notes here. Let's close this window and bring", "tokens": [50712, 286, 478, 1237, 294, 341, 3513, 570, 286, 362, 439, 452, 5570, 510, 13, 961, 311, 1998, 341, 4910, 293, 1565, 51028], "temperature": 0.0, "avg_logprob": -0.16553931969862717, "compression_ratio": 1.7161572052401746, "no_speech_prob": 0.0061174784786999226}, {"id": 452, "seek": 310028, "start": 3113.5600000000004, "end": 3120.44, "text": " up our Visual Studio Code window that we had from earlier. I'm going to put it here, and I'm just", "tokens": [51028, 493, 527, 23187, 13500, 15549, 4910, 300, 321, 632, 490, 3071, 13, 286, 478, 516, 281, 829, 309, 510, 11, 293, 286, 478, 445, 51372], "temperature": 0.0, "avg_logprob": -0.16553931969862717, "compression_ratio": 1.7161572052401746, "no_speech_prob": 0.0061174784786999226}, {"id": 453, "seek": 310028, "start": 3120.44, "end": 3127.4, "text": " going to ensure that it is of the correct height as well. So you're going to see the window in it", "tokens": [51372, 516, 281, 5586, 300, 309, 307, 295, 264, 3006, 6681, 382, 731, 13, 407, 291, 434, 516, 281, 536, 264, 4910, 294, 309, 51720], "temperature": 0.0, "avg_logprob": -0.16553931969862717, "compression_ratio": 1.7161572052401746, "no_speech_prob": 0.0061174784786999226}, {"id": 454, "seek": 312740, "start": 3127.4, "end": 3131.7200000000003, "text": " height as well. So you're going to see the window in its entirety. Okay.", "tokens": [50364, 6681, 382, 731, 13, 407, 291, 434, 516, 281, 536, 264, 4910, 294, 1080, 31557, 13, 1033, 13, 50580], "temperature": 0.0, "avg_logprob": -0.11327019444218388, "compression_ratio": 1.6926070038910506, "no_speech_prob": 0.0037240672390908003}, {"id": 455, "seek": 312740, "start": 3133.56, "end": 3139.56, "text": " So now that we talked about what null values are and that there are the absence of a value,", "tokens": [50672, 407, 586, 300, 321, 2825, 466, 437, 18184, 4190, 366, 293, 300, 456, 366, 264, 17145, 295, 257, 2158, 11, 50972], "temperature": 0.0, "avg_logprob": -0.11327019444218388, "compression_ratio": 1.6926070038910506, "no_speech_prob": 0.0037240672390908003}, {"id": 456, "seek": 312740, "start": 3139.56, "end": 3146.84, "text": " let's have a look at making any type nullable. And if you follow along with the course up to", "tokens": [50972, 718, 311, 362, 257, 574, 412, 1455, 604, 2010, 18184, 712, 13, 400, 498, 291, 1524, 2051, 365, 264, 1164, 493, 281, 51336], "temperature": 0.0, "avg_logprob": -0.11327019444218388, "compression_ratio": 1.6926070038910506, "no_speech_prob": 0.0037240672390908003}, {"id": 457, "seek": 312740, "start": 3146.84, "end": 3150.44, "text": " this point, you should have some sort of a simulator or an emulator running, and then you", "tokens": [51336, 341, 935, 11, 291, 820, 362, 512, 1333, 295, 257, 32974, 420, 364, 846, 16381, 2614, 11, 293, 550, 291, 51516], "temperature": 0.0, "avg_logprob": -0.11327019444218388, "compression_ratio": 1.6926070038910506, "no_speech_prob": 0.0037240672390908003}, {"id": 458, "seek": 312740, "start": 3150.44, "end": 3155.88, "text": " should have done command shift P or control shift P depending on your operating system,", "tokens": [51516, 820, 362, 1096, 5622, 5513, 430, 420, 1969, 5513, 430, 5413, 322, 428, 7447, 1185, 11, 51788], "temperature": 0.0, "avg_logprob": -0.11327019444218388, "compression_ratio": 1.6926070038910506, "no_speech_prob": 0.0037240672390908003}, {"id": 459, "seek": 315588, "start": 3155.88, "end": 3163.88, "text": " command shift P in Mac and control shift P in Linux and Windows in order to bring up this menu.", "tokens": [50364, 5622, 5513, 430, 294, 5707, 293, 1969, 5513, 430, 294, 18734, 293, 8591, 294, 1668, 281, 1565, 493, 341, 6510, 13, 50764], "temperature": 0.0, "avg_logprob": -0.08106205827098782, "compression_ratio": 1.7282608695652173, "no_speech_prob": 0.0009431198122911155}, {"id": 460, "seek": 315588, "start": 3163.88, "end": 3167.56, "text": " And then you can just type Flutter, select device, and then you just select the device that you want", "tokens": [50764, 400, 550, 291, 393, 445, 2010, 3235, 9947, 11, 3048, 4302, 11, 293, 550, 291, 445, 3048, 264, 4302, 300, 291, 528, 50948], "temperature": 0.0, "avg_logprob": -0.08106205827098782, "compression_ratio": 1.7282608695652173, "no_speech_prob": 0.0009431198122911155}, {"id": 461, "seek": 315588, "start": 3167.56, "end": 3171.48, "text": " to run the code on. So I'm kind of assuming that you've already done that and that your code is", "tokens": [50948, 281, 1190, 264, 3089, 322, 13, 407, 286, 478, 733, 295, 11926, 300, 291, 600, 1217, 1096, 300, 293, 300, 428, 3089, 307, 51144], "temperature": 0.0, "avg_logprob": -0.08106205827098782, "compression_ratio": 1.7282608695652173, "no_speech_prob": 0.0009431198122911155}, {"id": 462, "seek": 315588, "start": 3171.48, "end": 3175.96, "text": " running. And this is something that we talked about in earlier chapters. So we're not going", "tokens": [51144, 2614, 13, 400, 341, 307, 746, 300, 321, 2825, 466, 294, 3071, 20013, 13, 407, 321, 434, 406, 516, 51368], "temperature": 0.0, "avg_logprob": -0.08106205827098782, "compression_ratio": 1.7282608695652173, "no_speech_prob": 0.0009431198122911155}, {"id": 463, "seek": 315588, "start": 3175.96, "end": 3183.08, "text": " to go through that again. So I have an iPhone simulator, which you cannot see on the screen,", "tokens": [51368, 281, 352, 807, 300, 797, 13, 407, 286, 362, 364, 7252, 32974, 11, 597, 291, 2644, 536, 322, 264, 2568, 11, 51724], "temperature": 0.0, "avg_logprob": -0.08106205827098782, "compression_ratio": 1.7282608695652173, "no_speech_prob": 0.0009431198122911155}, {"id": 464, "seek": 318308, "start": 3183.08, "end": 3187.7999999999997, "text": " but I have it running in a separate screen just because we don't have enough real estate. I can", "tokens": [50364, 457, 286, 362, 309, 2614, 294, 257, 4994, 2568, 445, 570, 321, 500, 380, 362, 1547, 957, 9749, 13, 286, 393, 50600], "temperature": 0.0, "avg_logprob": -0.054170449574788414, "compression_ratio": 1.6623931623931625, "no_speech_prob": 0.002757348818704486}, {"id": 465, "seek": 318308, "start": 3187.7999999999997, "end": 3191.7999999999997, "text": " bring it up to this window, but it will just take a lot of space. So I'm going to bring it up to", "tokens": [50600, 1565, 309, 493, 281, 341, 4910, 11, 457, 309, 486, 445, 747, 257, 688, 295, 1901, 13, 407, 286, 478, 516, 281, 1565, 309, 493, 281, 50800], "temperature": 0.0, "avg_logprob": -0.054170449574788414, "compression_ratio": 1.6623931623931625, "no_speech_prob": 0.002757348818704486}, {"id": 466, "seek": 318308, "start": 3191.7999999999997, "end": 3197.3199999999997, "text": " another monitor so you don't see it. So this code at the moment is running live. So if I press command", "tokens": [50800, 1071, 6002, 370, 291, 500, 380, 536, 309, 13, 407, 341, 3089, 412, 264, 1623, 307, 2614, 1621, 13, 407, 498, 286, 1886, 5622, 51076], "temperature": 0.0, "avg_logprob": -0.054170449574788414, "compression_ratio": 1.6623931623931625, "no_speech_prob": 0.002757348818704486}, {"id": 467, "seek": 318308, "start": 3197.3199999999997, "end": 3206.2, "text": " S, then it's going to run and just print the output for us. Okay. Now let's talk about making", "tokens": [51076, 318, 11, 550, 309, 311, 516, 281, 1190, 293, 445, 4482, 264, 5598, 337, 505, 13, 1033, 13, 823, 718, 311, 751, 466, 1455, 51520], "temperature": 0.0, "avg_logprob": -0.054170449574788414, "compression_ratio": 1.6623931623931625, "no_speech_prob": 0.002757348818704486}, {"id": 468, "seek": 320620, "start": 3206.2, "end": 3215.56, "text": " any type nullable. And there is a way to do that. Let's have a look here. We talked about that null", "tokens": [50364, 604, 2010, 18184, 712, 13, 400, 456, 307, 257, 636, 281, 360, 300, 13, 961, 311, 362, 257, 574, 510, 13, 492, 2825, 466, 300, 18184, 50832], "temperature": 0.0, "avg_logprob": -0.1328116243535822, "compression_ratio": 1.6351931330472103, "no_speech_prob": 0.17019766569137573}, {"id": 469, "seek": 320620, "start": 3215.56, "end": 3220.3599999999997, "text": " is a keyword, and that's why you can see it is highlighted here in a different color.", "tokens": [50832, 307, 257, 20428, 11, 293, 300, 311, 983, 291, 393, 536, 309, 307, 17173, 510, 294, 257, 819, 2017, 13, 51072], "temperature": 0.0, "avg_logprob": -0.1328116243535822, "compression_ratio": 1.6351931330472103, "no_speech_prob": 0.17019766569137573}, {"id": 470, "seek": 320620, "start": 3220.9199999999996, "end": 3228.68, "text": " So if you, for instance, say final name is foo, as you can see, it says, okay, I accept this as", "tokens": [51100, 407, 498, 291, 11, 337, 5197, 11, 584, 2572, 1315, 307, 726, 78, 11, 382, 291, 393, 536, 11, 309, 1619, 11, 1392, 11, 286, 3241, 341, 382, 51488], "temperature": 0.0, "avg_logprob": -0.1328116243535822, "compression_ratio": 1.6351931330472103, "no_speech_prob": 0.17019766569137573}, {"id": 471, "seek": 320620, "start": 3228.68, "end": 3235.0, "text": " name is foo. But you can't just say name like it's a null because then it doesn't understand. Is it", "tokens": [51488, 1315, 307, 726, 78, 13, 583, 291, 393, 380, 445, 584, 1315, 411, 309, 311, 257, 18184, 570, 550, 309, 1177, 380, 1223, 13, 1119, 309, 51804], "temperature": 0.0, "avg_logprob": -0.1328116243535822, "compression_ratio": 1.6351931330472103, "no_speech_prob": 0.17019766569137573}, {"id": 472, "seek": 323500, "start": 3235.0, "end": 3241.24, "text": " an object? Is it a string? Is it an integer? And if you type here name, then you see it's just", "tokens": [50364, 364, 2657, 30, 1119, 309, 257, 6798, 30, 1119, 309, 364, 24922, 30, 400, 498, 291, 2010, 510, 1315, 11, 550, 291, 536, 309, 311, 445, 50676], "temperature": 0.0, "avg_logprob": -0.11697637420339682, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.0003406317555345595}, {"id": 473, "seek": 323500, "start": 3241.24, "end": 3247.4, "text": " dynamic. It doesn't understand the type. And we'll talk about dynamic a little bit later.", "tokens": [50676, 8546, 13, 467, 1177, 380, 1223, 264, 2010, 13, 400, 321, 603, 751, 466, 8546, 257, 707, 857, 1780, 13, 50984], "temperature": 0.0, "avg_logprob": -0.11697637420339682, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.0003406317555345595}, {"id": 474, "seek": 323500, "start": 3248.12, "end": 3253.96, "text": " But what you can do is to actually specify that, okay, I want a string data type that", "tokens": [51020, 583, 437, 291, 393, 360, 307, 281, 767, 16500, 300, 11, 1392, 11, 286, 528, 257, 6798, 1412, 2010, 300, 51312], "temperature": 0.0, "avg_logprob": -0.11697637420339682, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.0003406317555345595}, {"id": 475, "seek": 323500, "start": 3254.52, "end": 3260.68, "text": " it can contain normal names or strings as we call it, like series of characters, or it can sometimes", "tokens": [51340, 309, 393, 5304, 2710, 5288, 420, 13985, 382, 321, 818, 309, 11, 411, 2638, 295, 4342, 11, 420, 309, 393, 2171, 51648], "temperature": 0.0, "avg_logprob": -0.11697637420339682, "compression_ratio": 1.6271929824561404, "no_speech_prob": 0.0003406317555345595}, {"id": 476, "seek": 326068, "start": 3260.68, "end": 3266.6, "text": " be null. And in that case, you have to actually specify the data type as not just string,", "tokens": [50364, 312, 18184, 13, 400, 294, 300, 1389, 11, 291, 362, 281, 767, 16500, 264, 1412, 2010, 382, 406, 445, 6798, 11, 50660], "temperature": 0.0, "avg_logprob": -0.1297871631124745, "compression_ratio": 1.808, "no_speech_prob": 0.029028747230768204}, {"id": 477, "seek": 326068, "start": 3267.3199999999997, "end": 3272.68, "text": " not just this, because you'll see, you'll get an error. And we'll actually get a suggestion. It", "tokens": [50696, 406, 445, 341, 11, 570, 291, 603, 536, 11, 291, 603, 483, 364, 6713, 13, 400, 321, 603, 767, 483, 257, 16541, 13, 467, 50964], "temperature": 0.0, "avg_logprob": -0.1297871631124745, "compression_ratio": 1.808, "no_speech_prob": 0.029028747230768204}, {"id": 478, "seek": 326068, "start": 3272.68, "end": 3277.48, "text": " says, try changing the type of the variable or casting the right-hand type to string.", "tokens": [50964, 1619, 11, 853, 4473, 264, 2010, 295, 264, 7006, 420, 17301, 264, 558, 12, 5543, 2010, 281, 6798, 13, 51204], "temperature": 0.0, "avg_logprob": -0.1297871631124745, "compression_ratio": 1.808, "no_speech_prob": 0.029028747230768204}, {"id": 479, "seek": 326068, "start": 3278.3599999999997, "end": 3283.16, "text": " But we're not going to do that. That wasn't such a, it wasn't such a useful suggestion because", "tokens": [51248, 583, 321, 434, 406, 516, 281, 360, 300, 13, 663, 2067, 380, 1270, 257, 11, 309, 2067, 380, 1270, 257, 4420, 16541, 570, 51488], "temperature": 0.0, "avg_logprob": -0.1297871631124745, "compression_ratio": 1.808, "no_speech_prob": 0.029028747230768204}, {"id": 480, "seek": 326068, "start": 3283.16, "end": 3288.7599999999998, "text": " what you want here is to actually make Dart understand that this variable right here,", "tokens": [51488, 437, 291, 528, 510, 307, 281, 767, 652, 30271, 1223, 300, 341, 7006, 558, 510, 11, 51768], "temperature": 0.0, "avg_logprob": -0.1297871631124745, "compression_ratio": 1.808, "no_speech_prob": 0.029028747230768204}, {"id": 481, "seek": 328876, "start": 3288.76, "end": 3295.0, "text": " or this constant right here can sometimes contain the value of null. And the way to do that is you", "tokens": [50364, 420, 341, 5754, 558, 510, 393, 2171, 5304, 264, 2158, 295, 18184, 13, 400, 264, 636, 281, 360, 300, 307, 291, 50676], "temperature": 0.0, "avg_logprob": -0.08622794455670296, "compression_ratio": 1.6081081081081081, "no_speech_prob": 7.21119504305534e-05}, {"id": 482, "seek": 328876, "start": 3295.8, "end": 3303.1600000000003, "text": " put the suffix after your data type as a question mark. So this is the syntax,", "tokens": [50716, 829, 264, 3889, 970, 934, 428, 1412, 2010, 382, 257, 1168, 1491, 13, 407, 341, 307, 264, 28431, 11, 51084], "temperature": 0.0, "avg_logprob": -0.08622794455670296, "compression_ratio": 1.6081081081081081, "no_speech_prob": 7.21119504305534e-05}, {"id": 483, "seek": 328876, "start": 3303.1600000000003, "end": 3307.32, "text": " which is actually using some other languages as well. It's used in Swift as well.", "tokens": [51084, 597, 307, 767, 1228, 512, 661, 8650, 382, 731, 13, 467, 311, 1143, 294, 25539, 382, 731, 13, 51292], "temperature": 0.0, "avg_logprob": -0.08622794455670296, "compression_ratio": 1.6081081081081081, "no_speech_prob": 7.21119504305534e-05}, {"id": 484, "seek": 328876, "start": 3308.6000000000004, "end": 3315.0800000000004, "text": " So this tells Dart that, well, here, if we make it actually a variable, as you can see, or sorry,", "tokens": [51356, 407, 341, 5112, 30271, 300, 11, 731, 11, 510, 11, 498, 321, 652, 309, 767, 257, 7006, 11, 382, 291, 393, 536, 11, 420, 2597, 11, 51680], "temperature": 0.0, "avg_logprob": -0.08622794455670296, "compression_ratio": 1.6081081081081081, "no_speech_prob": 7.21119504305534e-05}, {"id": 485, "seek": 331508, "start": 3316.04, "end": 3322.84, "text": " like this. So you say, I have a variable. It's a string, but sometimes it may,", "tokens": [50412, 411, 341, 13, 407, 291, 584, 11, 286, 362, 257, 7006, 13, 467, 311, 257, 6798, 11, 457, 2171, 309, 815, 11, 50752], "temperature": 0.0, "avg_logprob": -0.11668822704217373, "compression_ratio": 1.5705521472392638, "no_speech_prob": 0.002326007466763258}, {"id": 486, "seek": 331508, "start": 3322.84, "end": 3329.96, "text": " the string value may be absent. And then you'll just say, okay, now name is foo.", "tokens": [50752, 264, 6798, 2158, 815, 312, 25185, 13, 400, 550, 291, 603, 445, 584, 11, 1392, 11, 586, 1315, 307, 726, 78, 13, 51108], "temperature": 0.0, "avg_logprob": -0.11668822704217373, "compression_ratio": 1.5705521472392638, "no_speech_prob": 0.002326007466763258}, {"id": 487, "seek": 331508, "start": 3330.84, "end": 3336.68, "text": " And you can say now name is null. So this is kind of like resetting out names. So if I just say,", "tokens": [51152, 400, 291, 393, 584, 586, 1315, 307, 18184, 13, 407, 341, 307, 733, 295, 411, 14322, 783, 484, 5288, 13, 407, 498, 286, 445, 584, 11, 51444], "temperature": 0.0, "avg_logprob": -0.11668822704217373, "compression_ratio": 1.5705521472392638, "no_speech_prob": 0.002326007466763258}, {"id": 488, "seek": 333668, "start": 3336.68, "end": 3343.3999999999996, "text": " okay, print name. And then after foo, I say print name. Okay. So let's just", "tokens": [50364, 1392, 11, 4482, 1315, 13, 400, 550, 934, 726, 78, 11, 286, 584, 4482, 1315, 13, 1033, 13, 407, 718, 311, 445, 50700], "temperature": 0.0, "avg_logprob": -0.08559616244569117, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.000721814576536417}, {"id": 489, "seek": 333668, "start": 3344.04, "end": 3348.12, "text": " clear the console and just run this application. You can see the first time it says it's null.", "tokens": [50732, 1850, 264, 11076, 293, 445, 1190, 341, 3861, 13, 509, 393, 536, 264, 700, 565, 309, 1619, 309, 311, 18184, 13, 50936], "temperature": 0.0, "avg_logprob": -0.08559616244569117, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.000721814576536417}, {"id": 490, "seek": 333668, "start": 3348.9199999999996, "end": 3356.2, "text": " And then the second time around it says it is foo. So this is how you tell Dart that you", "tokens": [50976, 400, 550, 264, 1150, 565, 926, 309, 1619, 309, 307, 726, 78, 13, 407, 341, 307, 577, 291, 980, 30271, 300, 291, 51340], "temperature": 0.0, "avg_logprob": -0.08559616244569117, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.000721814576536417}, {"id": 491, "seek": 333668, "start": 3356.2, "end": 3362.44, "text": " want to have nullable data type. And you can do this with pretty much all data types. So you can", "tokens": [51340, 528, 281, 362, 18184, 712, 1412, 2010, 13, 400, 291, 393, 360, 341, 365, 1238, 709, 439, 1412, 3467, 13, 407, 291, 393, 51652], "temperature": 0.0, "avg_logprob": -0.08559616244569117, "compression_ratio": 1.6635514018691588, "no_speech_prob": 0.000721814576536417}, {"id": 492, "seek": 336244, "start": 3362.44, "end": 3369.64, "text": " just say, okay, I have an integer of age, and that's 20. But you can see you cannot now assign", "tokens": [50364, 445, 584, 11, 1392, 11, 286, 362, 364, 24922, 295, 3205, 11, 293, 300, 311, 945, 13, 583, 291, 393, 536, 291, 2644, 586, 6269, 50724], "temperature": 0.0, "avg_logprob": -0.09219191936736411, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.013228134252130985}, {"id": 493, "seek": 336244, "start": 3369.64, "end": 3374.04, "text": " the value of null to integer because it's not nullable. But as soon as you make it nullable,", "tokens": [50724, 264, 2158, 295, 18184, 281, 24922, 570, 309, 311, 406, 18184, 712, 13, 583, 382, 2321, 382, 291, 652, 309, 18184, 712, 11, 50944], "temperature": 0.0, "avg_logprob": -0.09219191936736411, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.013228134252130985}, {"id": 494, "seek": 336244, "start": 3374.04, "end": 3383.8, "text": " then that is accepted. And of course, you can do different operations using, for instance,", "tokens": [50944, 550, 300, 307, 9035, 13, 400, 295, 1164, 11, 291, 393, 360, 819, 7705, 1228, 11, 337, 5197, 11, 51432], "temperature": 0.0, "avg_logprob": -0.09219191936736411, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.013228134252130985}, {"id": 495, "seek": 336244, "start": 3383.8, "end": 3387.48, "text": " in the previous chapter, I believe, we talked about control statements if and else.", "tokens": [51432, 294, 264, 3894, 7187, 11, 286, 1697, 11, 321, 2825, 466, 1969, 12363, 498, 293, 1646, 13, 51616], "temperature": 0.0, "avg_logprob": -0.09219191936736411, "compression_ratio": 1.6017699115044248, "no_speech_prob": 0.013228134252130985}, {"id": 496, "seek": 338748, "start": 3388.12, "end": 3395.32, "text": " So you can say, for instance, if age is 20, and then you can execute some code,", "tokens": [50396, 407, 291, 393, 584, 11, 337, 5197, 11, 498, 3205, 307, 945, 11, 293, 550, 291, 393, 14483, 512, 3089, 11, 50756], "temperature": 0.0, "avg_logprob": -0.09195067665793678, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.06569746881723404}, {"id": 497, "seek": 338748, "start": 3395.32, "end": 3402.36, "text": " or you can say if age is null, execute some code. So they work as you would expect. So", "tokens": [50756, 420, 291, 393, 584, 498, 3205, 307, 18184, 11, 14483, 512, 3089, 13, 407, 436, 589, 382, 291, 576, 2066, 13, 407, 51108], "temperature": 0.0, "avg_logprob": -0.09195067665793678, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.06569746881723404}, {"id": 498, "seek": 338748, "start": 3402.36, "end": 3410.6, "text": " there is no difference really. And I mean, if you think about that nullability is just like a", "tokens": [51108, 456, 307, 572, 2649, 534, 13, 400, 286, 914, 11, 498, 291, 519, 466, 300, 18184, 2310, 307, 445, 411, 257, 51520], "temperature": 0.0, "avg_logprob": -0.09195067665793678, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.06569746881723404}, {"id": 499, "seek": 338748, "start": 3411.88, "end": 3416.76, "text": " suffix to a data type, you can also say, okay, pretty much any data type can be nullable. And", "tokens": [51584, 3889, 970, 281, 257, 1412, 2010, 11, 291, 393, 611, 584, 11, 1392, 11, 1238, 709, 604, 1412, 2010, 393, 312, 18184, 712, 13, 400, 51828], "temperature": 0.0, "avg_logprob": -0.09195067665793678, "compression_ratio": 1.7019230769230769, "no_speech_prob": 0.06569746881723404}, {"id": 500, "seek": 341676, "start": 3416.76, "end": 3424.5200000000004, "text": " that's great. Like, for instance, if you have a list of string of names, you can say, okay,", "tokens": [50364, 300, 311, 869, 13, 1743, 11, 337, 5197, 11, 498, 291, 362, 257, 1329, 295, 6798, 295, 5288, 11, 291, 393, 584, 11, 1392, 11, 50752], "temperature": 0.0, "avg_logprob": -0.12912245630060584, "compression_ratio": 1.7464788732394365, "no_speech_prob": 0.0007255253149196506}, {"id": 501, "seek": 341676, "start": 3424.5200000000004, "end": 3431.6400000000003, "text": " I have foo and bar here. This is a list of strings. I talked about lists in chapter four.", "tokens": [50752, 286, 362, 726, 78, 293, 2159, 510, 13, 639, 307, 257, 1329, 295, 13985, 13, 286, 2825, 466, 14511, 294, 7187, 1451, 13, 51108], "temperature": 0.0, "avg_logprob": -0.12912245630060584, "compression_ratio": 1.7464788732394365, "no_speech_prob": 0.0007255253149196506}, {"id": 502, "seek": 341676, "start": 3432.6000000000004, "end": 3438.6800000000003, "text": " Now, you can see here that list of strings, there are two data types here, the list itself,", "tokens": [51156, 823, 11, 291, 393, 536, 510, 300, 1329, 295, 13985, 11, 456, 366, 732, 1412, 3467, 510, 11, 264, 1329, 2564, 11, 51460], "temperature": 0.0, "avg_logprob": -0.12912245630060584, "compression_ratio": 1.7464788732394365, "no_speech_prob": 0.0007255253149196506}, {"id": 503, "seek": 341676, "start": 3438.6800000000003, "end": 3445.7200000000003, "text": " and the contents that it holds. So if you want to make the list in itself nullable, then you would", "tokens": [51460, 293, 264, 15768, 300, 309, 9190, 13, 407, 498, 291, 528, 281, 652, 264, 1329, 294, 2564, 18184, 712, 11, 550, 291, 576, 51812], "temperature": 0.0, "avg_logprob": -0.12912245630060584, "compression_ratio": 1.7464788732394365, "no_speech_prob": 0.0007255253149196506}, {"id": 504, "seek": 344572, "start": 3445.72, "end": 3453.3199999999997, "text": " put the question mark after. This means this list of strings in itself can be absent. So you say", "tokens": [50364, 829, 264, 1168, 1491, 934, 13, 639, 1355, 341, 1329, 295, 13985, 294, 2564, 393, 312, 25185, 13, 407, 291, 584, 50744], "temperature": 0.0, "avg_logprob": -0.09571192962954743, "compression_ratio": 1.6508620689655173, "no_speech_prob": 0.0008090782794170082}, {"id": 505, "seek": 344572, "start": 3453.3199999999997, "end": 3461.0, "text": " names null, and that's accepted. However, since you're telling Dart that, okay, the names value", "tokens": [50744, 5288, 18184, 11, 293, 300, 311, 9035, 13, 2908, 11, 1670, 291, 434, 3585, 30271, 300, 11, 1392, 11, 264, 5288, 2158, 51128], "temperature": 0.0, "avg_logprob": -0.09571192962954743, "compression_ratio": 1.6508620689655173, "no_speech_prob": 0.0008090782794170082}, {"id": 506, "seek": 344572, "start": 3461.0, "end": 3467.3199999999997, "text": " here can in its entirety be null, but its values are not supposed to be null. So if you then go", "tokens": [51128, 510, 393, 294, 1080, 31557, 312, 18184, 11, 457, 1080, 4190, 366, 406, 3442, 281, 312, 18184, 13, 407, 498, 291, 550, 352, 51444], "temperature": 0.0, "avg_logprob": -0.09571192962954743, "compression_ratio": 1.6508620689655173, "no_speech_prob": 0.0008090782794170082}, {"id": 507, "seek": 344572, "start": 3467.3199999999997, "end": 3473.08, "text": " in here and just put null in here, then you see that you got an error. And that's because Dart", "tokens": [51444, 294, 510, 293, 445, 829, 18184, 294, 510, 11, 550, 291, 536, 300, 291, 658, 364, 6713, 13, 400, 300, 311, 570, 30271, 51732], "temperature": 0.0, "avg_logprob": -0.09571192962954743, "compression_ratio": 1.6508620689655173, "no_speech_prob": 0.0008090782794170082}, {"id": 508, "seek": 347308, "start": 3473.08, "end": 3478.68, "text": " is saying that, okay, you just promised me that the list in itself, it can be absent, but as soon", "tokens": [50364, 307, 1566, 300, 11, 1392, 11, 291, 445, 10768, 385, 300, 264, 1329, 294, 2564, 11, 309, 393, 312, 25185, 11, 457, 382, 2321, 50644], "temperature": 0.0, "avg_logprob": -0.08859508864733638, "compression_ratio": 1.8055555555555556, "no_speech_prob": 0.026652304455637932}, {"id": 509, "seek": 347308, "start": 3478.68, "end": 3486.04, "text": " as it is not absent, meaning that as soon as it is present there with some values, its values cannot", "tokens": [50644, 382, 309, 307, 406, 25185, 11, 3620, 300, 382, 2321, 382, 309, 307, 1974, 456, 365, 512, 4190, 11, 1080, 4190, 2644, 51012], "temperature": 0.0, "avg_logprob": -0.08859508864733638, "compression_ratio": 1.8055555555555556, "no_speech_prob": 0.026652304455637932}, {"id": 510, "seek": 347308, "start": 3486.04, "end": 3493.3199999999997, "text": " be null. And that means that this type should be telling me here that it is null. So if you want to", "tokens": [51012, 312, 18184, 13, 400, 300, 1355, 300, 341, 2010, 820, 312, 3585, 385, 510, 300, 309, 307, 18184, 13, 407, 498, 291, 528, 281, 51376], "temperature": 0.0, "avg_logprob": -0.08859508864733638, "compression_ratio": 1.8055555555555556, "no_speech_prob": 0.026652304455637932}, {"id": 511, "seek": 347308, "start": 3493.3199999999997, "end": 3501.88, "text": " make an optional or nullable list of optional strings, then you would put the question mark", "tokens": [51376, 652, 364, 17312, 420, 18184, 712, 1329, 295, 17312, 13985, 11, 550, 291, 576, 829, 264, 1168, 1491, 51804], "temperature": 0.0, "avg_logprob": -0.08859508864733638, "compression_ratio": 1.8055555555555556, "no_speech_prob": 0.026652304455637932}, {"id": 512, "seek": 350188, "start": 3501.88, "end": 3507.8, "text": " after the data type of string as well. So this is now, I mean, the way you should read this is,", "tokens": [50364, 934, 264, 1412, 2010, 295, 6798, 382, 731, 13, 407, 341, 307, 586, 11, 286, 914, 11, 264, 636, 291, 820, 1401, 341, 307, 11, 50660], "temperature": 0.0, "avg_logprob": -0.07897894723074776, "compression_ratio": 1.6179775280898876, "no_speech_prob": 0.00031642228714190423}, {"id": 513, "seek": 350188, "start": 3508.92, "end": 3519.8, "text": " I have a list of strings, and I call that list names. Names can sometimes be null, meaning that", "tokens": [50716, 286, 362, 257, 1329, 295, 13985, 11, 293, 286, 818, 300, 1329, 5288, 13, 426, 1632, 393, 2171, 312, 18184, 11, 3620, 300, 51260], "temperature": 0.0, "avg_logprob": -0.07897894723074776, "compression_ratio": 1.6179775280898876, "no_speech_prob": 0.00031642228714190423}, {"id": 514, "seek": 350188, "start": 3519.8, "end": 3531.48, "text": " it can be absent. And if it is not absent, it can contain objects of type string that themselves", "tokens": [51260, 309, 393, 312, 25185, 13, 400, 498, 309, 307, 406, 25185, 11, 309, 393, 5304, 6565, 295, 2010, 6798, 300, 2969, 51844], "temperature": 0.0, "avg_logprob": -0.07897894723074776, "compression_ratio": 1.6179775280898876, "no_speech_prob": 0.00031642228714190423}, {"id": 515, "seek": 353148, "start": 3531.48, "end": 3538.76, "text": " can sometimes be absent, meaning that, okay, for instance, if you say foo bar null, that's accepted,", "tokens": [50364, 393, 2171, 312, 25185, 11, 3620, 300, 11, 1392, 11, 337, 5197, 11, 498, 291, 584, 726, 78, 2159, 18184, 11, 300, 311, 9035, 11, 50728], "temperature": 0.0, "avg_logprob": -0.08843986511230469, "compression_ratio": 1.6512605042016806, "no_speech_prob": 9.158328612102196e-05}, {"id": 516, "seek": 353148, "start": 3538.76, "end": 3546.36, "text": " but you can also say names is null. See what I mean? So both the container, which is called names,", "tokens": [50728, 457, 291, 393, 611, 584, 5288, 307, 18184, 13, 3008, 437, 286, 914, 30, 407, 1293, 264, 10129, 11, 597, 307, 1219, 5288, 11, 51108], "temperature": 0.0, "avg_logprob": -0.08843986511230469, "compression_ratio": 1.6512605042016806, "no_speech_prob": 9.158328612102196e-05}, {"id": 517, "seek": 353148, "start": 3546.36, "end": 3551.88, "text": " and the values that it contains can be optional. And the word optional is very important for you", "tokens": [51108, 293, 264, 4190, 300, 309, 8306, 393, 312, 17312, 13, 400, 264, 1349, 17312, 307, 588, 1021, 337, 291, 51384], "temperature": 0.0, "avg_logprob": -0.08843986511230469, "compression_ratio": 1.6512605042016806, "no_speech_prob": 9.158328612102196e-05}, {"id": 518, "seek": 353148, "start": 3551.88, "end": 3557.56, "text": " to learn. It's kind of like an industry accepted way of talking about nulls and nullable values.", "tokens": [51384, 281, 1466, 13, 467, 311, 733, 295, 411, 364, 3518, 9035, 636, 295, 1417, 466, 18184, 82, 293, 18184, 712, 4190, 13, 51668], "temperature": 0.0, "avg_logprob": -0.08843986511230469, "compression_ratio": 1.6512605042016806, "no_speech_prob": 9.158328612102196e-05}, {"id": 519, "seek": 355756, "start": 3557.56, "end": 3566.52, "text": " So this is optional, all right? Okay. Now we talked about that,", "tokens": [50364, 407, 341, 307, 17312, 11, 439, 558, 30, 1033, 13, 823, 321, 2825, 466, 300, 11, 50812], "temperature": 0.0, "avg_logprob": -0.11145764931865122, "compression_ratio": 1.6462264150943395, "no_speech_prob": 0.0026307033840566874}, {"id": 520, "seek": 355756, "start": 3567.96, "end": 3573.56, "text": " nullable values and optional values, all right? Basically, you can use those words interchangeably.", "tokens": [50884, 18184, 712, 4190, 293, 17312, 4190, 11, 439, 558, 30, 8537, 11, 291, 393, 764, 729, 2283, 30358, 1188, 13, 51164], "temperature": 0.0, "avg_logprob": -0.11145764931865122, "compression_ratio": 1.6462264150943395, "no_speech_prob": 0.0026307033840566874}, {"id": 521, "seek": 355756, "start": 3573.56, "end": 3580.04, "text": " So if you're talking with a colleague programmer, you would say, oh, how would you describe this?", "tokens": [51164, 407, 498, 291, 434, 1417, 365, 257, 13532, 32116, 11, 291, 576, 584, 11, 1954, 11, 577, 576, 291, 6786, 341, 30, 51488], "temperature": 0.0, "avg_logprob": -0.11145764931865122, "compression_ratio": 1.6462264150943395, "no_speech_prob": 0.0026307033840566874}, {"id": 522, "seek": 355756, "start": 3580.04, "end": 3585.16, "text": " Okay, this is an optional list of optional strings. Or you could also say nullable list", "tokens": [51488, 1033, 11, 341, 307, 364, 17312, 1329, 295, 17312, 13985, 13, 1610, 291, 727, 611, 584, 18184, 712, 1329, 51744], "temperature": 0.0, "avg_logprob": -0.11145764931865122, "compression_ratio": 1.6462264150943395, "no_speech_prob": 0.0026307033840566874}, {"id": 523, "seek": 358516, "start": 3585.16, "end": 3590.2, "text": " of nullable strings. But optional is also a word that is typically used to", "tokens": [50364, 295, 18184, 712, 13985, 13, 583, 17312, 307, 611, 257, 1349, 300, 307, 5850, 1143, 281, 50616], "temperature": 0.0, "avg_logprob": -0.14103967802865164, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.03888075426220894}, {"id": 524, "seek": 358516, "start": 3590.2, "end": 3598.52, "text": " talk about nullable values, all right? Okay. We talked about making any type nullable. So", "tokens": [50616, 751, 466, 18184, 712, 4190, 11, 439, 558, 30, 1033, 13, 492, 2825, 466, 1455, 604, 2010, 18184, 712, 13, 407, 51032], "temperature": 0.0, "avg_logprob": -0.14103967802865164, "compression_ratio": 1.3333333333333333, "no_speech_prob": 0.03888075426220894}], "language": "en"}